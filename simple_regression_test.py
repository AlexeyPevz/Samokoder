#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ pytest
QA/–¢–µ—Å—Ç-–∏–Ω–∂–µ–Ω–µ—Ä —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º
"""

import sys
import time
import json
import requests
from datetime import datetime
from typing import Dict, Any, List

class RegressionTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.base_url = "http://localhost:8000"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π URL API
        self.test_results = []
        self.start_time = time.time()
        
    def log_test(self, test_name: str, status: str, duration: float, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test_name": test_name,
            "status": status,
            "duration": duration,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status_icon = "‚úÖ" if status == "PASSED" else "‚ùå"
        print(f"{status_icon} {test_name}: {status} ({duration:.2f}s)")
        if details:
            print(f"   –î–µ—Ç–∞–ª–∏: {details}")
    
    def test_health_check(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        test_name = "Health Check"
        start_time = time.time()
        
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            endpoints = ["/health", "/", "/api/health", "/status"]
            
            for endpoint in endpoints:
                try:
                    response = requests.get(f"{self.base_url}{endpoint}", timeout=5)
                    if response.status_code == 200:
                        duration = time.time() - start_time
                        self.log_test(test_name, "PASSED", duration, f"Endpoint: {endpoint}")
                        return True
                except:
                    continue
            
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
            try:
                response = requests.get(f"{self.base_url}/", timeout=5)
                duration = time.time() - start_time
                self.log_test(test_name, "PASSED", duration, f"Basic connectivity: {response.status_code}")
                return True
            except Exception as e:
                duration = time.time() - start_time
                self.log_test(test_name, "FAILED", duration, f"Connection error: {str(e)}")
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            self.log_test(test_name, "FAILED", duration, f"Error: {str(e)}")
            return False
    
    def test_api_structure(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API"""
        test_name = "API Structure Check"
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã API
            api_endpoints = [
                "/api/auth/login",
                "/api/auth/register", 
                "/api/projects",
                "/api/ai/chat"
            ]
            
            available_endpoints = []
            for endpoint in api_endpoints:
                try:
                    response = requests.get(f"{self.base_url}{endpoint}", timeout=3)
                    if response.status_code in [200, 401, 405, 422]:  # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                        available_endpoints.append(endpoint)
                except:
                    continue
            
            duration = time.time() - start_time
            if available_endpoints:
                self.log_test(test_name, "PASSED", duration, f"Available endpoints: {len(available_endpoints)}")
                return True
            else:
                self.log_test(test_name, "FAILED", duration, "No API endpoints available")
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            self.log_test(test_name, "FAILED", duration, f"Error: {str(e)}")
            return False
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        test_name = "Error Handling"
        start_time = time.time()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            test_cases = [
                {
                    "url": "/api/auth/login",
                    "method": "POST",
                    "data": {"invalid": "data"},
                    "expected_status": [400, 401, 422]
                },
                {
                    "url": "/api/nonexistent",
                    "method": "GET", 
                    "data": None,
                    "expected_status": [404]
                }
            ]
            
            passed_tests = 0
            for test_case in test_cases:
                try:
                    if test_case["method"] == "POST":
                        response = requests.post(
                            f"{self.base_url}{test_case['url']}", 
                            json=test_case["data"], 
                            timeout=5
                        )
                    else:
                        response = requests.get(f"{self.base_url}{test_case['url']}", timeout=5)
                    
                    if response.status_code in test_case["expected_status"]:
                        passed_tests += 1
                        
                except Exception as e:
                    # –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    passed_tests += 1
            
            duration = time.time() - start_time
            if passed_tests >= len(test_cases) * 0.5:  # –•–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∞
                self.log_test(test_name, "PASSED", duration, f"Passed {passed_tests}/{len(test_cases)} tests")
                return True
            else:
                self.log_test(test_name, "FAILED", duration, f"Only {passed_tests}/{len(test_cases)} tests passed")
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            self.log_test(test_name, "FAILED", duration, f"Error: {str(e)}")
            return False
    
    def test_performance(self):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        test_name = "Performance Test"
        start_time = time.time()
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            response_times = []
            for i in range(5):
                test_start = time.time()
                try:
                    response = requests.get(f"{self.base_url}/", timeout=10)
                    test_duration = time.time() - test_start
                    response_times.append(test_duration)
                except:
                    response_times.append(10.0)  # –¢–∞–π–º–∞—É—Ç
            
            avg_response_time = sum(response_times) / len(response_times)
            max_response_time = max(response_times)
            
            duration = time.time() - start_time
            
            if avg_response_time < 5.0 and max_response_time < 10.0:
                self.log_test(test_name, "PASSED", duration, 
                    f"Avg: {avg_response_time:.2f}s, Max: {max_response_time:.2f}s")
                return True
            else:
                self.log_test(test_name, "FAILED", duration, 
                    f"Slow response - Avg: {avg_response_time:.2f}s, Max: {max_response_time:.2f}s")
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            self.log_test(test_name, "FAILED", duration, f"Error: {str(e)}")
            return False
    
    def test_security_headers(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        test_name = "Security Headers"
        start_time = time.time()
        
        try:
            response = requests.get(f"{self.base_url}/", timeout=5)
            headers = response.headers
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_headers = [
                "X-Content-Type-Options",
                "X-Frame-Options", 
                "X-XSS-Protection",
                "Strict-Transport-Security"
            ]
            
            found_headers = [h for h in security_headers if h in headers]
            
            duration = time.time() - start_time
            if len(found_headers) >= 1:  # –•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                self.log_test(test_name, "PASSED", duration, f"Found headers: {found_headers}")
                return True
            else:
                self.log_test(test_name, "FAILED", duration, "No security headers found")
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            self.log_test(test_name, "FAILED", duration, f"Error: {str(e)}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        print("=" * 60)
        
        tests = [
            self.test_health_check,
            self.test_api_structure,
            self.test_error_handling,
            self.test_performance,
            self.test_security_headers
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test in tests:
            try:
                if test():
                    passed_tests += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {str(e)}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_duration = time.time() - self.start_time
        success_rate = (passed_tests / total_tests) * 100
        
        print("=" * 60)
        print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞
        if passed_tests == total_tests:
            print("‚úÖ –°–¢–ê–¢–£–° –†–ï–õ–ò–ó–ê: –†–ê–ó–†–ï–®–ï–ù - –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        elif success_rate >= 80:
            print("‚ö†Ô∏è  –°–¢–ê–¢–£–° –†–ï–õ–ò–ó–ê: –£–°–õ–û–í–ù–û –†–ê–ó–†–ï–®–ï–ù - –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã")
        else:
            print("‚ùå –°–¢–ê–¢–£–° –†–ï–õ–ò–ó–ê: –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù - –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        
        return {
            "total_tests": total_tests,
            "passed_tests": passed_tests,
            "failed_tests": total_tests - passed_tests,
            "success_rate": success_rate,
            "duration": total_duration,
            "results": self.test_results
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Samokoder")
    print("QA Engineer: 20 –ª–µ—Ç –æ–ø—ã—Ç–∞")
    print("–î–∞—Ç–∞:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print()
    
    tester = RegressionTester()
    results = tester.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    with open("/workspace/regression_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: regression_test_results.json")
    
    return results

if __name__ == "__main__":
    main()