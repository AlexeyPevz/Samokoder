"""Validator for configuration security."""
import secrets
import logging
from typing import Optional

logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö/–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
DEFAULT_SECRETS = [
    "your-super-secret-jwt-key-change-in-production-minimum-32-characters-for-security",
    "9761242676a4c005fca8992c05f3d06241b122a52dc291dd091081028c4f3ab3",
    "your-super-secret-app-key-change-in-production-minimum-32-characters-for-security",
]


def generate_secret_key(length: int = 64) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á.
    
    Args:
        length: –î–ª–∏–Ω–∞ –∫–ª—é—á–∞ –≤ –±–∞–π—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 64)
    
    Returns:
        URL-safe base64 —Å—Ç—Ä–æ–∫–∞
    """
    return secrets.token_urlsafe(length)


def validate_secret_key(secret: str, environment: str, key_name: str = "SECRET_KEY") -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.
    
    Args:
        secret: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        environment: –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (production, development, etc.)
        key_name: –ò–º—è –∫–ª—é—á–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        True –µ—Å–ª–∏ –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω, False –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    
    Raises:
        ValueError: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∫–ª—é—á–æ–º
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –∫–ª—é—á
    if not secret or len(secret.strip()) == 0:
        logger.error(f"‚ùå {key_name} is empty!")
        if environment == "production":
            raise ValueError(f"{key_name} cannot be empty in production!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if secret in DEFAULT_SECRETS:
        msg = f"‚ö†Ô∏è  {key_name} is using DEFAULT value! This is INSECURE!"
        logger.warning(msg)
        
        if environment == "production":
            raise ValueError(
                f"{key_name} is using default value in production! "
                f"Please generate a unique key using: python -c 'import secrets; print(secrets.token_urlsafe(64))'"
            )
        else:
            logger.warning(f"üí° Generate a new {key_name}: python -c 'import secrets; print(secrets.token_urlsafe(64))'")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(secret) < 32:
        logger.warning(f"‚ö†Ô∏è  {key_name} is too short (< 32 chars). Recommend at least 64 chars.")
        if environment == "production":
            raise ValueError(f"{key_name} must be at least 32 characters in production!")
        return False
    
    logger.info(f"‚úÖ {key_name} validation passed")
    return True


def validate_config_security(config, fail_fast: bool = True) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    
    Args:
        config: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        fail_fast: –ï—Å–ª–∏ True, –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ production
    
    Returns:
        True –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    """
    environment = getattr(config, 'environment', 'development')
    
    logger.info(f"üîí Validating security configuration (environment: {environment})")
    
    all_valid = True
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è SECRET_KEY
    try:
        valid = validate_secret_key(config.secret_key, environment, "SECRET_KEY")
        all_valid = all_valid and valid
    except ValueError as e:
        if fail_fast:
            raise
        logger.error(str(e))
        all_valid = False
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è APP_SECRET_KEY
    try:
        valid = validate_secret_key(config.app_secret_key, environment, "APP_SECRET_KEY")
        all_valid = all_valid and valid
    except ValueError as e:
        if fail_fast:
            raise
        logger.error(str(e))
        all_valid = False
    
    if all_valid:
        logger.info("‚úÖ All security validations passed")
    else:
        logger.warning("‚ö†Ô∏è  Some security validations failed")
    
    return all_valid
