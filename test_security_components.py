#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
import os
sys.path.append('/workspace')

def test_simple_input_validator():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SimpleInputValidator...")
    
    try:
        from backend.security.simple_input_validator import SimpleInputValidator
        
        validator = SimpleInputValidator()
        
        # –¢–µ—Å—Ç SQL injection
        assert validator.validate_sql_input("SELECT * FROM users") == True
        assert validator.validate_sql_input("'; DROP TABLE users; --") == False
        print("  ‚úÖ SQL injection validation OK")
        
        # –¢–µ—Å—Ç XSS
        assert validator.validate_xss_input("Hello world") == True
        assert validator.validate_xss_input("<script>alert('xss')</script>") == False
        print("  ‚úÖ XSS validation OK")
        
        # –¢–µ—Å—Ç path traversal
        assert validator.validate_path_traversal("normal/path/file.txt") == True
        assert validator.validate_path_traversal("../../../etc/passwd") == False
        print("  ‚úÖ Path traversal validation OK")
        
        # –¢–µ—Å—Ç email
        assert validator.validate_email("test@example.com") == True
        assert validator.validate_email("invalid-email") == False
        print("  ‚úÖ Email validation OK")
        
        # –¢–µ—Å—Ç –ø–∞—Ä–æ–ª—è
        is_strong, errors = validator.validate_password_strength("MyStr0ng!P@ssw0rd")
        assert is_strong == True
        print("  ‚úÖ Password strength validation OK")
        
        # –¢–µ—Å—Ç –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
        assert validator.validate_project_name("My Project") == True
        assert validator.validate_project_name("<script>alert('xss')</script>") == False
        print("  ‚úÖ Project name validation OK")
        
        print("‚úÖ SimpleInputValidator - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå SimpleInputValidator - –æ—à–∏–±–∫–∞: {e}")
        return False

def test_simple_file_upload():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SimpleFileUploadSecurity...")
    
    try:
        from backend.security.simple_file_upload import SimpleFileUploadSecurity
        
        security = SimpleFileUploadSecurity()
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        valid_content = b"Hello, World!"
        is_valid, message, file_ext = security.validate_file(valid_content, "test.txt")
        assert is_valid == True
        print("  ‚úÖ File validation OK")
        
        # –¢–µ—Å—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        is_valid, message, file_ext = security.validate_file(valid_content, "test.exe")
        assert is_valid == False
        print("  ‚úÖ Forbidden extension validation OK")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        png_content = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\nIDATx\x9cc\x00\x01\x00\x00\x05\x00\x01\r\n-\xdb\x00\x00\x00\x00IEND\xaeB`\x82'
        is_valid = security._validate_image(png_content)
        # PNG –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
        if not is_valid:
            # –ï—Å–ª–∏ PNG –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä–∏–º JPEG
            jpeg_content = b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xff\xdb\x00C\x00'
            is_valid = security._validate_image(jpeg_content)
        assert is_valid == True
        print("  ‚úÖ Image validation OK")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_name = security._generate_safe_filename("../../../etc/passwd")
        assert ".." not in safe_name
        assert "/" not in safe_name
        print("  ‚úÖ Safe filename generation OK")
        
        print("‚úÖ SimpleFileUploadSecurity - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå SimpleFileUploadSecurity - –æ—à–∏–±–∫–∞: {e}")
        return False

def test_session_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SecureSessionManager...")
    
    try:
        from backend.security.session_manager import SecureSessionManager
        
        manager = SecureSessionManager("test-secret-key")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        session_id = manager.create_session("user123", "192.168.1.1", "Mozilla/5.0")
        assert session_id is not None
        print("  ‚úÖ Session creation OK")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
        is_valid = manager.validate_session(session_id, "192.168.1.1", "Mozilla/5.0")
        assert is_valid == True
        print("  ‚úÖ Session validation OK")
        
        # –¢–µ—Å—Ç CSRF —Ç–æ–∫–µ–Ω–∞
        session_data = manager.sessions[session_id]
        csrf_valid = manager.validate_csrf_token(session_id, session_data.csrf_token)
        assert csrf_valid == True
        print("  ‚úÖ CSRF token validation OK")
        
        # –¢–µ—Å—Ç –æ—Ç–∑—ã–≤–∞ —Å–µ—Å—Å–∏–∏
        revoked = manager.revoke_session(session_id)
        assert revoked == True
        print("  ‚úÖ Session revocation OK")
        
        # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
        cleaned = manager.cleanup_expired_sessions()
        assert isinstance(cleaned, int)
        print("  ‚úÖ Expired sessions cleanup OK")
        
        print("‚úÖ SecureSessionManager - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå SecureSessionManager - –æ—à–∏–±–∫–∞: {e}")
        return False

def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from backend.security.simple_input_validator import validate_project_name
        from backend.security.simple_file_upload import validate_file
        from backend.security.session_manager import create_session
        
        # –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        project_name = "Test Project"
        is_valid = validate_project_name(project_name)
        assert is_valid == True
        
        file_content = b"Test content"
        is_valid, message, file_ext = validate_file(file_content, "test.txt")
        assert is_valid == True
        
        session_id = create_session("user123", "192.168.1.1", "Mozilla/5.0")
        assert session_id is not None
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üõ°Ô∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 50)
    
    tests = [
        test_simple_input_validator,
        test_simple_file_upload,
        test_session_manager,
        test_integration
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    if passed == total:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        return 0
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        return 1

if __name__ == "__main__":
    sys.exit(main())