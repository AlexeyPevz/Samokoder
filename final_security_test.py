#!/usr/bin/env python3
"""
Final Security Test
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import re
from pathlib import Path

def test_jwt_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç JWT –≤–∞–ª–∏–¥–∞—Ü–∏—é"""
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    
    deps_file = Path("backend/auth/dependencies.py")
    if not deps_file.exists():
        print("‚ùå –§–∞–π–ª auth/dependencies.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    content = deps_file.read_text()
    if "def validate_jwt_token" in content and "jwt.decode" in content and "payload['exp']" in content:
        print("‚úÖ JWT –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return True
    else:
        print("‚ùå JWT –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return False

def test_password_hashing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π"""
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π...")
    
    deps_file = Path("backend/auth/dependencies.py")
    if not deps_file.exists():
        print("‚ùå –§–∞–π–ª auth/dependencies.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    content = deps_file.read_text()
    if "def hash_password" in content and "pbkdf2_hmac" in content and "def verify_password" in content:
        print("‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        return True
    else:
        print("‚ùå –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        return False

def test_csrf_protection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CSRF –∑–∞—â–∏—Ç—É"""
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF –∑–∞—â–∏—Ç—ã...")
    
    main_file = Path("backend/main.py")
    if not main_file.exists():
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    content = main_file.read_text()
    if "csrf_protect" in content and "X-CSRF-Token" in content and "validate_csrf_token" in content:
        print("‚úÖ CSRF –∑–∞—â–∏—Ç–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return True
    else:
        print("‚ùå CSRF –∑–∞—â–∏—Ç–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return False

def test_cors_security():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π CORS...")
    
    main_file = Path("backend/main.py")
    if not main_file.exists():
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    content = main_file.read_text()
    if "allowed_origins" in content and 'allow_headers=["*"]' not in content:
        print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        return True
    else:
        print("‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        return False

def test_security_headers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    main_file = Path("backend/main.py")
    if not main_file.exists():
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    content = main_file.read_text()
    security_headers = ["X-Content-Type-Options", "X-Frame-Options", "X-XSS-Protection", "Strict-Transport-Security"]
    if all(header in content for header in security_headers):
        print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return True
    else:
        print("‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return False

def test_sql_injection_protection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π"""
    print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π...")
    
    validator_file = Path("backend/validators/secure_input_validator.py")
    if not validator_file.exists():
        print("‚ùå –§–∞–π–ª secure_input_validator.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    content = validator_file.read_text()
    if "SQL_INJECTION_PATTERNS" in content and "union" in content and "select" in content:
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return True
    else:
        print("‚ùå –ó–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return False

def test_xss_protection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç XSS"""
    print("\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç XSS...")
    
    validator_file = Path("backend/validators/secure_input_validator.py")
    if not validator_file.exists():
        print("‚ùå –§–∞–π–ª secure_input_validator.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    content = validator_file.read_text()
    if "XSS_PATTERNS" in content and "bleach" in content and "script" in content:
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç XSS —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return True
    else:
        print("‚ùå –ó–∞—â–∏—Ç–∞ –æ—Ç XSS –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return False

def test_rate_limiting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–π rate limiting"""
    print("\n8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–≥–æ–≥–æ rate limiting...")
    
    rate_limiter_file = Path("backend/middleware/secure_rate_limiter.py")
    if not rate_limiter_file.exists():
        print("‚ùå –§–∞–π–ª secure_rate_limiter.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    content = rate_limiter_file.read_text()
    if "auth_limits" in content and "3" in content and "900" in content:
        print("‚úÖ –°—Ç—Ä–æ–≥–∏–π rate limiting —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        return True
    else:
        print("‚ùå –°—Ç—Ä–æ–≥–∏–π rate limiting –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        return False

def run_security_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    tests = [
        test_jwt_validation,
        test_password_hashing,
        test_csrf_protection,
        test_cors_security,
        test_security_headers,
        test_sql_injection_protection,
        test_xss_protection,
        test_rate_limiting
    ]
    
    tests_passed = 0
    for test_func in tests:
        if test_func():
            tests_passed += 1
    
    return tests_passed, len(tests)

def test_specific_fixes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    print("üîí –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests_passed, total_tests = run_security_tests()
    
    # –¢–µ—Å—Ç 9: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    total_tests += 1
    
    error_handler_file = Path("backend/middleware/secure_error_handler.py")
    if error_handler_file.exists():
        content = error_handler_file.read_text()
        if "sanitize_error_message" in content and "REDACTED" in content:
            print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
            tests_passed += 1
        else:
            print("‚ùå –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    
    # –¢–µ—Å—Ç 10: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å supabase
    print("\n10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å supabase...")
    total_tests += 1
    
    if deps_file.exists():
        content = deps_file.read_text()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
        if "supabase_client = connection_manager.get_pool('supabase')" in content and "if not supabase_client:" in content:
            print("‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç—å —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            tests_passed += 1
        else:
            print("‚ùå –£—è–∑–≤–∏–º–æ—Å—Ç—å —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}/{total_tests}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("üîí –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –ü–†–ò–ú–ï–ù–ï–ù–´")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total_tests - tests_passed}")
        return False

if __name__ == "__main__":
    success = test_specific_fixes()
    exit(0 if success else 1)