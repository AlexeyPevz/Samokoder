#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –°–∞–º–æ–∫–æ–¥–µ—Ä (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""

import uvicorn
import os
import sys
from pathlib import Path
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

from config.settings_fixed import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.log_level.upper()),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Samokoder Backend API (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
    print(f"üìç Host: {settings.host}")
    print(f"üîå Port: {settings.port}")
    print(f"üåç Environment: {settings.environment}")
    print(f"üêõ Debug: {settings.debug}")
    print(f"üìö Docs: http://{settings.host}:{settings.port}/docs")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists(".env"):
        print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: —Ñ–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        print("üí° cp .env.example .env")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = [
        "SUPABASE_URL",
        "SUPABASE_ANON_KEY", 
        "API_ENCRYPTION_KEY"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not getattr(settings, var.lower(), None):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\nüìã –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ .env")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
    try:
        from supabase import create_client
        supabase = create_client(settings.supabase_url, settings.supabase_anon_key)
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        supabase.table("profiles").select("id").limit(1).execute()
        print("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SUPABASE_URL –∏ SUPABASE_ANON_KEY")
        logger.error(f"Supabase connection error: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPT-Pilot
    gpt_pilot_path = Path(settings.gpt_pilot_path)
    if not gpt_pilot_path.exists():
        print(f"‚ö†Ô∏è  GPT-Pilot –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {gpt_pilot_path}")
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–µ–∫")
    else:
        print("‚úÖ GPT-Pilot –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for dir_path in [settings.export_storage_path, settings.workspace_storage_path]:
        try:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} –≥–æ—Ç–æ–≤–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_path}: {e}")
            logger.error(f"Directory creation error: {e}")
            return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    try:
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
        uvicorn.run(
            "backend.main_fixed:app",
            host=settings.host,
            port=settings.port,
            reload=settings.debug,
            log_level=settings.log_level.lower(),
            access_log=True
        )
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        logger.error(f"Server startup error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()