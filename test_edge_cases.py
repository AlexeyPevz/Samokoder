#!/usr/bin/env python3
"""
–¢–µ—Å—Ç edge cases –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –±–∞–≥–æ–≤
"""

import asyncio
import httpx
import json
import uuid
from datetime import datetime

BASE_URL = "http://localhost:8001"

async def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ edge cases"""
    
    print("üîç EDGE CASES TESTING")
    print("=" * 50)
    
    async with httpx.AsyncClient(timeout=10.0) as client:
        
        # 1. –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        try:
            response = await client.post(
                f"{BASE_URL}/api/auth/login",
                json={}
            )
            if response.status_code == 400:
                print("   ‚úÖ –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 2. –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON
        print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON...")
        try:
            response = await client.post(
                f"{BASE_URL}/api/auth/login",
                content="invalid json",
                headers={"Content-Type": "application/json"}
            )
            if response.status_code == 422:
                print("   ‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 3. –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        try:
            long_string = "x" * 10000
            response = await client.post(
                f"{BASE_URL}/api/auth/login",
                json={"email": long_string, "password": long_string}
            )
            if response.status_code in [200, 400, 422]:
                print("   ‚úÖ –î–ª–∏–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 4. –¢–µ—Å—Ç —Å SQL injection –ø–æ–ø—ã—Ç–∫–∞–º–∏
        print("4. –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL injection...")
        try:
            response = await client.post(
                f"{BASE_URL}/api/auth/login",
                json={"email": "'; DROP TABLE users; --", "password": "test"}
            )
            if response.status_code in [200, 400, 401]:
                print("   ‚úÖ SQL injection –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 5. –¢–µ—Å—Ç —Å XSS –ø–æ–ø—ã—Ç–∫–∞–º–∏
        print("5. –¢–µ—Å—Ç–∏—Ä—É–µ–º XSS –ø–æ–ø—ã—Ç–∫–∏...")
        try:
            response = await client.post(
                f"{BASE_URL}/api/auth/login",
                json={"email": "<script>alert('xss')</script>", "password": "test"}
            )
            if response.status_code in [200, 400, 401]:
                print("   ‚úÖ XSS –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 6. –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º
        print("6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç...")
        try:
            mock_token = f"mock_token_{uuid.uuid4()}"
            response = await client.get(
                f"{BASE_URL}/api/projects/nonexistent-project-id",
                headers={"Authorization": f"Bearer {mock_token}"}
            )
            if response.status_code == 404:
                print("   ‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 7. –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        print("7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω...")
        try:
            response = await client.get(
                f"{BASE_URL}/api/projects",
                headers={"Authorization": "Bearer invalid_token"}
            )
            if response.status_code == 401:
                print("   ‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 8. –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
        print("8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω...")
        try:
            response = await client.get(f"{BASE_URL}/api/projects")
            if response.status_code == 403:
                print("   ‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 9. –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º Content-Type
        print("9. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π Content-Type...")
        try:
            response = await client.post(
                f"{BASE_URL}/api/auth/login",
                content='{"email":"test@example.com","password":"test"}',
                headers={"Content-Type": "text/plain"}
            )
            if response.status_code in [200, 400, 415]:
                print("   ‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π Content-Type –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # 10. –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞
        print("10. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞...")
        try:
            large_data = {"email": "test@example.com", "password": "test", "extra": "x" * 1000000}
            response = await client.post(
                f"{BASE_URL}/api/auth/login",
                json=large_data,
                timeout=5.0
            )
            if response.status_code in [200, 400, 413]:
                print("   ‚úÖ –ë–æ–ª—å—à–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("\n" + "=" * 50)
        print("üéâ EDGE CASES TESTING –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    asyncio.run(test_edge_cases())