#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª—é—á–µ–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Python
"""

import secrets
import string
import base64
import os

def generate_secure_string(length: int, include_symbols: bool = True) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫—É—é —Å—Ç—Ä–æ–∫—É"""
    if include_symbols:
        characters = string.ascii_letters + string.digits + "!@#$%^&*"
    else:
        characters = string.ascii_letters + string.digits
    
    return ''.join(secrets.choice(characters) for _ in range(length))

def generate_jwt_secret() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Å–µ–∫—Ä–µ—Ç"""
    return secrets.token_urlsafe(32)

def generate_api_encryption_key() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 32-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è API"""
    return generate_secure_string(32, include_symbols=False)

def generate_salt() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–ª—å –¥–ª—è PBKDF2"""
    return generate_secure_string(16, include_symbols=False)

def generate_csrf_secret() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSRF —Å–µ–∫—Ä–µ—Ç"""
    return secrets.token_urlsafe(32)

def main():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏"""
    print("üîê –ì–ï–ù–ï–†–ê–¶–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–´–• –ö–õ–Æ–ß–ï–ô –î–õ–Ø PRODUCTION")
    print("=" * 60)
    
    keys = {
        "API_ENCRYPTION_KEY": generate_api_encryption_key(),
        "API_ENCRYPTION_SALT": generate_salt(),
        "JWT_SECRET": generate_jwt_secret(),
        "CSRF_SECRET": generate_csrf_secret(),
    }
    
    print("\nüìã –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ï –ö–õ–Æ–ß–ò:")
    print("-" * 40)
    
    for key_name, key_value in keys.items():
        print(f"{key_name}={key_value}")
    
    print("\nüîí –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
    print("-" * 40)
    print("1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –∫–ª—é—á–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ")
    print("2. –ù–ï –∫–æ–º–º–∏—Ç—å—Ç–µ –∏—Ö –≤ Git")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ production")
    print("4. –†–µ–≥—É–ª—è—Ä–Ω–æ —Ä–æ—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ (–∫–∞–∂–¥—ã–µ 90 –¥–Ω–µ–π)")
    print("5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π")
    
    print("\nüìù –î–õ–Ø .env –§–ê–ô–õ–ê:")
    print("-" * 40)
    for key_name, key_value in keys.items():
        print(f"{key_name}={key_value}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É –∫–ª—é—á–µ–π
    print("\n‚úÖ –ü–†–û–í–ï–†–ö–ê –°–ò–õ–´ –ö–õ–Æ–ß–ï–ô:")
    print("-" * 40)
    
    for key_name, key_value in keys.items():
        entropy = len(key_value) * 4  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è
        strength = "–û–¢–õ–ò–ß–ù–û" if entropy >= 128 else "–•–û–†–û–®–û" if entropy >= 64 else "–°–õ–ê–ë–û"
        print(f"{key_name}: {strength} (—ç–Ω—Ç—Ä–æ–ø–∏—è: ~{entropy} –±–∏—Ç)")
    
    print("\nüéØ –ö–õ–Æ–ß–ò –ì–û–¢–û–í–´ –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –í PRODUCTION!")

if __name__ == "__main__":
    main()