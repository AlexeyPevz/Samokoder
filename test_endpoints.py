#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
"""

import sys
import os
sys.path.append('/workspace')

from backend.main import app
from fastapi.testclient import TestClient

def test_app_starts():
    """–¢–µ—Å—Ç —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫"""
    try:
        client = TestClient(app)
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def test_health_endpoint():
    """–¢–µ—Å—Ç health —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    try:
        client = TestClient(app)
        response = client.get("/health")
        print(f"‚úÖ Health endpoint: {response.status_code}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health endpoint: {e}")
        return False

def test_login_endpoint():
    """–¢–µ—Å—Ç login —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    try:
        client = TestClient(app)
        response = client.post("/api/auth/login", 
            json={
                "email": "test@example.com",
                "password": "password123"
            },
            headers={"X-CSRF-Token": "test_csrf_token"}
        )
        print(f"‚úÖ Login endpoint: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ login endpoint: {e}")
        return False

def test_register_endpoint():
    """–¢–µ—Å—Ç register —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    try:
        client = TestClient(app)
        response = client.post("/api/auth/register", 
            json={
                "email": "newuser@example.com",
                "password": "password123",
                "full_name": "New User"
            },
            headers={"X-CSRF-Token": "test_csrf_token"}
        )
        print(f"‚úÖ Register endpoint: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ register endpoint: {e}")
        return False

def test_projects_endpoint():
    """–¢–µ—Å—Ç projects —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    try:
        client = TestClient(app)
        response = client.get("/api/projects?limit=5&offset=0")
        print(f"‚úÖ Projects endpoint: {response.status_code}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ projects endpoint: {e}")
        return False

def test_ai_endpoint():
    """–¢–µ—Å—Ç AI —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    try:
        client = TestClient(app)
        response = client.post("/api/ai/chat", 
            json={
                "message": "Hello, AI!",
                "context": "test",
                "model": "gpt-3.5-turbo",
                "provider": "openai"
            },
            headers={"X-CSRF-Token": "test_csrf_token"}
        )
        print(f"‚úÖ AI chat endpoint: {response.status_code}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI chat endpoint: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    print("=" * 50)
    
    tests = [
        test_app_starts,
        test_health_endpoint,
        test_login_endpoint,
        test_register_endpoint,
        test_projects_endpoint,
        test_ai_endpoint
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)