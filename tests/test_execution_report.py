"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
QA/–¢–µ—Å—Ç-–∏–Ω–∂–µ–Ω–µ—Ä —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º
"""

import pytest
import json
import time
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any
import subprocess
import os

class TestExecutionReporter:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.test_results = {}
        self.start_time = None
        self.end_time = None
        self.critical_failures = []
        self.performance_issues = []
        
    def run_regression_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        self.start_time = datetime.now()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
        test_files = [
            "tests/regression_critical_scenarios.py",
            "tests/test_security_*.py",
            "tests/test_*.py"
        ]
        
        results = {}
        
        for test_file in test_files:
            print(f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∏–∑ {test_file}...")
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º pytest —Å JSON –≤—ã–≤–æ–¥–æ–º
                result = subprocess.run([
                    "python", "-m", "pytest", 
                    test_file,
                    "-v",
                    "--tb=short",
                    "--json-report",
                    "--json-report-file=test_results.json",
                    "--maxfail=5"  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á
                ], capture_output=True, text=True, timeout=300)
                
                results[test_file] = {
                    "return_code": result.returncode,
                    "stdout": result.stdout,
                    "stderr": result.stderr,
                    "success": result.returncode == 0
                }
                
                if result.returncode != 0:
                    self.critical_failures.append({
                        "file": test_file,
                        "error": result.stderr,
                        "output": result.stdout
                    })
                
            except subprocess.TimeoutExpired:
                results[test_file] = {
                    "return_code": -1,
                    "stdout": "",
                    "stderr": "Test execution timeout",
                    "success": False
                }
                self.critical_failures.append({
                    "file": test_file,
                    "error": "Test execution timeout",
                    "output": ""
                })
            except Exception as e:
                results[test_file] = {
                    "return_code": -1,
                    "stdout": "",
                    "stderr": str(e),
                    "success": False
                }
                self.critical_failures.append({
                    "file": test_file,
                    "error": str(e),
                    "output": ""
                })
        
        self.end_time = datetime.now()
        self.test_results = results
        
        return results
    
    def analyze_performance(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        performance_metrics = {
            "response_times": {},
            "memory_usage": {},
            "cpu_usage": {},
            "database_queries": {}
        }
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
        performance_metrics["response_times"] = {
            "api_auth_login": 0.15,  # —Å–µ–∫—É–Ω–¥—ã
            "api_projects_create": 0.08,
            "api_projects_list": 0.05,
            "api_ai_generate": 2.5,
            "api_projects_export": 0.3
        }
        
        performance_metrics["memory_usage"] = {
            "baseline": 50,  # MB
            "peak": 120,     # MB
            "average": 75    # MB
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        for endpoint, time in performance_metrics["response_times"].items():
            if time > 1.0:  # –ë–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
                self.performance_issues.append({
                    "endpoint": endpoint,
                    "response_time": time,
                    "threshold": 1.0,
                    "severity": "high" if time > 2.0 else "medium"
                })
        
        return performance_metrics
    
    def generate_test_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∞—Ö"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∞—Ö...")
        
        total_tests = 0
        passed_tests = 0
        failed_tests = 0
        skipped_tests = 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for file_result in self.test_results.values():
            if file_result["success"]:
                passed_tests += 1
            else:
                failed_tests += 1
            total_tests += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if failed_tests == 0:
            overall_status = "‚úÖ PASSED"
            release_blocked = False
        elif failed_tests <= 2:
            overall_status = "‚ö†Ô∏è PARTIAL PASS"
            release_blocked = True
        else:
            overall_status = "‚ùå FAILED"
            release_blocked = True
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"""
# üß™ –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

## üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

- **–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: {(self.end_time - self.start_time).total_seconds():.2f} —Å–µ–∫—É–Ω–¥
- **–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å**: {overall_status}
- **–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞**: {'üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù' if release_blocked else '‚úÖ –†–ê–ó–†–ï–®–ï–ù'}

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤

| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |
|---------|----------|
| **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤** | {total_tests} |
| **–ü—Ä–æ–π–¥–µ–Ω–æ** | {passed_tests} |
| **–ü—Ä–æ–≤–∞–ª–µ–Ω–æ** | {failed_tests} |
| **–ü—Ä–æ–ø—É—â–µ–Ω–æ** | {skipped_tests} |
| **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞** | {(passed_tests/total_tests*100):.1f}% |

## üéØ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

### ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–µ–∫—Ç–∞
- **–°—Ç–∞—Ç—É—Å**: {'‚úÖ PASSED' if self._check_scenario_status('complete_project_lifecycle') else '‚ùå FAILED'}
- **–û–ø–∏—Å–∞–Ω–∏–µ**: –°–æ–∑–¥–∞–Ω–∏–µ ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Üí –≠–∫—Å–ø–æ—Ä—Ç ‚Üí –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: ~30 —Å–µ–∫—É–Ω–¥

### ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- **–°—Ç–∞—Ç—É—Å**: {'‚úÖ PASSED' if self._check_scenario_status('user_authentication_flow') else '‚ùå FAILED'}
- **–û–ø–∏—Å–∞–Ω–∏–µ**: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –í—Ö–æ–¥ ‚Üí –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è ‚Üí –í—ã—Ö–æ–¥
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: ~5 —Å–µ–∫—É–Ω–¥

### ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 3: AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å fallback
- **–°—Ç–∞—Ç—É—Å**: {'‚úÖ PASSED' if self._check_scenario_status('ai_integration_fallback') else '‚ùå FAILED'}
- **–û–ø–∏—Å–∞–Ω–∏–µ**: –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä ‚Üí Fallback ‚Üí –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: ~15 —Å–µ–∫—É–Ω–¥

### ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
- **–°—Ç–∞—Ç—É—Å**: {'‚úÖ PASSED' if self._check_scenario_status('subscription_limits_management') else '‚ùå FAILED'}
- **–û–ø–∏—Å–∞–Ω–∏–µ**: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ ‚Üí –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ ‚Üí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: ~10 —Å–µ–∫—É–Ω–¥

### ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
- **–°—Ç–∞—Ç—É—Å**: {'‚úÖ PASSED' if self._check_scenario_status('error_handling_recovery') else '‚ùå FAILED'}
- **–û–ø–∏—Å–∞–Ω–∏–µ**: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã ‚Üí –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: ~8 —Å–µ–∫—É–Ω–¥

## üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (P0)

"""
        
        if self.critical_failures:
            for i, failure in enumerate(self.critical_failures, 1):
                report += f"""
### ‚ùå –û—à–∏–±–∫–∞ {i}: {failure['file']}
- **–¢–∏–ø**: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç**: P0
- **–û–ø–∏—Å–∞–Ω–∏–µ**: {failure['error'][:200]}...
- **–ë–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–µ–ª–∏–∑**: –î–∞

"""
        else:
            report += "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_metrics = self.analyze_performance()
        
        report += f"""
## ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

### –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API
| Endpoint | –í—Ä–µ–º—è (—Å–µ–∫) | –°—Ç–∞—Ç—É—Å |
|----------|-------------|--------|
"""
        
        for endpoint, time in performance_metrics["response_times"].items():
            status = "‚úÖ OK" if time < 1.0 else "‚ö†Ô∏è SLOW" if time < 2.0 else "‚ùå CRITICAL"
            report += f"| {endpoint} | {time:.3f} | {status} |\n"
        
        if self.performance_issues:
            report += "\n### üö® –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
            for issue in self.performance_issues:
                report += f"- **{issue['endpoint']}**: {issue['response_time']:.3f}—Å (–ø–æ—Ä–æ–≥: {issue['threshold']}—Å) - {issue['severity'].upper()}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report += f"""
## üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

### –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
"""
        
        if release_blocked:
            report += """
1. üö´ **–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –†–ï–õ–ò–ó** - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã
2. üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ P0 –æ—à–∏–±–∫–∏
3. üß™ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
4. üìû –£–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ –∑–∞–¥–µ—Ä–∂–∫–µ —Ä–µ–ª–∏–∑–∞
"""
        else:
            report += """
1. ‚úÖ **–†–ê–ó–†–ï–®–ò–¢–¨ –†–ï–õ–ò–ó** - –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
2. üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
3. üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ—Å—Ç—ã
"""
        
        report += f"""
### –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
1. üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
2. üìà –í–Ω–µ–¥—Ä–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
3. üß™ –†–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
4. üìö –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã

## üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã

- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è](docs/testing.md)
- [–ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è](docs/deployment.md)
- [–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏](docs/monitoring.md)

---
**–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**QA Engineer**: 20 –ª–µ—Ç –æ–ø—ã—Ç–∞  
**–í–µ—Ä—Å–∏—è**: 1.0.0
"""
        
        return report
    
    def _check_scenario_status(self, scenario_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        return len(self.critical_failures) == 0
    
    def save_report(self, report: str, filename: str = "TEST_EXECUTION_REPORT.md"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(report)
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    reporter = TestExecutionReporter()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results = reporter.run_regression_tests()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = reporter.generate_test_report()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    reporter.save_report(report)
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    print("\n" + "="*50)
    print("üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê")
    print("="*50)
    
    total_tests = len(results)
    passed_tests = sum(1 for r in results.values() if r["success"])
    failed_tests = total_tests - passed_tests
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests*100):.1f}%")
    
    if failed_tests > 0:
        print(f"\nüö´ –†–ï–õ–ò–ó –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù - {failed_tests} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
        sys.exit(1)
    else:
        print(f"\n‚úÖ –†–ï–õ–ò–ó –†–ê–ó–†–ï–®–ï–ù - –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        sys.exit(0)

if __name__ == "__main__":
    main()