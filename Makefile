# Makefile –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –°–∞–º–æ–∫–æ–¥–µ—Ä

.PHONY: help install install-dev test test-unit test-integration test-security lint format clean build run dev setup pre-commit

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON := python3
PIP := pip3
NPM := npm
DOCKER := docker
DOCKER_COMPOSE := docker-compose

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(BLUE)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(PIP) install -r requirements.txt
	cd frontend && $(NPM) install

install-dev: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	$(PIP) install -r requirements-dev.txt
	cd frontend && $(NPM) install
	pre-commit install

setup: install-dev ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	cp .env.example .env
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª$(NC)"

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(PYTHON) -m pytest tests/ -v --cov=backend --cov-report=html --cov-report=term

test-unit: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å unit —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(PYTHON) -m pytest tests/ -m unit -v

test-integration: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å integration —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üîó –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(PYTHON) -m pytest tests/ -m integration -v

test-security: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å security —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üîí –ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(PYTHON) -m pytest tests/ -m security -v

test-frontend: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å frontend —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ frontend —Ç–µ—Å—Ç–æ–≤...$(NC)"
	cd frontend && $(NPM) test

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...$(NC)"
	flake8 backend/ tests/ --max-line-length=100 --ignore=E203,W503
	black --check backend/ tests/
	isort --check-only backend/ tests/
	mypy backend/ --ignore-missing-imports
	cd frontend && $(NPM) run lint

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	@echo "$(BLUE)üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	black backend/ tests/
	isort backend/ tests/
	cd frontend && $(NPM) run format

security: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
	@echo "$(BLUE)üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...$(NC)"
	bandit -r backend/
	safety check
	semgrep --config=auto backend/

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf .coverage htmlcov/ .pytest_cache/ .mypy_cache/
	rm -rf frontend/dist/ frontend/node_modules/
	rm -rf test_reports/ .benchmarks/

build: ## –°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
	@echo "$(BLUE)üèóÔ∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	cd frontend && $(NPM) run build
	$(DOCKER) build -t samokoder:latest .

run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(NC)"
	$(PYTHON) -m uvicorn backend.main_improved:app --host 0.0.0.0 --port 8000 --reload

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	$(DOCKER_COMPOSE) up --build

docker-build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	@echo "$(BLUE)üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	$(DOCKER) build -t samokoder:latest .

docker-run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Docker
	@echo "$(BLUE)üê≥ –ó–∞–ø—É—Å–∫ –≤ Docker...$(NC)"
	$(DOCKER) run -p 8000:8000 --env-file .env samokoder:latest

docker-compose-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Docker Compose
	@echo "$(BLUE)üê≥ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker Compose...$(NC)"
	$(DOCKER_COMPOSE) up -d

docker-compose-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker Compose
	@echo "$(BLUE)üê≥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose...$(NC)"
	$(DOCKER_COMPOSE) down

pre-commit: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∏
	@echo "$(BLUE)üîç –ó–∞–ø—É—Å–∫ pre-commit –ø—Ä–æ–≤–µ—Ä–æ–∫...$(NC)"
	pre-commit run --all-files

migrate: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)üóÑÔ∏è –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	$(PYTHON) -m alembic upgrade head

migrate-create: ## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
	@echo "$(BLUE)üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...$(NC)"
	@read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: " name; \
	$(PYTHON) -m alembic revision --autogenerate -m "$$name"

seed: ## –ó–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	@echo "$(BLUE)üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...$(NC)"
	$(PYTHON) scripts/seed_database.py

docs: ## –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
	@echo "$(BLUE)üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...$(NC)"
	cd docs && make html

coverage: ## –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
	@echo "$(BLUE)üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞...$(NC)"
	$(PYTHON) -m pytest tests/ --cov=backend --cov-report=html
	@echo "$(GREEN)–û—Ç–∫—Ä–æ–π—Ç–µ htmlcov/index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ$(NC)"

performance: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å performance —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)‚ö° Performance —Ç–µ—Å—Ç—ã...$(NC)"
	$(PYTHON) -m pytest tests/ -m performance --benchmark-only

load-test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)‚ö° –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã...$(NC)"
	locust -f tests/load_test.py --host=http://localhost:8000

deploy-staging: ## –î–µ–ø–ª–æ–π –Ω–∞ staging
	@echo "$(BLUE)üöÄ –î–µ–ø–ª–æ–π –Ω–∞ staging...$(NC)"
	# –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–µ–ø–ª–æ—è –Ω–∞ staging

deploy-production: ## –î–µ–ø–ª–æ–π –Ω–∞ production
	@echo "$(BLUE)üöÄ –î–µ–ø–ª–æ–π –Ω–∞ production...$(NC)"
	# –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–µ–ø–ª–æ—è –Ω–∞ production

backup: ## –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...$(NC)"
	pg_dump $DATABASE_URL > backup_$(shell date +%Y%m%d_%H%M%S).sql

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞
	@echo "$(BLUE)üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞...$(NC)"
	@read -p "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±—ç–∫–∞–ø–∞: " backup_file; \
	psql $DATABASE_URL < $$backup_file

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
	@echo "$(BLUE)üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(NC)"
	$(DOCKER_COMPOSE) logs -f

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	$(DOCKER_COMPOSE) ps

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(BLUE)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è...$(NC)"
	curl -f http://localhost:8000/health || echo "$(RED)‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ$(NC)"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è CI/CD
ci-test: test lint security ## –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è CI
	@echo "$(GREEN)‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!$(NC)"

ci-build: clean build ## –°–±–æ—Ä–∫–∞ –¥–ª—è CI
	@echo "$(GREEN)‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-setup: setup pre-commit ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!$(NC)"

quick-test: test-unit lint ## –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!$(NC)"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	@echo "$(BLUE)üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...$(NC)"
	$(DOCKER_COMPOSE) -f docker-compose.monitoring.yml up -d

metrics: ## –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
	@echo "$(BLUE)üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(NC)"
	curl http://localhost:8000/metrics

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
debug: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
	@echo "$(BLUE)üêõ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏...$(NC)"
	$(PYTHON) -m uvicorn backend.main_improved:app --host 0.0.0.0 --port 8000 --reload --log-level debug

shell: ## –û—Ç–∫—Ä—ã—Ç—å Python shell
	@echo "$(BLUE)üêç Python shell...$(NC)"
	$(PYTHON) -c "import backend; import IPython; IPython.embed()"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
update-deps: ## –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(BLUE)üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt --upgrade
	cd frontend && $(NPM) update

check-deps: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(BLUE)üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(PIP) list --outdated
	cd frontend && $(NPM) outdated