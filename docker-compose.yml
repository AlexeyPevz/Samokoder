services:
  frontend:
    image: ${YC_DOCKER_REGISTRY}/${FRONTEND_IMAGE_NAME}:${APP_VERSION:-latest}
    container_name: samokoder-frontend
    restart: unless-stopped
    networks:
      - samokoder
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.samokoder-frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.samokoder-frontend.priority=5"
      - "traefik.http.routers.samokoder-frontend.entrypoints=websecure"
      - "traefik.http.routers.samokoder-frontend.tls.certresolver=myresolver"
      - "traefik.http.services.samokoder-frontend.loadbalancer.server.port=80"
      - "traefik.docker.network=web"

  api:
    image: ${YC_DOCKER_REGISTRY}/${API_IMAGE_NAME}:${APP_VERSION:-latest}
    container_name: samokoder-api
    restart: unless-stopped
    command: /app/.venv/bin/uvicorn samokoder.api.main:app --host 0.0.0.0 --port 8000
    env_file:
      - .env
    environment:
      - DATABASE_URL=
      - PYTHONPATH=/app
      - SAMOKODER_DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./workspace:/app/workspace
      - /var/run/docker.sock:/var/run/docker.sock:ro  # FIX: Read-only для снижения RCE риска
    networks:
      - samokoder
      - web
    # FIX: Security hardening (Phase 1) - см. docs/adr/004-security-hardening-docker-isolation.md
    security_opt:
      - no-new-privileges:true  # Prevent privilege escalation
    cap_drop:
      - ALL                      # Drop all capabilities
    cap_add:
      - NET_BIND_SERVICE         # Only needed for port 8000
    read_only: false             # TODO: Enable after fixing writable paths
    tmpfs:
      - /tmp                     # Writable /tmp
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.samokoder-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.samokoder-api.priority=10"
      - "traefik.http.routers.samokoder-api.entrypoints=websecure"
      - "traefik.http.routers.samokoder-api.tls.certresolver=myresolver"
      - "traefik.http.routers.samokoder-api.middlewares=samokoder-stripprefix"
      - "traefik.http.middlewares.samokoder-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.services.samokoder-api.loadbalancer.server.port=8000"
      - "traefik.docker.network=web"

  worker:
    image: ${YC_DOCKER_REGISTRY}/${WORKER_IMAGE_NAME}:${APP_VERSION:-latest}
    container_name: samokoder-worker
    command: /app/.venv/bin/arq samokoder.worker.main.WorkerSettings
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - SAMOKODER_DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=development
      - SAMOKODER_CONFIG_DIR=/app/config
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./workspace:/app/workspace
      - /var/run/docker.sock:/var/run/docker.sock:ro  # FIX: Read-only для снижения RCE риска
    networks:
      - samokoder
      - web
    restart: unless-stopped
    # FIX: Security hardening (Phase 1) - см. docs/adr/004-security-hardening-docker-isolation.md
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: false  # TODO: Enable after fixing writable paths
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          cpus: '4.0'            # Worker needs more CPU for code generation
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 1G

  db:
    image: postgres:15-alpine
    container_name: samokoder-db
    ports:
      - "5433:5432"
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - samokoder
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: samokoder-redis
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - samokoder
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== Monitoring Stack ====================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: samokoder-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - samokoder
    restart: unless-stopped
    depends_on:
      - api

  grafana:
    image: grafana/grafana:latest
    container_name: samokoder-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - samokoder
    restart: unless-stopped
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:latest
    container_name: samokoder-alertmanager
    ports:
      - "9093:9093"
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID:-}
      - ALERT_EMAIL=${ALERT_EMAIL:-}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASS=${SMTP_PASS:-}
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    entrypoint: ["/etc/alertmanager/docker-entrypoint.sh"]
    networks:
      - samokoder
    restart: unless-stopped

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: samokoder-postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-samokoder}?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - samokoder
    restart: unless-stopped
    depends_on:
      - db

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: samokoder-redis-exporter
    environment:
      - REDIS_ADDR=redis:6379
    ports:
      - "9121:9121"
    networks:
      - samokoder
    restart: unless-stopped
    depends_on:
      - redis

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: samokoder-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    networks:
      - samokoder
    restart: unless-stopped
    privileged: true

networks:
  samokoder:
    driver: bridge
  web:
    external: true

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
