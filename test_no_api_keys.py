#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ API –∫–ª—é—á–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑ –∫–ª—é—á–µ–π
"""

import asyncio
import httpx
import json
import uuid
from datetime import datetime

BASE_URL = "http://localhost:8000"

async def test_system_without_api_keys():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –±–µ–∑ API –∫–ª—é—á–µ–π"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ API –∫–ª—é—á–µ–π")
    print("=" * 50)
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        
        # 1. –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            response = await client.get(f"{BASE_URL}/")
            assert response.status_code == 200
            data = response.json()
            assert "Samokoder" in data["message"]
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
        
        # 2. –¢–µ—Å—Ç health endpoints
        print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoints...")
        try:
            response = await client.get(f"{BASE_URL}/health")
            assert response.status_code == 200
            health_data = response.json()
            assert "status" in health_data
            print("‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"‚ùå Health check –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            return False
        
        # 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        print("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
        try:
            response = await client.get(f"{BASE_URL}/api/ai/providers")
            assert response.status_code == 200
            providers_data = response.json()
            assert "providers" in providers_data
            assert len(providers_data["providers"]) > 0
            print("‚úÖ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Ç—Ä–µ–±—É—é—Ç –∫–ª—é—á–∏
            for provider in providers_data["providers"]:
                assert provider["requires_key"] == True
            print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Ç—Ä–µ–±—É—é—Ç API –∫–ª—é—á–∏")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            return False
        
        # 4. –¢–µ—Å—Ç AI —á–∞—Ç–∞ –±–µ–∑ –∫–ª—é—á–µ–π (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)
        print("4. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —á–∞—Ç –±–µ–∑ –∫–ª—é—á–µ–π...")
        try:
            # Mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            mock_user_id = str(uuid.uuid4())
            mock_token = f"mock_token_{mock_user_id}"
            headers = {
                "Authorization": f"Bearer {mock_token}",
                "Content-Type": "application/json"
            }
            
            response = await client.post(
                f"{BASE_URL}/api/ai/chat",
                headers=headers,
                json={
                    "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    "model": "gpt-4o-mini",
                    "provider": "openai"
                }
            )
            
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π
            assert response.status_code in [400, 401, 500]
            error_data = response.json()
            assert "error" in error_data or "detail" in error_data
            print("‚úÖ AI —á–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI —á–∞—Ç–∞: {e}")
            return False
        
        # 5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑ –∫–ª—é—á–µ–π
        print("5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")
        try:
            project_data = {
                "name": f"Test Project {datetime.now().strftime('%H%M%S')}",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –±–µ–∑ API –∫–ª—é—á–µ–π"
            }
            
            response = await client.post(
                f"{BASE_URL}/api/projects",
                headers=headers,
                json=project_data
            )
            
            if response.status_code == 200:
                data = response.json()
                project_id = data["project_id"]
                print("‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –¢–µ—Å—Ç —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏ GPT-Pilot
                print("6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏ GPT-Pilot...")
                try:
                    response = await client.post(
                        f"{BASE_URL}/api/projects/{project_id}/chat",
                        headers=headers,
                        json={
                            "message": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç",
                            "context": "development"
                        }
                    )
                    
                    if response.status_code == 200:
                        print("‚úÖ –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å–∏–º—É–ª—è—Ü–∏—è)")
                    else:
                        print(f"‚ö†Ô∏è –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –≤–µ—Ä–Ω—É–ª {response.status_code} (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –∫–ª—é—á–µ–π)")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏: {e}")
                
            else:
                print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return False
        
        print("\n" + "=" * 50)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π")
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–π")
        print("=" * 50)
        
        return True

if __name__ == "__main__":
    asyncio.run(test_system_without_api_keys())