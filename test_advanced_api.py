#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import requests
import json
import time
import subprocess
import sys
from pathlib import Path

def test_advanced_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —ç–Ω–¥–ø–æ–π–Ω—Ç—ã API"""
    
    base_url = "http://localhost:8000"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö API —ç–Ω–¥–ø–æ–π–Ω—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    try:
        response = requests.post(
            f"{base_url}/api/projects",
            params={
                "project_name": "Test Project",
                "app_description": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API"
            },
            timeout=10
        )
        
        if response.status_code == 201:
            data = response.json()
            project_id = data["project_id"]
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project_id}")
            print(f"   –°—Ç–∞—Ç—É—Å: {data['status']}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    print("\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    try:
        response = requests.get(f"{base_url}/api/projects", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {data['total']} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüîç –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞")
    try:
        response = requests.get(f"{base_url}/api/projects/{project_id}", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {data['project']['name']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {data['project']['status']}")
            print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {data['is_active']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç 4: –ß–∞—Ç —Å –ø—Ä–æ–µ–∫—Ç–æ–º
    print("\nüí¨ –¢–µ—Å—Ç 4: –ß–∞—Ç —Å –ø—Ä–æ–µ–∫—Ç–æ–º")
    try:
        chat_data = {
            "message": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç",
            "context": "development"
        }
        
        response = requests.post(
            f"{base_url}/api/projects/{project_id}/chat",
            json=chat_data,
            timeout=15
        )
        
        if response.status_code == 200:
            print("‚úÖ –ß–∞—Ç —Å –ø—Ä–æ–µ–∫—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
            # –ß–∏—Ç–∞–µ–º streaming –æ—Ç–≤–µ—Ç
            for line in response.iter_lines():
                if line:
                    try:
                        data = json.loads(line.decode('utf-8').replace('data: ', ''))
                        print(f"   {data['type']}: {data['message']}")
                    except json.JSONDecodeError:
                        pass
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º: {e}")
        return False
    
    # –¢–µ—Å—Ç 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    print("\n‚ö° –¢–µ—Å—Ç 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    try:
        response = requests.post(
            f"{base_url}/api/projects/{project_id}/generate",
            timeout=20
        )
        
        if response.status_code == 200:
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            # –ß–∏—Ç–∞–µ–º streaming –æ—Ç–≤–µ—Ç
            for line in response.iter_lines():
                if line:
                    try:
                        data = json.loads(line.decode('utf-8').replace('data: ', ''))
                        if data['type'] == 'progress':
                            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {data['progress']}% - {data['message']}")
                        elif data['type'] == 'completion':
                            print(f"   ‚úÖ {data['message']}")
                    except json.JSONDecodeError:
                        pass
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüìÅ –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞")
    try:
        response = requests.get(f"{base_url}/api/projects/{project_id}/files", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã: {data['total_files']} —Ñ–∞–π–ª–æ–≤")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        return False
    
    # –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    print("\nüìÑ –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞")
    try:
        response = requests.get(f"{base_url}/api/projects/{project_id}/files/src/App.js", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω–æ")
            print(f"   –ü—É—Ç—å: {data['file_path']}")
            print(f"   –†–∞–∑–º–µ—Ä: {data['size']} –±–∞–π—Ç")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç 8: –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüì¶ –¢–µ—Å—Ç 8: –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞")
    try:
        response = requests.get(f"{base_url}/api/projects/{project_id}/export", timeout=15)
        
        if response.status_code == 200:
            print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   Content-Type: {response.headers.get('content-type')}")
            print(f"   –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç 9: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüóëÔ∏è –¢–µ—Å—Ç 9: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    try:
        response = requests.delete(f"{base_url}/api/projects/{project_id}", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return False
    
    print("\nüéâ –í—Å–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    return True

def start_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
    cmd = ["bash", "-c", "source venv/bin/activate && python test_server.py"]
    
    try:
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
        if process.poll() is None:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            return process
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è:")
            print(f"STDOUT: {stdout}")
            print(f"STDERR: {stderr}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

def stop_server(process):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
    if process:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        process.terminate()
        process.wait()
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Samokoder Backend API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("test_server.py").exists():
        print("‚ùå –§–∞–π–ª test_server.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server_process = start_server()
    
    if server_process:
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ API
            success = test_advanced_endpoints()
            
            if success:
                print("\nüéâ –í—Å–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
                print("‚úÖ Backend API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
                print("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
                
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            stop_server(server_process)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    main()