#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
"""

import subprocess
import sys
import os
from pathlib import Path

def run_tests(test_file: str, description: str) -> bool:
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print(f"\n{'='*60}")
    print(f"üß™ {description}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run([
            sys.executable, "-m", "pytest", 
            test_file, 
            "-v", 
            "--tb=short",
            "--no-header"
        ], capture_output=True, text=True, cwd="/workspace")
        
        print(result.stdout)
        if result.stderr:
            print("STDERR:", result.stderr)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò")
            return True
        else:
            print(f"‚ùå {description} - –ï–°–¢–¨ –û–®–ò–ë–ö–ò")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ü–û–ö–†–´–¢–ò–Ø")
    print("="*60)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    tests = [
        ("tests/test_api_keys_p0_coverage.py", "P0 API Keys Coverage Tests"),
        ("tests/test_connection_manager_p0_coverage.py", "P0 Connection Manager Coverage Tests"),
        ("tests/test_mfa_disable_p0_coverage.py", "P0 MFA Disable Coverage Tests"),
        ("tests/test_error_handling_p1_coverage.py", "P1 Error Handling Coverage Tests"),
        ("tests/test_security_boundaries_p1_coverage.py", "P1 Security Boundaries Coverage Tests"),
        ("tests/test_integration_lifecycles_p2_coverage.py", "P2 Integration Lifecycles Coverage Tests"),
    ]
    
    results = []
    
    for test_file, description in tests:
        if os.path.exists(test_file):
            success = run_tests(test_file, description)
            results.append((description, success))
        else:
            print(f"‚ùå –§–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            results.append((description, False))
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*60}")
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for description, success in results:
        status = "‚úÖ –ü–†–û–®–õ–ò" if success else "‚ùå –û–®–ò–ë–ö–ò"
        print(f"{description}: {status}")
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ü–æ–∫—Ä—ã—Ç–∏–µ —É–ª—É—á—à–µ–Ω–æ.")
        return 0
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –û–®–ò–ë–ö–ò! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        return 1

if __name__ == "__main__":
    exit(main())