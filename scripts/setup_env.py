#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª—é—á–µ–π
"""

import os
import secrets
import string
import shutil
from pathlib import Path

def generate_secure_key(length=32):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á"""
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(length))

def generate_salt(length=16):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–ª—å"""
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(length))

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env.example
    if not os.path.exists('.env.example'):
        print("‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ .env
    if os.path.exists('.env'):
        response = input("‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ")
        if response.lower() != 'y':
            print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
            return False
    
    # –ö–æ–ø–∏—Ä—É–µ–º .env.example –≤ .env
    shutil.copy('.env.example', '.env')
    print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω .env.example –≤ .env")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª—é—á–∏
    jwt_secret = generate_secure_key(32)
    api_encryption_key = generate_secure_key(32)
    api_encryption_salt = generate_salt(16)
    
    print("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª—é—á–∏:")
    print(f"   JWT_SECRET: {jwt_secret}")
    print(f"   API_ENCRYPTION_KEY: {api_encryption_key}")
    print(f"   API_ENCRYPTION_SALT: {api_encryption_salt}")
    
    # –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
    with open('.env', 'r') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º placeholder –∑–Ω–∞—á–µ–Ω–∏—è
    content = content.replace('your-super-secret-jwt-key-here-32-chars', jwt_secret)
    content = content.replace('your-32-character-secret-key-here', api_encryption_key)
    content = content.replace('samokoder_salt_2025', api_encryption_salt)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
    with open('.env', 'w') as f:
        f.write(content)
    
    print("‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏")
    print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SUPABASE_URL –∏ SUPABASE_ANON_KEY")
    print("3. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (OpenAI, Anthropic, Groq, OpenRouter)")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python run_server.py")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –°–∞–º–æ–∫–æ–¥–µ—Ä")
    print("=" * 40)
    
    if setup_environment():
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        return 1

if __name__ == "__main__":
    import sys
    sys.exit(main())