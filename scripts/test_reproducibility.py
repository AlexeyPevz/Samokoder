#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –°–∞–º–æ–∫–æ–¥–µ—Ä
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å "—Å –Ω—É–ª—è"
"""

import os
import sys
import subprocess
import time
import requests
import json
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_status(message, status="INFO"):
    """–ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å–∞ —Å —Ü–≤–µ—Ç–æ–º"""
    if status == "SUCCESS":
        print(f"{Colors.GREEN}‚úÖ {message}{Colors.END}")
    elif status == "ERROR":
        print(f"{Colors.RED}‚ùå {message}{Colors.END}")
    elif status == "WARNING":
        print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.END}")
    else:
        print(f"{Colors.BLUE}‚ÑπÔ∏è  {message}{Colors.END}")

def run_command(command, description, check=True):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print_status(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {description}")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=check)
        if result.returncode == 0:
            print_status(f"–£—Å–ø–µ—à–Ω–æ: {description}", "SUCCESS")
            return True, result.stdout
        else:
            print_status(f"–û—à–∏–±–∫–∞: {description} - {result.stderr}", "ERROR")
            return False, result.stderr
    except subprocess.CalledProcessError as e:
        print_status(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {description} - {e}", "ERROR")
        return False, str(e)

def check_file_exists(file_path, description):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        print_status(f"–ù–∞–π–¥–µ–Ω: {description}", "SUCCESS")
        return True
    else:
        print_status(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {description}", "ERROR")
        return False

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_status("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        'SUPABASE_URL',
        'SUPABASE_ANON_KEY',
        'API_ENCRYPTION_KEY',
        'API_ENCRYPTION_SALT'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print_status(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}", "WARNING")
        print_status("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω", "WARNING")
        return False
    else:
        print_status("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã", "SUCCESS")
        return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print_status("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    success, _ = run_command("python -c 'import fastapi, uvicorn, supabase'", "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    if not success:
        print_status("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt", "WARNING")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if os.path.exists("frontend/package.json"):
        success, _ = run_command("cd frontend && npm list --depth=0", "Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check=False)
        if not success:
            print_status("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: cd frontend && npm install", "WARNING")
            return False
    
    return True

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print_status("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from config.settings import settings
        print_status(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {settings.environment}", "SUCCESS")
        return True
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", "ERROR")
        return False

def check_server_health():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    print_status("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    max_attempts = 30
    for attempt in range(max_attempts):
        try:
            response = requests.get("http://localhost:8000/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print_status(f"–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('status', 'unknown')}", "SUCCESS")
                print_status(f"–í–µ—Ä—Å–∏—è: {data.get('version', 'unknown')}", "SUCCESS")
                return True
        except requests.exceptions.RequestException:
            if attempt < max_attempts - 1:
                print_status(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –∂–¥–µ–º...", "WARNING")
                time.sleep(2)
            else:
                print_status("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫", "ERROR")
                return False
    
    return False

def check_api_documentation():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
    print_status("–ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...")
    
    try:
        response = requests.get("http://localhost:8000/docs", timeout=5)
        if response.status_code == 200:
            print_status("API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞", "SUCCESS")
            return True
        else:
            print_status(f"API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}", "ERROR")
            return False
    except requests.exceptions.RequestException as e:
        print_status(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}", "ERROR")
        return False

def check_metrics():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
    print_status("–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏...")
    
    try:
        response = requests.get("http://localhost:8000/metrics", timeout=5)
        if response.status_code == 200:
            print_status("–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã", "SUCCESS")
            return True
        else:
            print_status(f"–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {response.status_code}", "WARNING")
            return False
    except requests.exceptions.RequestException as e:
        print_status(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç—Ä–∏–∫–∞–º: {e}", "WARNING")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"{Colors.BOLD}{Colors.BLUE}üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ –°–∞–º–æ–∫–æ–¥–µ—Ä{Colors.END}")
    print("=" * 60)
    
    # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    passed = 0
    total = 0
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    print_status("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤...")
    files_to_check = [
        ("README.md", "–ì–ª–∞–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
        (".env.example", "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
        ("requirements.txt", "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"),
        ("docker-compose.yml", "Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
        ("Makefile", "–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    ]
    
    for file_path, description in files_to_check:
        total += 1
        if check_file_exists(file_path, description):
            passed += 1
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print_status("\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    total += 1
    if check_dependencies():
        passed += 1
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print_status("\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    total += 1
    if check_environment_variables():
        passed += 1
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print_status("\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    total += 1
    if check_database_connection():
        passed += 1
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)
    print_status("\n5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä...")
    total += 1
    if check_server_health():
        passed += 1
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        print_status("\n6. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...")
        total += 1
        if check_api_documentation():
            passed += 1
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        print_status("\n7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏...")
        total += 1
        if check_metrics():
            passed += 1
    else:
        print_status("–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ API", "WARNING")
        total += 2  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 2 –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print_status(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print_status("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.", "SUCCESS")
        return 0
    else:
        print_status(f"‚ö†Ô∏è  {total - passed} –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", "WARNING")
        return 1

if __name__ == "__main__":
    sys.exit(main())