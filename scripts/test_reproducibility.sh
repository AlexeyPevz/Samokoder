#!/bin/bash
# –¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ "—Å –Ω—É–ª—è –¥–æ –∑–∞–ø—É—Å–∫–∞"

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üß™ –¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ –°–∞–º–æ–∫–æ–¥–µ—Ä v1.0.0"
echo "=============================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    # Python
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
        if [[ $(echo "$PYTHON_VERSION" | cut -d'.' -f1) -ge 3 && $(echo "$PYTHON_VERSION" | cut -d'.' -f2) -ge 9 ]]; then
            success "Python $PYTHON_VERSION –Ω–∞–π–¥–µ–Ω"
        else
            error "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9+, –Ω–∞–π–¥–µ–Ω $PYTHON_VERSION"
        fi
    else
        error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.9+"
    fi
    
    # Node.js
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version | cut -d'v' -f2)
        if [[ $(echo "$NODE_VERSION" | cut -d'.' -f1) -ge 18 ]]; then
            success "Node.js $NODE_VERSION –Ω–∞–π–¥–µ–Ω"
        else
            error "–¢—Ä–µ–±—É–µ—Ç—Å—è Node.js 18+, –Ω–∞–π–¥–µ–Ω $NODE_VERSION"
        fi
    else
        error "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 18+"
    fi
    
    # Git
    if command -v git &> /dev/null; then
        success "Git –Ω–∞–π–¥–µ–Ω"
    else
        error "Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git"
    fi
    
    # pip
    if command -v pip3 &> /dev/null; then
        success "pip3 –Ω–∞–π–¥–µ–Ω"
    else
        error "pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pip"
    fi
    
    # npm
    if command -v npm &> /dev/null; then
        success "npm –Ω–∞–π–¥–µ–Ω"
    else
        error "npm –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ npm"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
setup_test_environment() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    TEST_DIR="/tmp/samokoder_test_$(date +%s)"
    mkdir -p "$TEST_DIR"
    cd "$TEST_DIR"
    
    success "–¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: $TEST_DIR"
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
clone_repository() {
    log "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if [ -d "/workspace" ]; then
        cp -r /workspace ./
        success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
    else
        error "–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    python3 -m venv venv
    source venv/bin/activate
    pip install --upgrade pip
    pip install -r requirements.txt
    
    if [ $? -eq 0 ]; then
        success "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    fi
    
    # Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    cd frontend
    npm install
    
    if [ $? -eq 0 ]; then
        success "Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    fi
    
    cd ..
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
setup_configuration() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    if [ ! -f ".env" ]; then
        cp .env.example .env
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª—é—á–∏
        JWT_SECRET=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")
        API_KEY=$(python3 -c "import secrets, base64; print(base64.b64encode(secrets.token_bytes(32)).decode())")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º .env
        sed -i "s/JWT_SECRET=.*/JWT_SECRET=$JWT_SECRET/" .env
        sed -i "s/API_ENCRYPTION_KEY=.*/API_ENCRYPTION_KEY=$API_KEY/" .env
        
        success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
    else
        warning ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
setup_database() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Supabase –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if grep -q "SUPABASE_URL" .env && ! grep -q "your-project-id" .env; then
        success "Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        warning "Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite –¥–ª—è —Ç–µ—Å—Ç–æ–≤"
        
        # –°–æ–∑–¥–∞–µ–º SQLite –±–∞–∑—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        echo "DATABASE_URL=sqlite:///./test.db" >> .env
        success "SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    log "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    source venv/bin/activate
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º unit —Ç–µ—Å—Ç—ã
    if [ -f "pytest.ini" ]; then
        python -m pytest tests/ -v --tb=short
        
        if [ $? -eq 0 ]; then
            success "Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏"
        else
            warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ unit —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏"
        fi
    else
        warning "pytest.ini –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º unit —Ç–µ—Å—Ç—ã"
    fi
}

# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
test_application_startup() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    source venv/bin/activate
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º backend –≤ —Ñ–æ–Ω–µ
    log "–ó–∞–ø—É—Å–∫ backend..."
    python run_server.py &
    BACKEND_PID=$!
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ backend
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
    if curl -s http://localhost:8000/health > /dev/null; then
        success "Backend –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç"
    else
        error "Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check"
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º frontend –≤ —Ñ–æ–Ω–µ
    log "–ó–∞–ø—É—Å–∫ frontend..."
    cd frontend
    npm run build &
    FRONTEND_PID=$!
    
    # –ñ–¥–µ–º —Å–±–æ—Ä–∫–∏ frontend
    sleep 30
    
    if [ -d "dist" ]; then
        success "Frontend —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        error "Frontend –Ω–µ —Å–æ–±—Ä–∞–Ω"
    fi
    
    cd ..
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    kill $BACKEND_PID 2>/dev/null || true
    kill $FRONTEND_PID 2>/dev/null || true
    
    success "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
check_performance() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä bundle
    if [ -d "frontend/dist" ]; then
        BUNDLE_SIZE=$(du -sh frontend/dist | cut -f1)
        success "Frontend bundle —Ä–∞–∑–º–µ—Ä: $BUNDLE_SIZE"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    start_time=$(date +%s)
    source venv/bin/activate
    python -c "from config.settings import settings; print('Config loaded')" > /dev/null
    end_time=$(date +%s)
    load_time=$((end_time - start_time))
    
    if [ $load_time -lt 5 ]; then
        success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∑–∞ ${load_time}—Å"
    else
        warning "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ: ${load_time}—Å"
    fi
}

# –û—á–∏—Å—Ç–∫–∞
cleanup() {
    log "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    pkill -f "python run_server.py" 2>/dev/null || true
    pkill -f "npm run" 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd /tmp
    rm -rf "$TEST_DIR"
    
    success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏..."
    echo ""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º trap –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    trap cleanup EXIT
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —à–∞–≥–∏
    check_requirements
    setup_test_environment
    clone_repository
    install_dependencies
    setup_configuration
    setup_database
    run_tests
    test_application_startup
    check_performance
    
    echo ""
    success "üéâ –¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ –ü–†–û–ô–î–ï–ù!"
    echo ""
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
    echo "  ‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    echo "  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    echo "  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    echo "  ‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏"
    echo "  ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"
    echo "  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ"
    echo ""
    echo "üöÄ –°–∞–º–æ–∫–æ–¥–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
}

# –ó–∞–ø—É—Å–∫
main "$@"