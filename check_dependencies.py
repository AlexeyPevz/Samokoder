#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import subprocess
import json
import sys
from typing import Dict, List, Any

def run_command(command: str) -> tuple[bool, str]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(
            command.split(),
            capture_output=True,
            text=True,
            timeout=30
        )
        return result.returncode == 0, result.stdout + result.stderr
    except subprocess.TimeoutExpired:
        return False, "Command timed out"
    except Exception as e:
        return False, str(e)

def check_pip_audit():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é pip-audit"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é pip-audit...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pip-audit –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    success, output = run_command("pip install pip-audit")
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ pip-audit: {output}")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    success, output = run_command("pip-audit --format=json")
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è pip-audit: {output}")
        return False
    
    try:
        vulnerabilities = json.loads(output)
        if vulnerabilities:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(vulnerabilities)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:")
            for vuln in vulnerabilities:
                print(f"  - {vuln.get('package', 'Unknown')}: {vuln.get('vulnerability', 'Unknown')}")
            return False
        else:
            print("‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {output}")
        return False

def check_safety():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é safety"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é safety...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º safety –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    success, output = run_command("pip install safety")
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ safety: {output}")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    success, output = run_command("safety check --json")
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è safety: {output}")
        return False
    
    try:
        vulnerabilities = json.loads(output)
        if vulnerabilities:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(vulnerabilities)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:")
            for vuln in vulnerabilities:
                print(f"  - {vuln.get('package_name', 'Unknown')}: {vuln.get('advisory', 'Unknown')}")
            return False
        else:
            print("‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {output}")
        return False

def check_outdated_packages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤...")
    
    success, output = run_command("pip list --outdated --format=json")
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {output}")
        return False
    
    try:
        outdated = json.loads(output)
        if outdated:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(outdated)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤:")
            for package in outdated:
                print(f"  - {package['name']}: {package['version']} -> {package['latest_version']}")
            return False
        else:
            print("‚úÖ –í—Å–µ –ø–∞–∫–µ—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            return True
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {output}")
        return False

def check_requirements_security():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å requirements.txt"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ requirements.txt...")
    
    try:
        with open("requirements.txt", "r") as f:
            requirements = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        suspicious_packages = [
            "requests[security]",  # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–ø–æ—Å–æ–±
            "urllib3<1.26",       # –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è
            "cryptography<3.0",   # –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è
        ]
        
        issues = []
        for package in suspicious_packages:
            if package in requirements:
                issues.append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç: {package}")
        
        if issues:
            print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ requirements.txt:")
            for issue in issues:
                print(f"  - {issue}")
            return False
        else:
            print("‚úÖ requirements.txt –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ")
            return True
            
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 50)
    
    results = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    results.append(check_requirements_security())
    results.append(check_outdated_packages())
    results.append(check_safety())
    results.append(check_pip_audit())
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
    print("=" * 50)
    
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–π–¥–µ–Ω–æ {passed} –∏–∑ {total} –ø—Ä–æ–≤–µ—Ä–æ–∫")
        print("‚ùå –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return 1

if __name__ == "__main__":
    sys.exit(main())