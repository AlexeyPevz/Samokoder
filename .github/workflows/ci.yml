name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install ruff
      
      - name: Lint with ruff
        run: |
          ruff check . --output-format=github
          ruff format --check .

  lint-frontend:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint TypeScript
        run: npm run lint

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: samokoder_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/samokoder_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          SECRET_KEY: test-secret-key-minimum-32-characters-long-for-testing-purposes
          APP_SECRET_KEY: test-app-secret-key-minimum-32-characters-long-for-testing
          ENVIRONMENT: development
        run: |
          pytest -v --cov=core --cov=api --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: backend
          name: backend-coverage

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test -- --passWithNoTests
      
      - name: Build frontend
        run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          pip install --upgrade pip
          pip install bandit safety
      
      - name: Run Bandit (Python security)
        run: |
          bandit -r core/ api/ -f json -o bandit-report.json || true
          bandit -r core/ api/ --severity-level medium
      
      - name: Check dependencies with Safety
        run: |
          safety check --json || true
          safety check --bare
      
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

  validate-config:
    name: Validate Configuration
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Validate configuration security
        env:
          SECRET_KEY: test-secret-key-minimum-32-characters-long-for-testing-purposes
          APP_SECRET_KEY: test-app-secret-key-minimum-32-characters-long-for-testing
          ENVIRONMENT: development
          DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/samokoder
        run: |
          python3 -c "
          import sys
          sys.path.insert(0, '.')
          from core.config import get_config
          from core.config.validator import validate_config_security
          
          config = get_config()
          is_valid = validate_config_security(config, fail_fast=False)
          if not is_valid:
              print('⚠️  Configuration validation has warnings (acceptable in dev)')
          else:
              print('✅ Configuration validation passed')
          "
      
      - name: Check for default secrets in .env.example
        run: |
          if grep -q "your-super-secret" .env.example; then
            echo "✅ .env.example contains placeholder secrets (correct)"
          fi
          
          if grep -q "your-super-secret" .env 2>/dev/null; then
            echo "❌ ERROR: .env contains default secrets!"
            exit 1
          else
            echo "✅ No .env file or no default secrets"
          fi

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: samokoder-api:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: samokoder-frontend:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: 
      - lint-python
      - lint-frontend
      - test-backend
      - test-frontend
      - security-scan
      - validate-config
      - docker-build
    steps:
      - name: All checks passed
        run: echo "✅ All CI checks passed successfully!"
