name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.9"
  NODE_VERSION: "18"

jobs:
  # === BACKEND TESTS ===
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: samokoder_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock pytest-xdist
        pip install black flake8 isort mypy
        pip install httpx faker
    
    - name: Set up environment variables
      run: |
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "DEBUG=true" >> $GITHUB_ENV
        echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/samokoder_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SUPABASE_URL=https://test.supabase.co" >> $GITHUB_ENV
        echo "SUPABASE_ANON_KEY=test-anon-key" >> $GITHUB_ENV
        echo "API_ENCRYPTION_KEY=test-encryption-key-32-chars-long" >> $GITHUB_ENV
        echo "API_ENCRYPTION_SALT=test-salt-16" >> $GITHUB_ENV
    
    - name: Wait for services
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
    
    - name: Run linting
      run: |
        echo "üîç Running code quality checks..."
        flake8 backend/ tests/ --max-line-length=100 --ignore=E203,W503
        black --check backend/ tests/
        isort --check-only backend/ tests/
        mypy backend/ --ignore-missing-imports
    
    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests..."
        python -m pytest tests/ -m unit -v --cov=backend --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Run integration tests
      run: |
        echo "üîó Running integration tests..."
        python -m pytest tests/ -m integration -v
    
    - name: Run security tests
      run: |
        echo "üîí Running security tests..."
        python -m pytest tests/ -m security -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          htmlcov/
          .coverage
          test_reports/

  # === FRONTEND TESTS ===
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        echo "üîç Running frontend linting..."
        npm run lint
        npm run type-check
    
    - name: Run tests
      run: |
        cd frontend
        echo "üß™ Running frontend tests..."
        npm test -- --coverage --watchAll=false
    
    - name: Build application
      run: |
        cd frontend
        echo "üèóÔ∏è Building frontend..."
        npm run build
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # === SECURITY SCAN ===
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
    
    - name: Run Bandit security scan
      run: |
        echo "üîí Running Bandit security scan..."
        bandit -r backend/ -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        echo "üîí Running Safety check..."
        safety check --json --output safety-report.json || true
    
    - name: Run Semgrep scan
      run: |
        echo "üîí Running Semgrep scan..."
        semgrep --config=auto backend/ --json --output=semgrep-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  # === PERFORMANCE TESTS ===
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: [backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust pytest-benchmark
    
    - name: Set up environment
      run: |
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "DEBUG=false" >> $GITHUB_ENV
    
    - name: Run performance tests
      run: |
        echo "‚ö° Running performance tests..."
        python -m pytest tests/ -m performance -v --benchmark-only --benchmark-save=performance
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: .benchmarks/

  # === BUILD DOCKER IMAGE ===
  build-docker:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/samokoder:latest
          ${{ secrets.DOCKER_USERNAME }}/samokoder:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # === DEPLOY TO STAGING ===
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [build-docker, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–µ–ø–ª–æ—è –Ω–∞ staging
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker Compose –∏–ª–∏ Kubernetes
    
    - name: Run smoke tests
      run: |
        echo "üí® Running smoke tests..."
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å smoke —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–ª–æ—è

  # === DEPLOY TO PRODUCTION ===
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [build-docker, security-scan, performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–µ–ø–ª–æ—è –Ω–∞ production
    
    - name: Run health checks
      run: |
        echo "üè• Running health checks..."
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
    
    - name: Notify deployment
      run: |
        echo "üì¢ Deployment completed successfully!"
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack/Teams/Email

  # === NOTIFICATION ===
  notify:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [backend-tests, frontend-tests, security-scan, performance-tests]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' }}
      run: |
        echo "‚úÖ All tests passed successfully!"
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    
    - name: Notify failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' }}
      run: |
        echo "‚ùå Some tests failed!"
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ