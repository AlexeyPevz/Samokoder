#!/usr/bin/env python3
"""
Security Fixes Test Script
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import sys
import os
import json
from pathlib import Path

def test_file_exists(file_path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    return Path(file_path).exists()

def test_file_content(file_path: str, required_strings: list) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        for required_string in required_strings:
            if required_string not in content:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {required_string} –≤ {file_path}")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False

def _test_file_existence():
    """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    
    files_to_check = [
        "backend/auth/dependencies.py",
        "backend/api/auth.py", 
        "backend/validators/secure_input_validator.py",
        "backend/middleware/secure_rate_limiter.py",
        "backend/middleware/secure_error_handler.py",
        "tests/test_security.py",
        "requirements-security.txt"
    ]
    
    tests_passed = 0
    total_tests = len(files_to_check)
    
    for file_path in files_to_check:
        if test_file_exists(file_path):
            print(f"‚úÖ {file_path}")
            tests_passed += 1
        else:
            print(f"‚ùå {file_path}")
    
    return tests_passed, total_tests

def _test_import_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤:")
    
    tests_passed = 0
    total_tests = 0
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ auth dependencies
    total_tests += 1
    try:
        from backend.auth.dependencies import validate_jwt_token, secure_password_validation
        print("‚úÖ backend.auth.dependencies")
        tests_passed += 1
    except ImportError as e:
        print(f"‚ùå backend.auth.dependencies: {e}")
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ secure input validator
    total_tests += 1
    try:
        from backend.validators.secure_input_validator import SecureInputValidator
        print("‚úÖ backend.validators.secure_input_validator")
        tests_passed += 1
    except ImportError as e:
        print(f"‚ùå backend.validators.secure_input_validator: {e}")
    
    return tests_passed, total_tests

def test_security_fixes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    print("=" * 50)
    
    total_passed = 0
    total_tests = 0
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    passed, tests = _test_file_existence()
    total_passed += passed
    total_tests += tests
    
    passed, tests = _test_import_functionality()
    total_passed += passed
    total_tests += tests
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total_passed}/{total_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {total_passed/total_tests*100:.1f}%")
    
    if total_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        return False
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ main.py
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ main.py:")
    
    required_main = [
        "allowed_origins",
        "X-Content-Type-Options",
        "X-Frame-Options",
        "X-XSS-Protection",
        "Strict-Transport-Security",
        "X-CSRF-Token",
        "csrf_protect"
    ]
    
    total_tests += 1
    if test_file_content("backend/main.py", required_main):
        print("‚úÖ main.py —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        tests_passed += 1
    else:
        print("‚ùå main.py –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ secure_input_validator.py
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ secure_input_validator.py:")
    
    required_validator = [
        "SQL_INJECTION_PATTERNS",
        "XSS_PATTERNS", 
        "PATH_TRAVERSAL_PATTERNS",
        "bleach",
        "validate_and_sanitize_string",
        "validate_json_data"
    ]
    
    total_tests += 1
    if test_file_content("backend/validators/secure_input_validator.py", required_validator):
        print("‚úÖ secure_input_validator.py —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        tests_passed += 1
    else:
        print("‚ùå secure_input_validator.py –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ secure_rate_limiter.py
    print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ secure_rate_limiter.py:")
    
    required_rate_limiter = [
        "SecureRateLimiter",
        "auth_limits",
        "general_limits",
        "check_rate_limit",
        "rate_limit_exceeded"
    ]
    
    total_tests += 1
    if test_file_content("backend/middleware/secure_rate_limiter.py", required_rate_limiter):
        print("‚úÖ secure_rate_limiter.py —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        tests_passed += 1
    else:
        print("‚ùå secure_rate_limiter.py –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    # –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ secure_error_handler.py
    print("\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ secure_error_handler.py:")
    
    required_error_handler = [
        "SecureErrorResponse",
        "sanitize_error_message",
        "secure_validation_exception_handler",
        "secure_http_exception_handler",
        "secure_general_exception_handler"
    ]
    
    total_tests += 1
    if test_file_content("backend/middleware/secure_error_handler.py", required_error_handler):
        print("‚úÖ secure_error_handler.py —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        tests_passed += 1
    else:
        print("‚ùå secure_error_handler.py –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    # –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements-security.txt
    print("\n8. –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements-security.txt:")
    
    required_packages = [
        "PyJWT",
        "cryptography",
        "fastapi-csrf-protect",
        "slowapi",
        "redis",
        "bleach",
        "bcrypt",
        "argon2-cffi"
    ]
    
    total_tests += 1
    if test_file_content("requirements-security.txt", required_packages):
        print("‚úÖ requirements-security.txt —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã")
        tests_passed += 1
    else:
        print("‚ùå requirements-security.txt –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã")
    
    # –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("\n9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    
    required_tests = [
        "TestAuthenticationSecurity",
        "TestInputValidation",
        "TestCORSecurity",
        "test_invalid_jwt_token_rejected",
        "test_sql_injection_prevention",
        "test_xss_prevention"
    ]
    
    total_tests += 1
    if test_file_content("tests/test_security.py", required_tests):
        print("‚úÖ test_security.py —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–µ—Å—Ç—ã")
        tests_passed += 1
    else:
        print("‚ùå test_security.py –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–µ—Å—Ç—ã")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}/{total_tests}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements-security.txt")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: pytest tests/test_security.py")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("4. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ staging –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîí –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò SAMOKODER")
    print("=" * 60)
    
    success = test_security_fixes()
    
    if success:
        print("\n‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        sys.exit(0)
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
        sys.exit(1)

if __name__ == "__main__":
    main()