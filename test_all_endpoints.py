#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API
"""

import sys
import os
sys.path.append('/workspace')

from backend.main import app
from fastapi.testclient import TestClient

def test_all_endpoints():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    client = TestClient(app)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    routes = []
    for route in app.routes:
        if hasattr(route, 'path') and hasattr(route, 'methods'):
            for method in route.methods:
                if method != 'HEAD':  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º HEAD
                    routes.append(f"{method} {route.path}")
    
    print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
    for route in sorted(routes):
        print(f"  {route}")
    
    print(f"\nüìä –í—Å–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {len(routes)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    test_cases = [
        ("GET", "/health"),
        ("GET", "/metrics"),
        ("POST", "/api/auth/login"),
        ("POST", "/api/auth/register"),
        ("POST", "/api/auth/logout"),
        ("GET", "/api/auth/user"),
        ("GET", "/api/projects"),
        ("POST", "/api/projects"),
        ("GET", "/api/projects/test-id"),
        ("PUT", "/api/projects/test-id"),
        ("DELETE", "/api/projects/test-id"),
        ("GET", "/api/projects/test-id/files"),
        ("GET", "/api/projects/test-id/files/test.py"),
        ("POST", "/api/projects/test-id/export"),
        ("POST", "/api/projects/test-id/chat"),
        ("POST", "/api/projects/test-id/generate"),
        ("POST", "/api/ai/chat"),
        ("POST", "/api/ai/chat/stream"),
        ("GET", "/api/ai/usage"),
        ("GET", "/api/ai/providers"),
        ("POST", "/api/ai/validate-keys"),
        ("POST", "/api/auth/mfa/setup"),
        ("POST", "/api/auth/mfa/verify"),
        ("DELETE", "/api/auth/mfa/disable"),
        ("GET", "/api/rbac/roles"),
        ("GET", "/api/rbac/permissions"),
        ("GET", "/api/rbac/users/test-user/roles"),
        ("POST", "/api/rbac/users/test-user/roles"),
        ("DELETE", "/api/rbac/users/test-user/roles/test-role"),
        ("GET", "/api/rbac/check-permission"),
        ("POST", "/api/api-keys/"),
        ("GET", "/api/api-keys/"),
        ("GET", "/api/api-keys/test-key"),
        ("PUT", "/api/api-keys/test-key/toggle"),
        ("DELETE", "/api/api-keys/test-key"),
        ("GET", "/api/health/database"),
        ("GET", "/api/health/ai"),
        ("GET", "/api/health/system"),
    ]
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_cases)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    results = []
    for method, path in test_cases:
        try:
            if method == "GET":
                response = client.get(path)
            elif method == "POST":
                response = client.post(path, json={}, headers={"X-CSRF-Token": "test"})
            elif method == "PUT":
                response = client.put(path, json={}, headers={"X-CSRF-Token": "test"})
            elif method == "DELETE":
                response = client.delete(path, headers={"X-CSRF-Token": "test"})
            
            status = response.status_code
            if status in [200, 201, 401, 403, 404, 422]:
                results.append(f"‚úÖ {method} {path} -> {status}")
            else:
                results.append(f"‚ö†Ô∏è  {method} {path} -> {status}")
                
        except Exception as e:
            results.append(f"‚ùå {method} {path} -> ERROR: {str(e)[:50]}")
    
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for result in results:
        print(f"  {result}")
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    success = len([r for r in results if r.startswith("‚úÖ")])
    warning = len([r for r in results if r.startswith("‚ö†Ô∏è")])
    error = len([r for r in results if r.startswith("‚ùå")])
    
    print(f"\nüìä –ò—Ç–æ–≥–∏:")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}")
    print(f"  ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning}")
    print(f"  ‚ùå –û—à–∏–±–∫–∏: {error}")
    print(f"  üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success/(success+warning+error)*100:.1f}%")

if __name__ == "__main__":
    test_all_endpoints()