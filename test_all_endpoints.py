#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API
"""

import sys
import os
sys.path.append('/workspace')

from backend.main import app
from fastapi.testclient import TestClient

def _get_application_routes():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    routes = []
    for route in app.routes:
        if hasattr(route, 'path') and hasattr(route, 'methods'):
            for method in route.methods:
                if method != 'HEAD':  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º HEAD
                    routes.append(f"{method} {route.path}")
    return routes

def _print_routes_info(routes):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞—Ö"""
    print("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
    for route in sorted(routes):
        print(f"  {route}")
    print(f"\nüìä –í—Å–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {len(routes)}")

def _get_test_cases():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    return [
        ("GET", "/health"),
        ("GET", "/metrics"),
        ("POST", "/api/auth/login"),
        ("POST", "/api/auth/register"),
        ("POST", "/api/auth/logout"),
        ("GET", "/api/auth/user"),
        ("GET", "/api/projects"),
        ("POST", "/api/projects"),
        ("GET", "/api/projects/test-id"),
        ("PUT", "/api/projects/test-id"),
        ("DELETE", "/api/projects/test-id"),
        ("GET", "/api/projects/test-id/files"),
        ("GET", "/api/projects/test-id/files/test.py"),
        ("POST", "/api/projects/test-id/export"),
        ("POST", "/api/projects/test-id/chat"),
    ]

def _test_endpoint(client, method, path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    try:
        if method == "GET":
            response = client.get(path)
        elif method == "POST":
            response = client.post(path, json={})
        elif method == "PUT":
            response = client.put(path, json={})
        elif method == "DELETE":
            response = client.delete(path)
        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
            return False
        
        print(f"  {method} {path}: {response.status_code}")
        return response.status_code < 500
    except Exception as e:
        print(f"  {method} {path}: ERROR - {e}")
        return False

def test_all_endpoints():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    client = TestClient(app)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    routes = _get_application_routes()
    _print_routes_info(routes)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = _get_test_cases()
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é {len(test_cases)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    success_count = 0
    
    for method, path in test_cases:
        if _test_endpoint(client, method, path):
            success_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{len(test_cases)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    return success_count == len(test_cases)

if __name__ == "__main__":
    test_all_endpoints()