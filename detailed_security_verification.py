#!/usr/bin/env python3
"""
Detailed Security Verification
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import os
import re
import json
from pathlib import Path
from typing import List, Dict, Tuple

class SecurityVerifier:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.issues = []
        self.critical_issues = []
        self.warnings = []
    
    def add_issue(self, severity: str, file: str, line: int, issue: str, code_snippet: str = ""):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É"""
        issue_data = {
            "severity": severity,
            "file": file,
            "line": line,
            "issue": issue,
            "code_snippet": code_snippet
        }
        
        if severity == "CRITICAL":
            self.critical_issues.append(issue_data)
        else:
            self.warnings.append(issue_data)
        
        self.issues.append(issue_data)
    
    def check_file_exists(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        return Path(file_path).exists()
    
    def read_file(self, file_path: str) -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.readlines()
        except Exception as e:
            self.add_issue("CRITICAL", file_path, 0, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
            return []
    
    def check_auth_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç auth/dependencies.py"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é auth/dependencies.py...")
        
        file_path = "backend/auth/dependencies.py"
        if not self.check_file_exists(file_path):
            self.add_issue("CRITICAL", file_path, 0, "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        lines = self.read_file(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        required_imports = ["jwt", "time", "hashlib", "secrets"]
        for i, line in enumerate(lines, 1):
            if "import" in line:
                for imp in required_imports:
                    if imp in line:
                        break
                else:
                    if any(imp in line for imp in required_imports):
                        continue
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–ø–æ—Ä—Ç –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                    if not any(imp in "".join(lines) for imp in required_imports):
                        self.add_issue("CRITICAL", file_path, i, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º–ø–æ—Ä—Ç: {required_imports}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        required_functions = ["validate_jwt_token", "secure_password_validation", "hash_password"]
        file_content = "".join(lines)
        for func in required_functions:
            if f"def {func}" not in file_content:
                self.add_issue("CRITICAL", file_path, 0, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è: {func}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        for i, line in enumerate(lines, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
            if "supabase = connection_manager.get_pool('supabase')" in line and "if not supabase_client:" not in "".join(lines[i-5:i+5]):
                self.add_issue("CRITICAL", file_path, i, "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase", line.strip())
            
            if "logger.error" in line and ("password" in line.lower() or "token" in line.lower()):
                self.add_issue("WARNING", file_path, i, "–í–æ–∑–º–æ–∂–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", line.strip())
    
    def check_auth_api(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç api/auth.py"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é api/auth.py...")
        
        file_path = "backend/api/auth.py"
        if not self.check_file_exists(file_path):
            self.add_issue("CRITICAL", file_path, 0, "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        lines = self.read_file(file_path)
        file_content = "".join(lines)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if "STRICT_RATE_LIMITS" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–π rate limiting")
        
        if "check_rate_limit" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ rate limit")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª–µ–π
        if "hash_password" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        for i, line in enumerate(lines, 1):
            if "logger.error" in line and "credentials.email" in line and "[:3]" not in line:
                self.add_issue("WARNING", file_path, i, "–í–æ–∑–º–æ–∂–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ email –±–µ–∑ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è", line.strip())
    
    def check_main_py(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç main.py"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é main.py...")
        
        file_path = "backend/main.py"
        if not self.check_file_exists(file_path):
            self.add_issue("CRITICAL", file_path, 0, "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        lines = self.read_file(file_path)
        file_content = "".join(lines)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if "allowed_origins" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        
        if 'allow_headers=["*"]' in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_headers = ["X-Content-Type-Options", "X-Frame-Options", "X-XSS-Protection"]
        for header in security_headers:
            if header not in file_content:
                self.add_issue("CRITICAL", file_path, 0, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {header}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF –∑–∞—â–∏—Ç—É
        if "csrf_protect" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CSRF –∑–∞—â–∏—Ç–∞")
    
    def check_secure_validator(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç secure_input_validator.py"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é secure_input_validator.py...")
        
        file_path = "backend/validators/secure_input_validator.py"
        if not self.check_file_exists(file_path):
            self.add_issue("CRITICAL", file_path, 0, "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        lines = self.read_file(file_path)
        file_content = "".join(lines)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π
        if "SQL_INJECTION_PATTERNS" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π")
        
        if "XSS_PATTERNS" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—â–∏—Ç–∞ –æ—Ç XSS")
        
        if "PATH_TRAVERSAL_PATTERNS" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—â–∏—Ç–∞ –æ—Ç path traversal")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ bleach
        if "bleach" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é bleach")
    
    def check_rate_limiter(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç secure_rate_limiter.py"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é secure_rate_limiter.py...")
        
        file_path = "backend/middleware/secure_rate_limiter.py"
        if not self.check_file_exists(file_path):
            self.add_issue("CRITICAL", file_path, 0, "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        lines = self.read_file(file_path)
        file_content = "".join(lines)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã
        if "auth_limits" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        if "login" not in file_content or "3" not in file_content or "900" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç –¥–ª—è –ª–æ–≥–∏–Ω–∞ (3 –ø–æ–ø—ã—Ç–∫–∏ –≤ 15 –º–∏–Ω—É—Ç)")
    
    def check_error_handler(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç secure_error_handler.py"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é secure_error_handler.py...")
        
        file_path = "backend/middleware/secure_error_handler.py"
        if not self.check_file_exists(file_path):
            self.add_issue("CRITICAL", file_path, 0, "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        lines = self.read_file(file_path)
        file_content = "".join(lines)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é –æ—à–∏–±–æ–∫
        if "sanitize_error_message" not in file_content:
            self.add_issue("CRITICAL", file_path, 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        sensitive_patterns = ["password", "token", "key", "secret"]
        for pattern in sensitive_patterns:
            if pattern in file_content.lower() and "REDACTED" not in file_content:
                self.add_issue("WARNING", file_path, 0, f"–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å {pattern}")
    
    def check_original_vulnerabilities(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º auth/dependencies.py –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —É—è–∑–≤–∏–º–æ—Å—Ç—å
        file_path = "backend/auth/dependencies.py"
        if self.check_file_exists(file_path):
            lines = self.read_file(file_path)
            file_content = "".join(lines)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π supabase
            if "supabase = connection_manager.get_pool('supabase')" in file_content:
                if "if not supabase_client:" not in file_content:
                    self.add_issue("CRITICAL", file_path, 0, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è supabase")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º main.py –Ω–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—É—é CORS
        file_path = "backend/main.py"
        if self.check_file_exists(file_path):
            lines = self.read_file(file_path)
            file_content = "".join(lines)
            
            if 'allow_headers=["*"]' in file_content:
                self.add_issue("CRITICAL", file_path, 0, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ - –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    
    def run_verification(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        print("üîí –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("=" * 60)
        
        self.check_auth_dependencies()
        self.check_auth_api()
        self.check_main_py()
        self.check_secure_validator()
        self.check_rate_limiter()
        self.check_error_handler()
        self.check_original_vulnerabilities()
        
        return self.issues, self.critical_issues, self.warnings
    
    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–¢–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò")
        print("=" * 60)
        
        if self.critical_issues:
            print(f"\nüî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(self.critical_issues)}):")
            for issue in self.critical_issues:
                print(f"  ‚ùå {issue['file']}:{issue['line']} - {issue['issue']}")
                if issue['code_snippet']:
                    print(f"     –ö–æ–¥: {issue['code_snippet']}")
        
        if self.warnings:
            print(f"\nüü° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for issue in self.warnings:
                print(f"  ‚ö†Ô∏è  {issue['file']}:{issue['line']} - {issue['issue']}")
                if issue['code_snippet']:
                    print(f"     –ö–æ–¥: {issue['code_snippet']}")
        
        if not self.critical_issues and not self.warnings:
            print("\n‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üîí –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–û –ü–†–û–ë–õ–ï–ú: {len(self.issues)}")
            print(f"   üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {len(self.critical_issues)}")
            print(f"   üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.warnings)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    verifier = SecurityVerifier()
    issues, critical, warnings = verifier.run_verification()
    verifier.print_results()
    
    if critical:
        print(f"\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ù–ï –ø–æ–ª–Ω—ã–µ.")
        return False
    else:
        print(f"\n‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        return True

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)