#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏
–£—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã, –≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç—ã –≤ –∫–ª–∞—Å—Å–∞—Ö
"""

import os
import re
import json
from pathlib import Path
from typing import Dict, List, Set, Tuple
from datetime import datetime

class RealCoverageAnalyzerFixed:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏"""
    
    def __init__(self, workspace_path: str = "/workspace"):
        self.workspace_path = Path(workspace_path)
        self.backend_path = self.workspace_path / "backend"
        self.tests_path = self.workspace_path / "tests"
        
        self.backend_files = []
        self.test_files = []
        self.functions = {}
        self.tests = {}
        self.coverage = {}
        
    def analyze_backend_files(self):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ backend"""
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ backend...")
        
        for py_file in self.backend_path.rglob("*.py"):
            if py_file.name == "__init__.py":
                continue
                
            self.backend_files.append(py_file)
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ
            functions = self._extract_functions(py_file)
            self.functions[str(py_file.relative_to(self.workspace_path))] = functions
            
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(self.backend_files)} —Ñ–∞–π–ª–æ–≤ Python")
        print(f"   –ù–∞–π–¥–µ–Ω–æ {sum(len(f) for f in self.functions.values())} —Ñ—É–Ω–∫—Ü–∏–π")
    
    def analyze_test_files(self):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤...")
        
        for py_file in self.tests_path.rglob("*.py"):
            if py_file.name == "__init__.py":
                continue
                
            self.test_files.append(py_file)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
            tests = self._extract_tests(py_file)
            self.tests[str(py_file.relative_to(self.workspace_path))] = tests
            
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(self.test_files)} —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤")
        print(f"   –ù–∞–π–¥–µ–Ω–æ {sum(len(t) for t in self.tests.values())} —Ç–µ—Å—Ç–æ–≤")
    
    def _extract_functions(self, file_path: Path) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        functions = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
            function_pattern = r'^(async\s+)?def\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\('
            matches = re.finditer(function_pattern, content, re.MULTILINE)
            
            for match in matches:
                line_num = content[:match.start()].count('\n') + 1
                function_name = match.group(2)
                is_async = match.group(1) is not None
                
                functions.append({
                    'name': function_name,
                    'line': line_num,
                    'async': is_async,
                    'file': str(file_path.relative_to(self.workspace_path))
                })
                
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {file_path}: {e}")
            
        return functions
    
    def _extract_tests(self, file_path: Path) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        tests = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç—ã –≤ –∫–ª–∞—Å—Å–∞—Ö)
            test_pattern = r'^\s*(async\s+)?def\s+(test_[a-zA-Z0-9_]*)\s*\('
            matches = re.finditer(test_pattern, content, re.MULTILINE)
            
            for match in matches:
                line_num = content[:match.start()].count('\n') + 1
                test_name = match.group(2)
                is_async = match.group(1) is not None
                
                tests.append({
                    'name': test_name,
                    'line': line_num,
                    'async': is_async,
                    'file': str(file_path.relative_to(self.workspace_path))
                })
                
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {file_path}: {e}")
            
        return tests
    
    def analyze_coverage(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏"""
        print("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏...")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ —Ñ–∞–π–ª–∞–º
        for file_path, functions in self.functions.items():
            file_coverage = self._analyze_file_coverage(file_path, functions)
            self.coverage[file_path] = file_coverage
            
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_functions = sum(len(f) for f in self.functions.values())
        covered_functions = sum(c['covered_functions'] for c in self.coverage.values())
        
        print(f"   –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {covered_functions}/{total_functions} ({covered_functions/total_functions*100:.1f}%)")
    
    def _analyze_file_coverage(self, file_path: str, functions: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        covered_functions = 0
        uncovered_functions = []
        
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        for func in functions:
            if self._function_is_covered(func):
                covered_functions += 1
            else:
                uncovered_functions.append(func)
        
        return {
            'total_functions': len(functions),
            'covered_functions': covered_functions,
            'uncovered_functions': uncovered_functions,
            'coverage_percent': covered_functions / len(functions) * 100 if functions else 0
        }
    
    def _function_is_covered(self, function: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–∫—Ä—ã—Ç–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞–º–∏"""
        func_name = function['name']
        
        # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
        for test_file, tests in self.tests.items():
            test_file_path = self.workspace_path / test_file
            
            try:
                with open(test_file_path, 'r', encoding='utf-8') as f:
                    test_content = f.read()
                    
                if func_name in test_content:
                    return True
                    
            except Exception:
                continue
                
        return False
    
    def analyze_critical_files(self):
        """–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üö® –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")
        
        critical_files = [
            "backend/api/api_keys.py",
            "backend/api/mfa.py", 
            "backend/auth/dependencies.py",
            "backend/main.py",
            "backend/services/encryption_service.py",
            "backend/services/connection_manager.py",
            "backend/services/supabase_manager.py"
        ]
        
        critical_analysis = {}
        
        for file_path in critical_files:
            if file_path in self.functions:
                functions = self.functions[file_path]
                coverage = self.coverage.get(file_path, {})
                
                critical_analysis[file_path] = {
                    'functions': functions,
                    'coverage': coverage,
                    'critical_functions': self._identify_critical_functions(functions),
                    'uncovered_critical': self._find_uncovered_critical(functions, coverage)
                }
                
        return critical_analysis
    
    def _identify_critical_functions(self, functions: List[Dict]) -> List[Dict]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        critical_keywords = [
            'auth', 'jwt', 'token', 'password', 'encrypt', 'decrypt',
            'mfa', 'totp', 'api_key', 'connection', 'database', 'redis',
            'validate', 'verify', 'hash', 'secret', 'key'
        ]
        
        critical_functions = []
        
        for func in functions:
            func_name_lower = func['name'].lower()
            if any(keyword in func_name_lower for keyword in critical_keywords):
                critical_functions.append(func)
                
        return critical_functions
    
    def _find_uncovered_critical(self, functions: List[Dict], coverage: Dict) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        uncovered_critical = []
        
        for func in functions:
            if not self._function_is_covered(func):
                func_name_lower = func['name'].lower()
                critical_keywords = [
                    'auth', 'jwt', 'token', 'password', 'encrypt', 'decrypt',
                    'mfa', 'totp', 'api_key', 'connection', 'database', 'redis',
                    'validate', 'verify', 'hash', 'secret', 'key'
                ]
                
                if any(keyword in func_name_lower for keyword in critical_keywords):
                    uncovered_critical.append(func)
                    
        return uncovered_critical
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_files = len(self.backend_files)
        total_functions = sum(len(f) for f in self.functions.values())
        total_tests = sum(len(t) for t in self.tests.values())
        
        covered_functions = sum(c['covered_functions'] for c in self.coverage.values())
        overall_coverage = covered_functions / total_functions * 100 if total_functions > 0 else 0
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        critical_analysis = self.analyze_critical_files()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_backend_files': total_files,
                'total_functions': total_functions,
                'total_tests': total_tests,
                'covered_functions': covered_functions,
                'overall_coverage_percent': overall_coverage
            },
            'critical_files': critical_analysis,
            'detailed_coverage': self.coverage
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = self.workspace_path / f"real_coverage_report_fixed_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"   –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        self._print_critical_gaps(critical_analysis)
        
        return report
    
    def _print_critical_gaps(self, critical_analysis: Dict):
        """–í—ã–≤–æ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–ï–õ–´ –í –ü–û–ö–†–´–¢–ò–ò:")
        print("=" * 60)
        
        for file_path, analysis in critical_analysis.items():
            uncovered_critical = analysis['uncovered_critical']
            
            if uncovered_critical:
                print(f"\nüìÅ {file_path}:")
                print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {analysis['coverage'].get('coverage_percent', 0):.1f}%")
                print(f"   –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
                
                for func in uncovered_critical:
                    print(f"     ‚ùå {func['name']} (—Å—Ç—Ä–æ–∫–∞ {func['line']})")
            else:
                print(f"\n‚úÖ {file_path}: –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫—Ä—ã—Ç—ã")
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–ö–†–´–¢–ò–Ø")
        print("=" * 60)
        
        self.analyze_backend_files()
        self.analyze_test_files()
        self.analyze_coverage()
        
        report = self.generate_report()
        
        print("\n" + "=" * 60)
        print("üìä –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print("=" * 60)
        
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = RealCoverageAnalyzerFixed()
    report = analyzer.run_analysis()
    
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    summary = report['summary']
    print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –§–∞–π–ª–æ–≤ backend: {summary['total_backend_files']}")
    print(f"   –§—É–Ω–∫—Ü–∏–π: {summary['total_functions']}")
    print(f"   –¢–µ—Å—Ç–æ–≤: {summary['total_tests']}")
    print(f"   –ü–æ–∫—Ä—ã—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {summary['covered_functions']}")
    print(f"   –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {summary['overall_coverage_percent']:.1f}%")
    
    if summary['overall_coverage_percent'] < 80:
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ 80%!")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–æ 80%+")
    else:
        print(f"\nüéâ –û–¢–õ–ò–ß–ù–û: –ü–æ–∫—Ä—ã—Ç–∏–µ –≤—ã—à–µ 80%!")
    
    return 0 if summary['overall_coverage_percent'] >= 80 else 1

if __name__ == "__main__":
    exit(main())