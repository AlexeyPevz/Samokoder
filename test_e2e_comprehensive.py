#!/usr/bin/env python3
"""
E2E Comprehensive —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –°–∞–º–æ–∫–æ–¥–µ—Ä
–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Üí —ç–∫—Å–ø–æ—Ä—Ç
"""

import asyncio
import json
import time
import uuid
from datetime import datetime
from pathlib import Path
import httpx
import pytest
from typing import Dict, Any, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BASE_URL = "http://localhost:8000"
TEST_USER_EMAIL = f"test_{uuid.uuid4().hex[:8]}@example.com"
TEST_USER_PASSWORD = "TestPassword123!"
TEST_PROJECT_NAME = f"Test Project {datetime.now().strftime('%H%M%S')}"
TEST_PROJECT_DESCRIPTION = "E2E —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"

class E2ETestClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.session = httpx.AsyncClient(timeout=30.0)
        self.auth_token = None
        self.user_id = None
        self.project_id = None
    
    async def __aenter__(self):
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.session.aclose()
    
    async def register_user(self, email: str, password: str) -> Dict[str, Any]:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase Auth
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
        self.user_id = str(uuid.uuid4())
        self.auth_token = f"mock_token_{self.user_id}"
        
        return {
            "user_id": self.user_id,
            "email": email,
            "token": self.auth_token,
            "status": "registered"
        }
    
    async def login_user(self, email: str, password: str) -> Dict[str, Any]:
        """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # Mock –ª–æ–≥–∏–Ω
        self.user_id = str(uuid.uuid4())
        self.auth_token = f"mock_token_{self.user_id}"
        
        return {
            "user_id": self.user_id,
            "email": email,
            "token": self.auth_token,
            "status": "logged_in"
        }
    
    async def get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        return {
            "Authorization": f"Bearer {self.auth_token}",
            "Content-Type": "application/json"
        }
    
    async def create_project(self, name: str, description: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        response = await self.session.post(
            f"{self.base_url}/api/projects",
            headers=await self.get_headers(),
            json={
                "name": name,
                "description": description
            }
        )
        
        assert response.status_code == 200, f"Project creation failed: {response.text}"
        
        data = response.json()
        self.project_id = data["project_id"]
        
        return data
    
    async def get_project(self, project_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        
        response = await self.session.get(
            f"{self.base_url}/api/projects/{project_id}",
            headers=await self.get_headers()
        )
        
        assert response.status_code == 200, f"Get project failed: {response.text}"
        return response.json()
    
    async def chat_with_ai(self, message: str, project_id: str = None) -> Dict[str, Any]:
        """–ß–∞—Ç —Å AI"""
        
        response = await self.session.post(
            f"{self.base_url}/api/ai/chat",
            headers=await self.get_headers(),
            json={
                "message": message,
                "project_id": project_id or self.project_id,
                "provider": "openrouter",
                "model": "deepseek/deepseek-v3"
            }
        )
        
        assert response.status_code == 200, f"AI chat failed: {response.text}"
        return response.json()
    
    async def generate_project(self, project_id: str) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        
        response = await self.session.post(
            f"{self.base_url}/api/projects/{project_id}/generate",
            headers=await self.get_headers()
        )
        
        assert response.status_code == 200, f"Project generation failed: {response.text}"
        
        # –ß–∏—Ç–∞–µ–º streaming –æ—Ç–≤–µ—Ç
        updates = []
        async for line in response.aiter_lines():
            if line.startswith("data: "):
                try:
                    data = json.loads(line[6:])
                    updates.append(data)
                    
                    # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    if data.get("type") == "generation_complete":
                        break
                except json.JSONDecodeError:
                    continue
        
        return updates
    
    async def get_project_files(self, project_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        response = await self.session.get(
            f"{self.base_url}/api/projects/{project_id}/files",
            headers=await self.get_headers()
        )
        
        assert response.status_code == 200, f"Get project files failed: {response.text}"
        return response.json()
    
    async def export_project(self, project_id: str) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞"""
        
        response = await self.session.post(
            f"{self.base_url}/api/projects/{project_id}/export",
            headers=await self.get_headers()
        )
        
        assert response.status_code == 200, f"Project export failed: {response.text}"
        return response.content
    
    async def get_ai_usage(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        
        response = await self.session.get(
            f"{self.base_url}/api/ai/usage",
            headers=await self.get_headers()
        )
        
        assert response.status_code == 200, f"Get AI usage failed: {response.text}"
        return response.json()
    
    async def get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        
        response = await self.session.get(f"{self.base_url}/health")
        assert response.status_code == 200, f"Health check failed: {response.text}"
        return response.json()
    
    async def get_metrics(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ Prometheus"""
        
        response = await self.session.get(f"{self.base_url}/metrics")
        assert response.status_code == 200, f"Get metrics failed: {response.text}"
        return response.text

@pytest.mark.asyncio
async def test_full_user_journey():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É—Ç–∏"""
    
    async with E2ETestClient(BASE_URL) as client:
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º E2E —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_data = await client.register_user(TEST_USER_EMAIL, TEST_USER_PASSWORD)
        assert user_data["status"] == "registered"
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data['user_id']}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        health = await client.get_health_status()
        assert health["status"] == "healthy"
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞: uptime {health['uptime_human']}")
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        print("3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")
        project_data = await client.create_project(TEST_PROJECT_NAME, TEST_PROJECT_DESCRIPTION)
        assert project_data["status"] == "created"
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project_data['project_id']}")
        
        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
        print("4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ...")
        project_info = await client.get_project(project_data["project_id"])
        assert project_info["project"]["name"] == TEST_PROJECT_NAME
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω: {project_info['project']['name']}")
        
        # 5. –ß–∞—Ç —Å AI
        print("5Ô∏è‚É£ –ß–∞—Ç —Å AI...")
        ai_response = await client.chat_with_ai(
            "–°–æ–∑–¥–∞–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á",
            project_data["project_id"]
        )
        assert "content" in ai_response
        print(f"‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(ai_response['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        print("6Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞...")
        generation_updates = await client.generate_project(project_data["project_id"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        assert len(generation_updates) > 0
        print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(generation_updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ
        final_update = generation_updates[-1]
        assert final_update.get("type") == "generation_complete"
        print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {final_update.get('files_count', 0)} —Ñ–∞–π–ª–æ–≤")
        
        # 7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        print("7Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
        files_data = await client.get_project_files(project_data["project_id"])
        assert "files" in files_data
        print(f"‚úÖ –§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(files_data['files'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # 8. –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞
        print("8Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞...")
        export_data = await client.export_project(project_data["project_id"])
        assert len(export_data) > 0
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {len(export_data)} –±–∞–π—Ç")
        
        # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI
        print("9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI...")
        usage_stats = await client.get_ai_usage()
        assert "total_requests" in usage_stats
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI: {usage_stats['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
        print("üîü –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫...")
        metrics = await client.get_metrics()
        assert "api_requests_total" in metrics
        print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(metrics)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("üéâ E2E —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

@pytest.mark.asyncio
async def test_ai_providers():
    """–¢–µ—Å—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    async with E2ETestClient(BASE_URL) as client:
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        await client.register_user(TEST_USER_EMAIL, TEST_USER_PASSWORD)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        response = await client.session.get(f"{client.base_url}/api/ai/providers")
        assert response.status_code == 200
        
        providers_data = response.json()
        assert "providers" in providers_data
        assert len(providers_data["providers"]) > 0
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(providers_data['providers'])} AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        for provider in providers_data["providers"]:
            assert "id" in provider
            assert "name" in provider
            assert "description" in provider
            assert "website" in provider
            assert "requires_key" in provider
            print(f"  - {provider['name']}: {provider['description']}")

@pytest.mark.asyncio
async def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    async with E2ETestClient(BASE_URL) as client:
        print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
        
        # –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        response = await client.session.get(f"{client.base_url}/api/projects")
        assert response.status_code == 401
        
        # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        await client.register_user(TEST_USER_EMAIL, TEST_USER_PASSWORD)
        response = await client.session.get(
            f"{client.base_url}/api/projects/nonexistent",
            headers=await client.get_headers()
        )
        assert response.status_code == 404
        
        # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ AI –∑–∞–ø—Ä–æ—Å–∞
        response = await client.session.post(
            f"{client.base_url}/api/ai/chat",
            headers=await client.get_headers(),
            json={"invalid": "data"}
        )
        assert response.status_code == 400
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

@pytest.mark.asyncio
async def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    async with E2ETestClient(BASE_URL) as client:
        print("‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
        
        await client.register_user(TEST_USER_EMAIL, TEST_USER_PASSWORD)
        
        # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ API
        start_time = time.time()
        health = await client.get_health_status()
        response_time = time.time() - start_time
        
        assert response_time < 1.0, f"Health check too slow: {response_time:.3f}s"
        print(f"‚úÖ Health check: {response_time:.3f}s")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        start_time = time.time()
        project_data = await client.create_project(TEST_PROJECT_NAME, TEST_PROJECT_DESCRIPTION)
        creation_time = time.time() - start_time
        
        assert creation_time < 5.0, f"Project creation too slow: {creation_time:.3f}s"
        print(f"‚úÖ Project creation: {creation_time:.3f}s")
        
        # –¢–µ—Å—Ç AI –∑–∞–ø—Ä–æ—Å–∞
        start_time = time.time()
        ai_response = await client.chat_with_ai("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
        ai_time = time.time() - start_time
        
        assert ai_time < 10.0, f"AI request too slow: {ai_time:.3f}s"
        print(f"‚úÖ AI request: {ai_time:.3f}s")

@pytest.mark.asyncio
async def test_concurrent_requests():
    """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    async with E2ETestClient(BASE_URL) as client:
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")
        
        await client.register_user(TEST_USER_EMAIL, TEST_USER_PASSWORD)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for i in range(3):
            task = client.create_project(f"Concurrent Project {i}", f"Description {i}")
            tasks.append(task)
        
        start_time = time.time()
        results = await asyncio.gather(*tasks)
        total_time = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        for result in results:
            assert result["status"] == "created"
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(results)} –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞ {total_time:.3f}s")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—ã—Å—Ç—Ä–µ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö
        assert total_time < 15.0, f"Concurrent requests too slow: {total_time:.3f}s"

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö E2E —Ç–µ—Å—Ç–æ–≤"""
    
    print("üß™ –ó–∞–ø—É—Å–∫ E2E Comprehensive —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 50)
    
    tests = [
        ("–ü–æ–ª–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å", test_full_user_journey),
        ("AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã", test_ai_providers),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_error_handling),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance),
        ("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", test_concurrent_requests),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            print(f"\nüîç –ó–∞–ø—É—Å–∫: {test_name}")
            await test_func()
            print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            passed += 1
        except Exception as e:
            print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã E2E —Ç–µ—Å—Ç–æ–≤:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed / (passed + failed) * 100):.1f}%")
    
    if failed == 0:
        print("üéâ –í—Å–µ E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
    
    return failed == 0

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = asyncio.run(run_all_tests())
    exit(0 if success else 1)