#!/usr/bin/env python3
"""
Comprehensive —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –±–∞–≥–∏
"""

import asyncio
import httpx
import json
import uuid
from datetime import datetime
import traceback

BASE_URL = "http://localhost:8001"

class ComprehensiveBugChecker:
    """Comprehensive –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–≥–∏"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.session = httpx.AsyncClient(timeout=30.0)
        self.bugs_found = []
        self.tests_passed = 0
        self.tests_failed = 0
    
    async def __aenter__(self):
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.session.aclose()
    
    def log_bug(self, component: str, description: str, error: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–∞–≥–∞"""
        bug = {
            "component": component,
            "description": description,
            "error": str(error) if error else None,
            "timestamp": datetime.now().isoformat()
        }
        self.bugs_found.append(bug)
        print(f"üêõ BUG FOUND in {component}: {description}")
        if error:
            print(f"   Error: {error}")
    
    def log_success(self, component: str, description: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.tests_passed += 1
        print(f"‚úÖ {component}: {description}")
    
    def log_failure(self, component: str, description: str, error: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.tests_failed += 1
        print(f"‚ùå {component}: {description}")
        if error:
            print(f"   Error: {error}")
    
    async def test_server_startup(self):
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = await self.session.get(f"{self.base_url}/")
            if response.status_code == 200:
                data = response.json()
                if "Samokoder" in data.get("message", ""):
                    self.log_success("Server", "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
                else:
                    self.log_bug("Server", "–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            else:
                self.log_bug("Server", f"–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
        except Exception as e:
            self.log_bug("Server", "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç", str(e))
    
    async def test_health_endpoints(self):
        """–¢–µ—Å—Ç health endpoints"""
        try:
            # –ë–∞–∑–æ–≤—ã–π health check
            response = await self.session.get(f"{self.base_url}/health")
            if response.status_code == 200:
                data = response.json()
                if "status" in data:
                    self.log_success("Health", "–ë–∞–∑–æ–≤—ã–π health check —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    self.log_bug("Health", "Health check –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'status'")
            else:
                self.log_bug("Health", f"Health check –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π health check
            response = await self.session.get(f"{self.base_url}/health/detailed")
            if response.status_code == 200:
                data = response.json()
                required_fields = ["status", "uptime_seconds", "external_services"]
                missing_fields = [f for f in required_fields if f not in data]
                if not missing_fields:
                    self.log_success("Health", "–î–µ—Ç–∞–ª—å–Ω—ã–π health check —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    self.log_bug("Health", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
            else:
                self.log_bug("Health", f"–î–µ—Ç–∞–ª—å–Ω—ã–π health check –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                
        except Exception as e:
            self.log_bug("Health", "–û—à–∏–±–∫–∞ –≤ health endpoints", str(e))
    
    async def test_metrics_endpoint(self):
        """–¢–µ—Å—Ç metrics endpoint"""
        try:
            response = await self.session.get(f"{self.base_url}/metrics")
            if response.status_code == 200:
                content = response.text
                if "api_requests_total" in content:
                    self.log_success("Metrics", "Metrics endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    self.log_bug("Metrics", "Metrics –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
            else:
                self.log_bug("Metrics", f"Metrics endpoint –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
        except Exception as e:
            self.log_bug("Metrics", "–û—à–∏–±–∫–∞ –≤ metrics endpoint", str(e))
    
    async def test_ai_providers(self):
        """–¢–µ—Å—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        try:
            response = await self.session.get(f"{self.base_url}/api/ai/providers")
            if response.status_code == 200:
                data = response.json()
                if "providers" in data and isinstance(data["providers"], list):
                    providers = data["providers"]
                    if len(providers) > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                        provider = providers[0]
                        required_fields = ["id", "name", "description", "requires_key"]
                        missing_fields = [f for f in required_fields if f not in provider]
                        if not missing_fields:
                            self.log_success("AI Providers", "AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        else:
                            self.log_bug("AI Providers", f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è: {missing_fields}")
                    else:
                        self.log_bug("AI Providers", "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø—É—Å—Ç")
                else:
                    self.log_bug("AI Providers", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
            else:
                self.log_bug("AI Providers", f"AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤–µ—Ä–Ω—É–ª–∏ –∫–æ–¥ {response.status_code}")
        except Exception as e:
            self.log_bug("AI Providers", "–û—à–∏–±–∫–∞ –≤ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö", str(e))
    
    async def test_ai_chat_without_keys(self):
        """–¢–µ—Å—Ç AI —á–∞—Ç–∞ –±–µ–∑ –∫–ª—é—á–µ–π"""
        try:
            # Mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            mock_user_id = str(uuid.uuid4())
            mock_token = f"mock_token_{mock_user_id}"
            headers = {
                "Authorization": f"Bearer {mock_token}",
                "Content-Type": "application/json"
            }
            
            response = await self.session.post(
                f"{self.base_url}/api/ai/chat",
                headers=headers,
                json={
                    "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    "model": "gpt-4o-mini",
                    "provider": "openai"
                }
            )
            
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π
            if response.status_code in [400, 401, 500]:
                error_data = response.json()
                if "error" in error_data or "detail" in error_data:
                    self.log_success("AI Chat", "AI —á–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–π")
                else:
                    self.log_bug("AI Chat", "AI —á–∞—Ç –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –Ω–æ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π")
            else:
                self.log_bug("AI Chat", f"AI —á–∞—Ç –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ {response.status_code}")
                
        except Exception as e:
            self.log_bug("AI Chat", "–û—à–∏–±–∫–∞ –≤ AI —á–∞—Ç–µ", str(e))
    
    async def test_auth_endpoints(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –¢–µ—Å—Ç login —Å mock –¥–∞–Ω–Ω—ã–º–∏
            response = await self.session.post(
                f"{self.base_url}/api/auth/login",
                json={
                    "email": "test@example.com",
                    "password": "testpassword"
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                if "user" in data and "session" in data:
                    self.log_success("Auth", "Mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    self.log_bug("Auth", "Login –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è")
            else:
                self.log_bug("Auth", f"Login –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                
        except Exception as e:
            self.log_bug("Auth", "–û—à–∏–±–∫–∞ –≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", str(e))
    
    async def test_project_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
        try:
            # Mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            mock_user_id = str(uuid.uuid4())
            mock_token = f"mock_token_{mock_user_id}"
            headers = {
                "Authorization": f"Bearer {mock_token}",
                "Content-Type": "application/json"
            }
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            project_data = {
                "name": f"Test Project {datetime.now().strftime('%H%M%S')}",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–≥–æ–≤"
            }
            
            response = await self.session.post(
                f"{self.base_url}/api/projects",
                headers=headers,
                json=project_data
            )
            
            if response.status_code == 200:
                data = response.json()
                if "project_id" in data:
                    project_id = data["project_id"]
                    self.log_success("Projects", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
                    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
                    response = await self.session.get(
                        f"{self.base_url}/api/projects/{project_id}",
                        headers=headers
                    )
                    
                    if response.status_code == 200:
                        self.log_success("Projects", "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        self.log_bug("Projects", f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤–µ—Ä–Ω—É–ª–æ –∫–æ–¥ {response.status_code}")
                    
                    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
                    response = await self.session.get(
                        f"{self.base_url}/api/projects/{project_id}/files",
                        headers=headers
                    )
                    
                    if response.status_code == 200:
                        self.log_success("Projects", "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        self.log_bug("Projects", f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤–µ—Ä–Ω—É–ª–æ –∫–æ–¥ {response.status_code}")
                        
                else:
                    self.log_bug("Projects", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ project_id")
            else:
                self.log_bug("Projects", f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤–µ—Ä–Ω—É–ª–æ –∫–æ–¥ {response.status_code}")
                
        except Exception as e:
            self.log_bug("Projects", "–û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏", str(e))
    
    async def test_gpt_pilot_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GPT-Pilot"""
        try:
            # Mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            mock_user_id = str(uuid.uuid4())
            mock_token = f"mock_token_{mock_user_id}"
            headers = {
                "Authorization": f"Bearer {mock_token}",
                "Content-Type": "application/json"
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            project_data = {
                "name": f"GPT-Pilot Test {datetime.now().strftime('%H%M%S')}",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è GPT-Pilot"
            }
            
            response = await self.session.post(
                f"{self.base_url}/api/projects",
                headers=headers,
                json=project_data
            )
            
            if response.status_code == 200:
                data = response.json()
                project_id = data["project_id"]
                
                # –¢–µ—Å—Ç —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏
                response = await self.session.post(
                    f"{self.base_url}/api/projects/{project_id}/chat",
                    headers=headers,
                    json={
                        "message": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç",
                        "context": "development"
                    }
                )
                
                if response.status_code == 200:
                    self.log_success("GPT-Pilot", "–ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    self.log_bug("GPT-Pilot", f"–ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                
                # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                response = await self.session.post(
                    f"{self.base_url}/api/projects/{project_id}/generate",
                    headers=headers
                )
                
                if response.status_code == 200:
                    self.log_success("GPT-Pilot", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    self.log_bug("GPT-Pilot", f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥ {response.status_code}")
                    
            else:
                self.log_bug("GPT-Pilot", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                
        except Exception as e:
            self.log_bug("GPT-Pilot", "–û—à–∏–±–∫–∞ –≤ GPT-Pilot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", str(e))
    
    async def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            response = await self.session.get(f"{self.base_url}/api/nonexistent")
            if response.status_code == 404:
                self.log_success("Error Handling", "404 –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                self.log_bug("Error Handling", f"–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            
            # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            response = await self.session.post(
                f"{self.base_url}/api/projects",
                json={"invalid": "data"}
            )
            if response.status_code == 401:  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                self.log_success("Error Handling", "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                self.log_bug("Error Handling", f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—É–ª–∏ –∫–æ–¥ {response.status_code}")
                
        except Exception as e:
            self.log_bug("Error Handling", "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫", str(e))
    
    async def test_rate_limiting(self):
        """–¢–µ—Å—Ç rate limiting"""
        try:
            # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for i in range(5):
                response = await self.session.get(f"{self.base_url}/health")
                if response.status_code == 429:
                    self.log_success("Rate Limiting", "Rate limiting —Å—Ä–∞–±–æ—Ç–∞–ª")
                    return
                elif response.status_code != 200:
                    self.log_bug("Rate Limiting", f"Health check –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                    return
            
            # –ï—Å–ª–∏ rate limiting –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            self.log_success("Rate Limiting", "Rate limiting –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            
        except Exception as e:
            self.log_bug("Rate Limiting", "–û—à–∏–±–∫–∞ –≤ rate limiting", str(e))
    
    async def test_cors_headers(self):
        """–¢–µ—Å—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        try:
            response = await self.session.options(f"{self.base_url}/")
            if response.status_code == 200:
                cors_headers = [
                    "access-control-allow-origin",
                    "access-control-allow-methods",
                    "access-control-allow-headers"
                ]
                present_headers = [h for h in cors_headers if h in response.headers]
                if present_headers:
                    self.log_success("CORS", "CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                else:
                    self.log_bug("CORS", "CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                self.log_bug("CORS", f"OPTIONS –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
        except Exception as e:
            self.log_bug("CORS", "–û—à–∏–±–∫–∞ –≤ CORS", str(e))
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üîç COMPREHENSIVE BUG CHECK")
        print("=" * 60)
        
        tests = [
            ("Server Startup", self.test_server_startup),
            ("Health Endpoints", self.test_health_endpoints),
            ("Metrics Endpoint", self.test_metrics_endpoint),
            ("AI Providers", self.test_ai_providers),
            ("AI Chat", self.test_ai_chat_without_keys),
            ("Authentication", self.test_auth_endpoints),
            ("Project Management", self.test_project_management),
            ("GPT-Pilot Integration", self.test_gpt_pilot_integration),
            ("Error Handling", self.test_error_handling),
            ("Rate Limiting", self.test_rate_limiting),
            ("CORS Headers", self.test_cors_headers)
        ]
        
        for test_name, test_func in tests:
            print(f"\nüîç {test_name}...")
            try:
                await test_func()
            except Exception as e:
                self.log_bug(test_name, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ", str(e))
                print(f"   Traceback: {traceback.format_exc()}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.tests_passed}")
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.tests_failed}")
        print(f"üêõ –ë–∞–≥–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(self.bugs_found)}")
        
        if self.bugs_found:
            print("\nüêõ –ù–ê–ô–î–ï–ù–ù–´–ï –ë–ê–ì–ò:")
            for i, bug in enumerate(self.bugs_found, 1):
                print(f"{i}. {bug['component']}: {bug['description']}")
                if bug['error']:
                    print(f"   –û—à–∏–±–∫–∞: {bug['error']}")
        else:
            print("\nüéâ –ë–ê–ì–û–í –ù–ï –ù–ê–ô–î–ï–ù–û!")
        
        return len(self.bugs_found) == 0

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    async with ComprehensiveBugChecker(BASE_URL) as checker:
        success = await checker.run_all_tests()
        return success

if __name__ == "__main__":
    asyncio.run(main())