#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –°–∞–º–æ–∫–æ–¥–µ—Ä
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import subprocess
import sys
import os
import argparse
from pathlib import Path

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîß {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print("-" * 50)
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.stdout:
        print("STDOUT:")
        print(result.stdout)
    
    if result.stderr:
        print("STDERR:")
        print(result.stderr)
    
    if result.returncode != 0:
        print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode})")
        return False
    else:
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pytest –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    dependencies = [
        "pytest>=7.4.0",
        "pytest-asyncio>=0.21.0",
        "pytest-cov>=4.1.0",
        "pytest-mock>=3.11.0",
        "pytest-xdist>=3.3.0",  # –î–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        "httpx>=0.24.0",  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤
        "faker>=19.0.0",  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    ]
    
    for dep in dependencies:
        if not run_command(f"pip install {dep}", f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}"):
            return False
    
    return True

def run_unit_tests(verbose=False, coverage=False, parallel=False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç unit —Ç–µ—Å—Ç—ã"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤...")
    
    cmd_parts = ["python -m pytest tests/"]
    
    if verbose:
        cmd_parts.append("-v")
    
    if coverage:
        cmd_parts.extend(["--cov=backend", "--cov-report=html", "--cov-report=term"])
    
    if parallel:
        cmd_parts.extend(["-n", "auto"])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
    cmd_parts.extend(["-m", "unit"])
    
    command = " ".join(cmd_parts)
    
    return run_command(command, "Unit —Ç–µ—Å—Ç—ã")

def run_integration_tests(verbose=False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç integration —Ç–µ—Å—Ç—ã"""
    print("\nüîó –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤...")
    
    cmd_parts = ["python -m pytest tests/"]
    
    if verbose:
        cmd_parts.append("-v")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã
    cmd_parts.extend(["-m", "integration"])
    
    command = " ".join(cmd_parts)
    
    return run_command(command, "Integration —Ç–µ—Å—Ç—ã")

def run_security_tests(verbose=False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç security —Ç–µ—Å—Ç—ã"""
    print("\nüîí –ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤...")
    
    cmd_parts = ["python -m pytest tests/"]
    
    if verbose:
        cmd_parts.append("-v")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ security —Ç–µ—Å—Ç—ã
    cmd_parts.extend(["-m", "security"])
    
    command = " ".join(cmd_parts)
    
    return run_command(command, "Security —Ç–µ—Å—Ç—ã")

def run_all_tests(verbose=False, coverage=False, parallel=False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    cmd_parts = ["python -m pytest tests/"]
    
    if verbose:
        cmd_parts.append("-v")
    
    if coverage:
        cmd_parts.extend(["--cov=backend", "--cov-report=html", "--cov-report=term"])
    
    if parallel:
        cmd_parts.extend(["-n", "auto"])
    
    command = " ".join(cmd_parts)
    
    return run_command(command, "–í—Å–µ —Ç–µ—Å—Ç—ã")

def run_specific_test(test_path, verbose=False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç"""
    print(f"\nüéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_path}")
    
    cmd_parts = ["python -m pytest", test_path]
    
    if verbose:
        cmd_parts.append("-v")
    
    command = " ".join(cmd_parts)
    
    return run_command(command, f"–¢–µ—Å—Ç {test_path}")

def run_linting():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–∏–Ω—Ç–µ—Ä—ã"""
    print("\nüîç –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏–Ω—Ç–µ—Ä–æ–≤
    linters = [
        ("flake8", "flake8 backend/ tests/"),
        ("black", "black --check backend/ tests/"),
        ("isort", "isort --check-only backend/ tests/"),
        ("mypy", "mypy backend/")
    ]
    
    results = []
    for linter_name, command in linters:
        print(f"\nüîß –ó–∞–ø—É—Å–∫ {linter_name}...")
        result = run_command(command, f"{linter_name} –ø—Ä–æ–≤–µ—Ä–∫–∞")
        results.append((linter_name, result))
    
    return all(result for _, result in results)

def generate_test_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∞—Ö"""
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∞—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    reports_dir = Path("test_reports")
    reports_dir.mkdir(exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
    command = "python -m pytest tests/ --html=test_reports/report.html --self-contained-html"
    success = run_command(command, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞")
    
    if success:
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {reports_dir.absolute()}/report.html")
    
    return success

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –°–∞–º–æ–∫–æ–¥–µ—Ä")
    parser.add_argument("--type", choices=["unit", "integration", "security", "all"], 
                       default="all", help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--test", help="–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ—Å—Ç—É")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--coverage", "-c", action="store_true", help="–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞")
    parser.add_argument("--parallel", "-p", action="store_true", help="–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫")
    parser.add_argument("--lint", action="store_true", help="–ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–æ–≤")
    parser.add_argument("--install", action="store_true", help="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    parser.add_argument("--report", action="store_true", help="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")
    
    args = parser.parse_args()
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê –°–ê–ú–û–ö–û–î–ï–†")
    print("=" * 50)
    
    success = True
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if args.install:
        success &= install_dependencies()
    
    # –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–æ–≤
    if args.lint:
        success &= run_linting()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if args.test:
        success &= run_specific_test(args.test, args.verbose)
    elif args.type == "unit":
        success &= run_unit_tests(args.verbose, args.coverage, args.parallel)
    elif args.type == "integration":
        success &= run_integration_tests(args.verbose)
    elif args.type == "security":
        success &= run_security_tests(args.verbose)
    elif args.type == "all":
        success &= run_all_tests(args.verbose, args.coverage, args.parallel)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if args.report:
        success &= generate_test_report()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        sys.exit(1)

if __name__ == "__main__":
    main()