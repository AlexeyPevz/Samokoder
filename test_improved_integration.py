#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
"""

import asyncio
import json
import time
import uuid
from datetime import datetime
from pathlib import Path
import httpx
import pytest
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BASE_URL = "http://localhost:8000"
TEST_USER_EMAIL = f"test_{uuid.uuid4().hex[:8]}@example.com"
TEST_USER_PASSWORD = "TestPassword123!"

class ImprovedIntegrationTest:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.session = httpx.AsyncClient(timeout=30.0)
        self.auth_token = None
        self.user_id = None
        self.project_id = None
        self.test_results = {}
    
    async def __aenter__(self):
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.session.aclose()
    
    def get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        return {
            "Authorization": f"Bearer {self.auth_token}",
            "Content-Type": "application/json"
        }
    
    async def test_server_startup(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            response = await self.session.get(f"{self.base_url}/")
            assert response.status_code == 200
            data = response.json()
            assert "message" in data
            assert "Samokoder" in data["message"]
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            self.test_results["server_startup"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            self.test_results["server_startup"] = False
            return False
    
    async def test_health_endpoints(self) -> bool:
        """–¢–µ—Å—Ç health endpoints"""
        
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoints...")
        
        try:
            # –ë–∞–∑–æ–≤—ã–π health check
            response = await self.session.get(f"{self.base_url}/health")
            assert response.status_code == 200
            health_data = response.json()
            assert "status" in health_data
            print("‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π health check
            response = await self.session.get(f"{self.base_url}/health/detailed")
            assert response.status_code == 200
            detailed_data = response.json()
            assert "uptime_seconds" in detailed_data
            print("‚úÖ Detailed health check –ø—Ä–æ–π–¥–µ–Ω")
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            response = await self.session.get(f"{self.base_url}/metrics")
            assert response.status_code == 200
            metrics_text = response.text
            assert "api_requests_total" in metrics_text
            print("‚úÖ Metrics endpoint –ø—Ä–æ–π–¥–µ–Ω")
            
            self.test_results["health_endpoints"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Health endpoints —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["health_endpoints"] = False
            return False
    
    async def test_ai_service(self) -> bool:
        """–¢–µ—Å—Ç AI —Å–µ—Ä–≤–∏—Å–∞"""
        
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å...")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            response = await self.session.get(f"{self.base_url}/api/ai/providers")
            assert response.status_code == 200
            providers_data = response.json()
            assert "providers" in providers_data
            assert len(providers_data["providers"]) > 0
            print("‚úÖ AI providers endpoint –ø—Ä–æ–π–¥–µ–Ω")
            
            # Mock AI —á–∞—Ç (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π)
            response = await self.session.post(
                f"{self.base_url}/api/ai/chat",
                headers=self.get_headers(),
                json={
                    "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    "model": "gpt-4o-mini",
                    "provider": "openai"
                }
            )
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
            assert response.status_code in [500, 401, 400]
            print("‚úÖ AI chat endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑ –∫–ª—é—á–µ–π)")
            
            self.test_results["ai_service"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå AI service —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["ai_service"] = False
            return False
    
    async def test_project_management(self) -> bool:
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
        
        print("üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏...")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            project_data = {
                "name": f"Test Project {datetime.now().strftime('%H%M%S')}",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            }
            
            response = await self.session.post(
                f"{self.base_url}/api/projects",
                headers=self.get_headers(),
                json=project_data
            )
            
            if response.status_code == 200:
                data = response.json()
                self.project_id = data["project_id"]
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–æ")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                response = await self.session.get(
                    f"{self.base_url}/api/projects/{self.project_id}",
                    headers=self.get_headers()
                )
                assert response.status_code == 200
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–æ")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
                response = await self.session.get(
                    f"{self.base_url}/api/projects/{self.project_id}/files",
                    headers=self.get_headers()
                )
                assert response.status_code == 200
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–æ")
                
                self.test_results["project_management"] = True
                return True
            else:
                print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å: {response.status_code} - {response.text}")
                self.test_results["project_management"] = False
                return False
                
        except Exception as e:
            print(f"‚ùå Project management —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["project_management"] = False
            return False
    
    async def test_gpt_pilot_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GPT-Pilot"""
        
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å GPT-Pilot...")
        
        if not self.project_id:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç GPT-Pilot")
            self.test_results["gpt_pilot_integration"] = False
            return False
        
        try:
            # –¢–µ—Å—Ç —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏
            response = await self.session.post(
                f"{self.base_url}/api/projects/{self.project_id}/chat",
                headers=self.get_headers(),
                json={
                    "message": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç",
                    "context": "development"
                }
            )
            
            if response.status_code == 200:
                print("‚úÖ –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                response = await self.session.post(
                    f"{self.base_url}/api/projects/{self.project_id}/generate",
                    headers=self.get_headers()
                )
                
                if response.status_code == 200:
                    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    self.test_results["gpt_pilot_integration"] = True
                    return True
                else:
                    print(f"‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {response.status_code}")
                    self.test_results["gpt_pilot_integration"] = False
                    return False
            else:
                print(f"‚ö†Ô∏è –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –Ω–µ —É–¥–∞–ª—Å—è: {response.status_code}")
                self.test_results["gpt_pilot_integration"] = False
                return False
                
        except Exception as e:
            print(f"‚ùå GPT-Pilot integration —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["gpt_pilot_integration"] = False
            return False
    
    async def test_rate_limiting(self) -> bool:
        """–¢–µ—Å—Ç rate limiting"""
        
        print("‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º rate limiting...")
        
        try:
            # –î–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
            requests_made = 0
            rate_limited = False
            
            for i in range(70):  # –ë–æ–ª—å—à–µ —á–µ–º –ª–∏–º–∏—Ç –≤ –º–∏–Ω—É—Ç—É
                response = await self.session.get(
                    f"{self.base_url}/health",
                    headers=self.get_headers()
                )
                requests_made += 1
                
                if response.status_code == 429:
                    rate_limited = True
                    print(f"‚úÖ Rate limiting —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å–ª–µ {requests_made} –∑–∞–ø—Ä–æ—Å–æ–≤")
                    break
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)
            
            if rate_limited:
                self.test_results["rate_limiting"] = True
                return True
            else:
                print("‚ö†Ô∏è Rate limiting –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                self.test_results["rate_limiting"] = False
                return False
                
        except Exception as e:
            print(f"‚ùå Rate limiting —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["rate_limiting"] = False
            return False
    
    async def test_error_handling(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        
        print("üö® –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
        
        try:
            # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            response = await self.session.get(f"{self.base_url}/api/nonexistent")
            assert response.status_code == 404
            print("‚úÖ 404 –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            response = await self.session.get(
                f"{self.base_url}/api/projects/nonexistent",
                headers=self.get_headers()
            )
            assert response.status_code == 404
            print("‚úÖ 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            response = await self.session.post(
                f"{self.base_url}/api/projects",
                headers=self.get_headers(),
                json={"invalid": "data"}
            )
            assert response.status_code == 400
            print("‚úÖ 400 –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            self.test_results["error_handling"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Error handling —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["error_handling"] = False
            return False
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        
        if self.project_id:
            try:
                response = await self.session.delete(
                    f"{self.base_url}/api/projects/{self.project_id}",
                    headers=self.get_headers()
                )
                if response.status_code == 200:
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: {e}")

async def run_improved_integration_tests():
    """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("üß™ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    print("=" * 60)
    
    async with ImprovedIntegrationTest(BASE_URL) as test:
        # Mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        test.user_id = str(uuid.uuid4())
        test.auth_token = f"mock_token_{test.user_id}"
        
        tests = [
            ("Server Startup", test.test_server_startup),
            ("Health Endpoints", test.test_health_endpoints),
            ("AI Service", test.test_ai_service),
            ("Project Management", test.test_project_management),
            ("GPT-Pilot Integration", test.test_gpt_pilot_integration),
            ("Rate Limiting", test.test_rate_limiting),
            ("Error Handling", test.test_error_handling)
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            print(f"\nüîç {test_name}...")
            try:
                result = await test_func()
                if result:
                    passed += 1
                    print(f"‚úÖ {test_name} –ø—Ä–æ–π–¥–µ–Ω")
                else:
                    print(f"‚ùå {test_name} –ø—Ä–æ–≤–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå {test_name} –ø—Ä–æ–≤–∞–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞
        await test.cleanup()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        for test_name, result in test.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{test_name}: {status}")
        
        print(f"\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
        
        if passed == total:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        elif passed >= total * 0.8:
            print("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –ø—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("‚ö†Ô∏è –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        return passed, total

if __name__ == "__main__":
    asyncio.run(run_improved_integration_tests())