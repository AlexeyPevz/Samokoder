#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π
P0 —Ç–µ—Å—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –º—ë—Ä–∂, P1 —Ç–µ—Å—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è
"""

import subprocess
import sys
import json
import time
from datetime import datetime
from typing import Dict, List, Tuple
import argparse

class RegressionTestRunner:
    """–ó–∞–ø—É—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.results = {
            "p0_tests": [],
            "p1_tests": [],
            "p0_passed": 0,
            "p0_failed": 0,
            "p1_passed": 0,
            "p1_failed": 0,
            "start_time": None,
            "end_time": None,
            "total_duration": 0
        }
    
    def run_p0_tests(self) -> Tuple[bool, List[str]]:
        """–ó–∞–ø—É—Å–∫ P0 —Ç–µ—Å—Ç–æ–≤ (–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –º—ë—Ä–∂)"""
        print("üö® –ó–∞–ø—É—Å–∫ P0 —Ç–µ—Å—Ç–æ–≤ (–ë–õ–û–ö–ò–†–£–Æ–©–ò–• –ú–Å–†–ñ)...")
        print("=" * 60)
        
        p0_tests = [
            "test_jwt_token_validation_regression",
            "test_jwt_algorithm_validation_regression", 
            "test_mfa_setup_redis_storage_regression",
            "test_mfa_verification_totp_regression",
            "test_api_key_creation_connection_manager_regression",
            "test_api_key_retrieval_connection_manager_regression"
        ]
        
        failed_tests = []
        
        for test in p0_tests:
            print(f"üß™ –ó–∞–ø—É—Å–∫ P0 —Ç–µ—Å—Ç–∞: {test}")
            start_time = time.time()
            
            try:
                result = subprocess.run([
                    "python", "-m", "pytest", 
                    f"tests/test_regression_critical_flows.py::{test}",
                    "-v", "--tb=short", "--no-header"
                ], capture_output=True, text=True, timeout=300)
                
                duration = time.time() - start_time
                
                if result.returncode == 0:
                    print(f"‚úÖ {test} - –ü–†–û–ô–î–ï–ù ({duration:.2f}s)")
                    self.results["p0_passed"] += 1
                    self.results["p0_tests"].append({
                        "name": test,
                        "status": "PASSED",
                        "duration": duration,
                        "output": result.stdout
                    })
                else:
                    print(f"‚ùå {test} - –ü–†–û–í–ê–õ–ï–ù ({duration:.2f}s)")
                    print(f"   –û—à–∏–±–∫–∞: {result.stderr}")
                    self.results["p0_failed"] += 1
                    failed_tests.append(test)
                    self.results["p0_tests"].append({
                        "name": test,
                        "status": "FAILED",
                        "duration": duration,
                        "output": result.stdout,
                        "error": result.stderr
                    })
                    
            except subprocess.TimeoutExpired:
                print(f"‚è∞ {test} - –¢–ê–ô–ú–ê–£–¢ (300s)")
                self.results["p0_failed"] += 1
                failed_tests.append(test)
                self.results["p0_tests"].append({
                    "name": test,
                    "status": "TIMEOUT",
                    "duration": 300,
                    "error": "Test timeout after 300 seconds"
                })
            except Exception as e:
                print(f"üí• {test} - –û–®–ò–ë–ö–ê: {str(e)}")
                self.results["p0_failed"] += 1
                failed_tests.append(test)
                self.results["p0_tests"].append({
                    "name": test,
                    "status": "ERROR",
                    "duration": 0,
                    "error": str(e)
                })
        
        print("=" * 60)
        print(f"üìä P0 —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {self.results['p0_passed']} –ø—Ä–æ–π–¥–µ–Ω–æ, {self.results['p0_failed']} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        
        return len(failed_tests) == 0, failed_tests
    
    def run_p1_tests(self) -> Tuple[bool, List[str]]:
        """–ó–∞–ø—É—Å–∫ P1 —Ç–µ—Å—Ç–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö)"""
        print("\n‚ö†Ô∏è  –ó–∞–ø—É—Å–∫ P1 —Ç–µ—Å—Ç–æ–≤ (–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–•)...")
        print("=" * 60)
        
        p1_tests = [
            "test_mfa_fallback_in_memory_regression",
            "test_api_key_logging_security_regression",
            "test_end_to_end_authentication_flow_regression",
            "test_api_keys_management_flow_regression"
        ]
        
        failed_tests = []
        
        for test in p1_tests:
            print(f"üß™ –ó–∞–ø—É—Å–∫ P1 —Ç–µ—Å—Ç–∞: {test}")
            start_time = time.time()
            
            try:
                result = subprocess.run([
                    "python", "-m", "pytest", 
                    f"tests/test_regression_critical_flows.py::{test}",
                    "-v", "--tb=short", "--no-header"
                ], capture_output=True, text=True, timeout=300)
                
                duration = time.time() - start_time
                
                if result.returncode == 0:
                    print(f"‚úÖ {test} - –ü–†–û–ô–î–ï–ù ({duration:.2f}s)")
                    self.results["p1_passed"] += 1
                    self.results["p1_tests"].append({
                        "name": test,
                        "status": "PASSED",
                        "duration": duration,
                        "output": result.stdout
                    })
                else:
                    print(f"‚ùå {test} - –ü–†–û–í–ê–õ–ï–ù ({duration:.2f}s)")
                    print(f"   –û—à–∏–±–∫–∞: {result.stderr}")
                    self.results["p1_failed"] += 1
                    failed_tests.append(test)
                    self.results["p1_tests"].append({
                        "name": test,
                        "status": "FAILED",
                        "duration": duration,
                        "output": result.stdout,
                        "error": result.stderr
                    })
                    
            except subprocess.TimeoutExpired:
                print(f"‚è∞ {test} - –¢–ê–ô–ú–ê–£–¢ (300s)")
                self.results["p1_failed"] += 1
                failed_tests.append(test)
                self.results["p1_tests"].append({
                    "name": test,
                    "status": "TIMEOUT",
                    "duration": 300,
                    "error": "Test timeout after 300 seconds"
                })
            except Exception as e:
                print(f"üí• {test} - –û–®–ò–ë–ö–ê: {str(e)}")
                self.results["p1_failed"] += 1
                failed_tests.append(test)
                self.results["p1_tests"].append({
                    "name": test,
                    "status": "ERROR",
                    "duration": 0,
                    "error": str(e)
                })
        
        print("=" * 60)
        print(f"üìä P1 —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {self.results['p1_passed']} –ø—Ä–æ–π–¥–µ–Ω–æ, {self.results['p1_failed']} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        
        return len(failed_tests) == 0, failed_tests
    
    def run_edge_case_tests(self) -> Tuple[bool, List[str]]:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        print("\nüîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...")
        print("=" * 60)
        
        edge_tests = [
            "test_connection_manager_failure_regression",
            "test_redis_connection_failure_regression",
            "test_jwt_token_expiration_regression",
            "test_mfa_invalid_code_regression"
        ]
        
        failed_tests = []
        
        for test in edge_tests:
            print(f"üß™ –ó–∞–ø—É—Å–∫ edge case —Ç–µ—Å—Ç–∞: {test}")
            start_time = time.time()
            
            try:
                result = subprocess.run([
                    "python", "-m", "pytest", 
                    f"tests/test_regression_critical_flows.py::{test}",
                    "-v", "--tb=short", "--no-header"
                ], capture_output=True, text=True, timeout=300)
                
                duration = time.time() - start_time
                
                if result.returncode == 0:
                    print(f"‚úÖ {test} - –ü–†–û–ô–î–ï–ù ({duration:.2f}s)")
                else:
                    print(f"‚ùå {test} - –ü–†–û–í–ê–õ–ï–ù ({duration:.2f}s)")
                    print(f"   –û—à–∏–±–∫–∞: {result.stderr}")
                    failed_tests.append(test)
                    
            except subprocess.TimeoutExpired:
                print(f"‚è∞ {test} - –¢–ê–ô–ú–ê–£–¢ (300s)")
                failed_tests.append(test)
            except Exception as e:
                print(f"üí• {test} - –û–®–ò–ë–ö–ê: {str(e)}")
                failed_tests.append(test)
        
        print("=" * 60)
        print(f"üìä Edge case —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {len(edge_tests) - len(failed_tests)} –ø—Ä–æ–π–¥–µ–Ω–æ, {len(failed_tests)} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        
        return len(failed_tests) == 0, failed_tests
    
    def generate_report(self, p0_success: bool, p1_success: bool, edge_success: bool):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        self.results["end_time"] = datetime.now().isoformat()
        self.results["total_duration"] = (
            datetime.fromisoformat(self.results["end_time"]) - 
            datetime.fromisoformat(self.results["start_time"])
        ).total_seconds()
        
        print("\n" + "=" * 80)
        print("üìã –û–¢–ß–ï–¢ –û –†–ï–ì–†–ï–°–°–ò–û–ù–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("=" * 80)
        
        print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.results['start_time']}")
        print(f"üïê –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {self.results['end_time']}")
        print(f"‚è±Ô∏è  –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.results['total_duration']:.2f} —Å–µ–∫—É–Ω–¥")
        
        print(f"\nüö® P0 —Ç–µ—Å—Ç—ã (–ë–õ–û–ö–ò–†–£–Æ–©–ò–ï –ú–Å–†–ñ):")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.results['p0_passed']}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.results['p0_failed']}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {'–ó–ï–õ–Å–ù–´–ô' if p0_success else '–ö–†–ê–°–ù–´–ô'}")
        
        print(f"\n‚ö†Ô∏è  P1 —Ç–µ—Å—Ç—ã (–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï):")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.results['p1_passed']}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.results['p1_failed']}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {'–ó–ï–õ–Å–ù–´–ô' if p1_success else '–ö–†–ê–°–ù–´–ô'}")
        
        print(f"\nüîç Edge case —Ç–µ—Å—Ç—ã:")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {'–ó–ï–õ–Å–ù–´–ô' if edge_success else '–ö–†–ê–°–ù–´–ô'}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º—ë—Ä–∂–∞
        if p0_success:
            print(f"\nüéâ –°–¢–ê–¢–£–° –ú–Å–†–ñ–ê: –†–ê–ó–†–ï–®–Å–ù")
            print(f"   ‚úÖ –í—Å–µ P0 —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            if p1_success:
                print(f"   ‚úÖ –í—Å–µ P1 —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ P1 —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç –º—ë—Ä–∂)")
        else:
            print(f"\nüö´ –°–¢–ê–¢–£–° –ú–Å–†–ñ–ê: –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù")
            print(f"   ‚ùå P0 —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã - –º—ë—Ä–∂ –∑–∞–ø—Ä–µ—â—ë–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_file = f"regression_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
        
        return p0_success
    
    def run_all_tests(self, include_edge_cases: bool = False):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.results["start_time"] = datetime.now().isoformat()
        
        print("üöÄ –ó–ê–ü–£–°–ö –†–ï–ì–†–ï–°–°–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.results['start_time']}")
        print(f"üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤")
        print(f"üìã –°—Ç–∞—Ç—É—Å: P0 —Ç–µ—Å—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –º—ë—Ä–∂, P1 —Ç–µ—Å—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º P0 —Ç–µ—Å—Ç—ã
        p0_success, p0_failed = self.run_p0_tests()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º P1 —Ç–µ—Å—Ç—ã
        p1_success, p1_failed = self.run_p1_tests()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º edge case —Ç–µ—Å—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        edge_success = True
        if include_edge_cases:
            edge_success, edge_failed = self.run_edge_case_tests()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        merge_allowed = self.generate_report(p0_success, p1_success, edge_success)
        
        return merge_allowed

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    parser.add_argument("--p0-only", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ P0 —Ç–µ—Å—Ç—ã")
    parser.add_argument("--p1-only", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ P1 —Ç–µ—Å—Ç—ã")
    parser.add_argument("--include-edge-cases", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    
    args = parser.parse_args()
    
    runner = RegressionTestRunner()
    
    if args.p0_only:
        print("üö® –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ P0 —Ç–µ—Å—Ç–æ–≤ (–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –º—ë—Ä–∂)...")
        p0_success, _ = runner.run_p0_tests()
        runner.generate_report(p0_success, True, True)
        return 0 if p0_success else 1
    
    elif args.p1_only:
        print("‚ö†Ô∏è  –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ P1 —Ç–µ—Å—Ç–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö)...")
        p1_success, _ = runner.run_p1_tests()
        runner.generate_report(True, p1_success, True)
        return 0 if p1_success else 1
    
    else:
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        merge_allowed = runner.run_all_tests(include_edge_cases=args.include_edge_cases)
        return 0 if merge_allowed else 1

if __name__ == "__main__":
    exit(main())