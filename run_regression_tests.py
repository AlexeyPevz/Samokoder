#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
"""

import subprocess
import sys
import json
import time
from datetime import datetime
from pathlib import Path

class RegressionTestRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.results = {
            "start_time": datetime.now().isoformat(),
            "tests": {},
            "summary": {
                "total": 0,
                "passed": 0,
                "failed": 0,
                "skipped": 0,
                "errors": 0
            }
        }
    
    def run_test_file(self, test_file: str, priority: str = "P1") -> dict:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        print(f"\n{'='*60}")
        print(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: {test_file} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})")
        print(f"{'='*60}")
        
        start_time = time.time()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º pytest –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            result = subprocess.run([
                sys.executable, "-m", "pytest", 
                test_file, 
                "-v", 
                "--tb=short",
                "--json-report",
                "--json-report-file=test_results.json"
            ], capture_output=True, text=True, timeout=300)
            
            end_time = time.time()
            duration = end_time - start_time
            
            # –ß–∏—Ç–∞–µ–º JSON –æ—Ç—á—ë—Ç
            try:
                with open("test_results.json", "r") as f:
                    json_report = json.load(f)
                
                test_results = {
                    "status": "passed" if result.returncode == 0 else "failed",
                    "duration": duration,
                    "returncode": result.returncode,
                    "stdout": result.stdout,
                    "stderr": result.stderr,
                    "summary": json_report.get("summary", {}),
                    "tests": json_report.get("tests", [])
                }
            except FileNotFoundError:
                test_results = {
                    "status": "failed",
                    "duration": duration,
                    "returncode": result.returncode,
                    "stdout": result.stdout,
                    "stderr": result.stderr,
                    "summary": {},
                    "tests": []
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if test_results["status"] == "passed":
                self.results["summary"]["passed"] += test_results["summary"].get("passed", 0)
            else:
                self.results["summary"]["failed"] += test_results["summary"].get("failed", 0)
            
            self.results["summary"]["total"] += test_results["summary"].get("total", 0)
            self.results["summary"]["skipped"] += test_results["summary"].get("skipped", 0)
            self.results["summary"]["errors"] += test_results["summary"].get("error", 0)
            
            return test_results
            
        except subprocess.TimeoutExpired:
            return {
                "status": "timeout",
                "duration": 300,
                "returncode": -1,
                "stdout": "",
                "stderr": "Test timeout after 5 minutes",
                "summary": {},
                "tests": []
            }
        except Exception as e:
            return {
                "status": "error",
                "duration": 0,
                "returncode": -1,
                "stdout": "",
                "stderr": str(e),
                "summary": {},
                "tests": []
            }
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤")
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.results['start_time']}")
        
        # P0 —Ç–µ—Å—Ç—ã (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ - –±–ª–æ–∫–∏—Ä—É—é—Ç –º—ë—Ä–∂)
        p0_tests = [
            ("tests/test_regression_auth_security.py", "P0"),
            ("tests/test_regression_project_management.py", "P0"),
            ("tests/test_regression_middleware_security.py", "P0")
        ]
        
        # P1 —Ç–µ—Å—Ç—ã (–≤–∞–∂–Ω—ã–µ - —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è)
        p1_tests = [
            ("tests/test_regression_ai_service.py", "P1"),
            ("tests/test_regression_critical_user_flows.py", "P1")
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º P0 —Ç–µ—Å—Ç—ã
        print("\nüî¥ P0 –¢–ï–°–¢–´ (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ - –±–ª–æ–∫–∏—Ä—É—é—Ç –º—ë—Ä–∂)")
        for test_file, priority in p0_tests:
            if Path(test_file).exists():
                result = self.run_test_file(test_file, priority)
                self.results["tests"][test_file] = result
                
                if result["status"] != "passed":
                    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ {test_file}")
                    print(f"   –°—Ç–∞—Ç—É—Å: {result['status']}")
                    print(f"   –û—à–∏–±–∫–∞: {result['stderr'][:200]}...")
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º P1 —Ç–µ—Å—Ç—ã
        print("\nüü° P1 –¢–ï–°–¢–´ (–í–∞–∂–Ω—ã–µ - —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è)")
        for test_file, priority in p1_tests:
            if Path(test_file).exists():
                result = self.run_test_file(test_file, priority)
                self.results["tests"][test_file] = result
                
                if result["status"] != "passed":
                    print(f"‚ö†Ô∏è  –û–®–ò–ë–ö–ê –≤ {test_file}")
                    print(f"   –°—Ç–∞—Ç—É—Å: {result['status']}")
                    print(f"   –û—à–∏–±–∫–∞: {result['stderr'][:200]}...")
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º
        self.results["end_time"] = datetime.now().isoformat()
        self.results["duration"] = (
            datetime.fromisoformat(self.results["end_time"]) - 
            datetime.fromisoformat(self.results["start_time"])
        ).total_seconds()
        
        self.print_summary()
        self.save_results()
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print(f"\n{'='*60}")
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –†–ï–ì–†–ï–°–°–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print(f"{'='*60}")
        
        summary = self.results["summary"]
        total = summary["total"]
        passed = summary["passed"]
        failed = summary["failed"]
        skipped = summary["skipped"]
        errors = summary["errors"]
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"‚úÖ –ü—Ä–æ—à–ª–æ: {passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
        print(f"üí• –û—à–∏–±–æ–∫: {errors}")
        
        if total > 0:
            success_rate = (passed / total) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self.results['duration']:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        critical_failures = []
        for test_file, result in self.results["tests"].items():
            if "P0" in test_file and result["status"] != "passed":
                critical_failures.append(test_file)
        
        if critical_failures:
            print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò (P0) - –ú–Å–†–ñ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù:")
            for test_file in critical_failures:
                print(f"   ‚ùå {test_file}")
        else:
            print(f"\n‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã (P0) –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if critical_failures:
            print("   üî¥ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –º—ë—Ä–∂–µ–º")
        if failed > 0:
            print("   üü° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ P1 —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º")
        if success_rate >= 95:
            print("   ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞!")
        elif success_rate >= 80:
            print("   ‚ö†Ô∏è  –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
        else:
            print("   üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å—ë–∑–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –∫–∞—á–µ—Å—Ç–≤–æ–º –∫–æ–¥–∞")
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        results_file = f"regression_test_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(results_file, "w", encoding="utf-8") as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {results_file}")
        
        # –°–æ–∑–¥–∞—ë–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
        self.create_summary_report()
    
    def create_summary_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
        report_file = "REGRESSION_TEST_SUMMARY.md"
        
        with open(report_file, "w", encoding="utf-8") as f:
            f.write("# –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç\n\n")
            f.write(f"**–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {self.results['start_time']}\n")
            f.write(f"**–û–±—â–µ–µ –≤—Ä–µ–º—è:** {self.results['duration']:.2f} —Å–µ–∫—É–Ω–¥\n\n")
            
            summary = self.results["summary"]
            f.write("## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
            f.write(f"- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total']}\n")
            f.write(f"- –ü—Ä–æ—à–ª–æ: {summary['passed']}\n")
            f.write(f"- –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {summary['failed']}\n")
            f.write(f"- –ü—Ä–æ–ø—É—â–µ–Ω–æ: {summary['skipped']}\n")
            f.write(f"- –û—à–∏–±–æ–∫: {summary['errors']}\n\n")
            
            if summary['total'] > 0:
                success_rate = (summary['passed'] / summary['total']) * 100
                f.write(f"- –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n\n")
            
            f.write("## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º\n\n")
            for test_file, result in self.results["tests"].items():
                status_emoji = "‚úÖ" if result["status"] == "passed" else "‚ùå"
                f.write(f"- {status_emoji} {test_file}: {result['status']}\n")
            
            f.write("\n## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
            
            critical_failures = [
                test_file for test_file, result in self.results["tests"].items()
                if "P0" in test_file and result["status"] != "passed"
            ]
            
            if critical_failures:
                f.write("üî¥ **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò (P0) - –ú–Å–†–ñ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù:**\n")
                for test_file in critical_failures:
                    f.write(f"- {test_file}\n")
                f.write("\n")
            
            if summary['failed'] > 0:
                f.write("üü° **–û—à–∏–±–∫–∏ P1 —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º**\n\n")
            
            if summary['total'] > 0 and (summary['passed'] / summary['total']) >= 0.95:
                f.write("‚úÖ **–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞!**\n")
            elif summary['total'] > 0 and (summary['passed'] / summary['total']) >= 0.8:
                f.write("‚ö†Ô∏è **–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π**\n")
            else:
                f.write("üî¥ **–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å—ë–∑–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –∫–∞—á–µ—Å—Ç–≤–æ–º –∫–æ–¥–∞**\n")
        
        print(f"üìÑ –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = RegressionTestRunner()
    
    try:
        runner.run_all_tests()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        critical_failures = [
            test_file for test_file, result in runner.results["tests"].items()
            if "P0" in test_file and result["status"] != "passed"
        ]
        
        if critical_failures:
            print(f"\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò!")
            print("–ú—ë—Ä–∂ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ P0 —Ç–µ—Å—Ç–æ–≤.")
            sys.exit(1)
        else:
            print(f"\n‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("–ú—ë—Ä–∂ —Ä–∞–∑—Ä–µ—à—ë–Ω.")
            sys.exit(0)
            
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()