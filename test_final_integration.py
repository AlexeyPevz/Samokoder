#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏
"""

import asyncio
import json
import time
import uuid
from datetime import datetime
from pathlib import Path
import httpx
import pytest
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BASE_URL = "http://localhost:8000"
TEST_USER_EMAIL = f"final_test_{uuid.uuid4().hex[:8]}@example.com"
TEST_USER_PASSWORD = "FinalTest123!"

class FinalIntegrationTest:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.session = httpx.AsyncClient(timeout=30.0)
        self.auth_token = None
        self.user_id = None
        self.project_id = None
        self.test_results = {}
    
    async def __aenter__(self):
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.session.aclose()
    
    def get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        return {
            "Authorization": f"Bearer {self.auth_token}",
            "Content-Type": "application/json"
        }
    
    async def test_health_endpoints(self) -> bool:
        """–¢–µ—Å—Ç health endpoints"""
        
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoints...")
        
        try:
            # –ë–∞–∑–æ–≤—ã–π health check
            response = await self.session.get(f"{self.base_url}/health")
            assert response.status_code == 200
            health_data = response.json()
            assert health_data["status"] == "healthy"
            print("‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π health check
            response = await self.session.get(f"{self.base_url}/health/detailed")
            assert response.status_code == 200
            detailed_data = response.json()
            assert "uptime_seconds" in detailed_data
            print("‚úÖ Detailed health check –ø—Ä–æ–π–¥–µ–Ω")
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            response = await self.session.get(f"{self.base_url}/metrics")
            assert response.status_code == 200
            metrics_text = response.text
            assert "api_requests_total" in metrics_text
            print("‚úÖ Metrics endpoint –ø—Ä–æ–π–¥–µ–Ω")
            
            self.test_results["health_endpoints"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Health endpoints —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["health_endpoints"] = False
            return False
    
    async def test_ai_service(self) -> bool:
        """–¢–µ—Å—Ç AI —Å–µ—Ä–≤–∏—Å–∞"""
        
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å...")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            response = await self.session.get(f"{self.base_url}/api/ai/providers")
            assert response.status_code == 200
            providers_data = response.json()
            assert "providers" in providers_data
            assert len(providers_data["providers"]) > 0
            print("‚úÖ AI providers endpoint –ø—Ä–æ–π–¥–µ–Ω")
            
            # Mock AI —á–∞—Ç (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π)
            response = await self.session.post(
                f"{self.base_url}/api/ai/chat",
                headers=self.get_headers(),
                json={
                    "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    "provider": "openrouter",
                    "model": "deepseek/deepseek-v3"
                }
            )
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π, –Ω–æ –Ω–µ 500
            assert response.status_code in [400, 401, 500]
            print("‚úÖ AI chat endpoint –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            self.test_results["ai_service"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå AI service —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["ai_service"] = False
            return False
    
    async def test_project_management(self) -> bool:
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
        
        print("üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏...")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            project_data = {
                "name": f"Final Test Project {datetime.now().strftime('%H%M%S')}",
                "description": "–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            }
            
            response = await self.session.post(
                f"{self.base_url}/api/projects",
                headers=self.get_headers(),
                json=project_data
            )
            assert response.status_code == 200
            project_response = response.json()
            assert project_response["status"] == "created"
            self.project_id = project_response["project_id"]
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            response = await self.session.get(
                f"{self.base_url}/api/projects/{self.project_id}",
                headers=self.get_headers()
            )
            assert response.status_code == 200
            project_info = response.json()
            assert project_info["project"]["name"] == project_data["name"]
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            response = await self.session.get(
                f"{self.base_url}/api/projects/{self.project_id}/files",
                headers=self.get_headers()
            )
            assert response.status_code == 200
            files_data = response.json()
            assert "files" in files_data
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–æ")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞
            response = await self.session.post(
                f"{self.base_url}/api/projects/{self.project_id}/export",
                headers=self.get_headers()
            )
            assert response.status_code == 200
            assert len(response.content) > 0
            print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω")
            
            self.test_results["project_management"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Project management —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["project_management"] = False
            return False
    
    async def test_monitoring_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        
        print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è
            initial_metrics = await self.session.get(f"{self.base_url}/metrics")
            initial_text = initial_metrics.text
            
            # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            for _ in range(5):
                await self.session.get(f"{self.base_url}/health")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            updated_metrics = await self.session.get(f"{self.base_url}/metrics")
            updated_text = updated_metrics.text
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö
            assert "api_requests_total" in updated_text
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            self.test_results["monitoring_integration"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Monitoring integration —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["monitoring_integration"] = False
            return False
    
    async def test_error_handling(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        
        print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
        
        try:
            # –¢–µ—Å—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            response = await self.session.get(f"{self.base_url}/api/projects")
            assert response.status_code == 401
            print("‚úÖ 401 –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            response = await self.session.get(f"{self.base_url}/api/nonexistent")
            assert response.status_code == 404
            print("‚úÖ 404 –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            response = await self.session.post(
                f"{self.base_url}/api/projects",
                headers=self.get_headers(),
                json={"invalid": "data"}
            )
            assert response.status_code == 400
            print("‚úÖ 400 –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            self.test_results["error_handling"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Error handling —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["error_handling"] = False
            return False
    
    async def test_performance(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        print("‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
        
        try:
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ health check
            start_time = time.time()
            response = await self.session.get(f"{self.base_url}/health")
            health_time = time.time() - start_time
            
            assert health_time < 1.0, f"Health check too slow: {health_time:.3f}s"
            print(f"‚úÖ Health check: {health_time:.3f}s")
            
            # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ API
            start_time = time.time()
            response = await self.session.get(f"{self.base_url}/api/ai/providers")
            api_time = time.time() - start_time
            
            assert api_time < 2.0, f"API too slow: {api_time:.3f}s"
            print(f"‚úÖ API response: {api_time:.3f}s")
            
            # –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            start_time = time.time()
            tasks = []
            for _ in range(10):
                task = self.session.get(f"{self.base_url}/health")
                tasks.append(task)
            
            responses = await asyncio.gather(*tasks)
            parallel_time = time.time() - start_time
            
            assert all(r.status_code == 200 for r in responses)
            assert parallel_time < 5.0, f"Parallel requests too slow: {parallel_time:.3f}s"
            print(f"‚úÖ Parallel requests: {parallel_time:.3f}s")
            
            self.test_results["performance"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå Performance —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            self.test_results["performance"] = False
            return False
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        print("=" * 60)
        
        # Mock –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        self.user_id = str(uuid.uuid4())
        self.auth_token = f"mock_token_{self.user_id}"
        
        tests = [
            ("Health Endpoints", self.test_health_endpoints),
            ("AI Service", self.test_ai_service),
            ("Project Management", self.test_project_management),
            ("Monitoring Integration", self.test_monitoring_integration),
            ("Error Handling", self.test_error_handling),
            ("Performance", self.test_performance),
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_func in tests:
            try:
                print(f"\nüîç {test_name}...")
                success = await test_func()
                if success:
                    passed += 1
                else:
                    failed += 1
            except Exception as e:
                print(f"‚ùå {test_name} - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
                failed += 1
        
        print("\n" + "=" * 60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed / (passed + failed) * 100):.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for test_name, result in self.test_results.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"  {status} {test_name}")
        
        return {
            "total_tests": passed + failed,
            "passed": passed,
            "failed": failed,
            "success_rate": (passed / (passed + failed) * 100) if (passed + failed) > 0 else 0,
            "details": self.test_results
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    async with FinalIntegrationTest(BASE_URL) as tester:
        results = await tester.run_all_tests()
        
        if results["failed"] == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        else:
            print(f"\n‚ö†Ô∏è {results['failed']} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        return results["failed"] == 0

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)