#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GPT-Pilot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ –∏ wrapper
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from backend.services.gpt_pilot_adapter import SamokoderGPTPilotAdapter
from backend.services.gpt_pilot_wrapper_v2 import SamokoderGPTPilot

async def test_gpt_pilot_adapter():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä GPT-Pilot"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ GPT-Pilot...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    project_id = "test_proj_001"
    user_id = "test_user"
    user_api_keys = {
        "openai": "sk-test-key",
        "openrouter": "sk-test-key"
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        adapter = SamokoderGPTPilotAdapter(project_id, user_id, user_api_keys)
        print("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...")
        result = await adapter.initialize_project("Test App", "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {result['status']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞...")
        status = adapter.get_project_status()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω: {status['status']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        print("üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤...")
        files = adapter.get_project_files()
        print(f"‚úÖ –§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(files)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏
        print("üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏...")
        message_count = 0
        async for update in adapter.chat_with_agents("–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"):
            message_count += 1
            print(f"   {update['type']}: {update['message']}")
            if message_count >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
                break
        
        print("‚úÖ –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        gen_count = 0
        async for update in adapter.generate_full_app():
            gen_count += 1
            print(f"   {update['type']}: {update['message']}")
            if gen_count >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
                break
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")
        return False

async def test_gpt_pilot_wrapper():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç wrapper GPT-Pilot"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ wrapper GPT-Pilot...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    project_id = "test_proj_002"
    user_id = "test_user"
    user_api_keys = {
        "openai": "sk-test-key",
        "openrouter": "sk-test-key"
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º wrapper
        wrapper = SamokoderGPTPilot(project_id, user_id, user_api_keys)
        print("‚úÖ Wrapper —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...")
        result = await wrapper.initialize_project("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "Test App")
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {result['status']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        is_init = wrapper.is_initialized()
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {is_init}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
        print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API...")
        api_config = wrapper.get_api_config()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –ø–æ–ª—É—á–µ–Ω–∞: {api_config['endpoint']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        agent_status = await wrapper.get_agent_status()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω: {agent_status['status']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏
        print("üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏...")
        message_count = 0
        async for update in wrapper.chat_with_agents("–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"):
            message_count += 1
            print(f"   {update['type']}: {update['message']}")
            if message_count >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
                break
        
        print("‚úÖ –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        gen_count = 0
        async for update in wrapper.generate_full_app():
            gen_count += 1
            print(f"   {update['type']}: {update['message']}")
            if gen_count >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
                break
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
        print("üßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        wrapper.cleanup()
        print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ wrapper: {e}")
        return False

async def test_integration_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    project_id = "test_proj_003"
    user_id = "test_user"
    user_api_keys = {
        "openai": "sk-test-key",
        "openrouter": "sk-test-key"
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º wrapper
        wrapper = SamokoderGPTPilot(project_id, user_id, user_api_keys)
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        print("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞...")
        result = await wrapper.initialize_project("–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "Full App")
        if result['status'] != 'initialized':
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {result}")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 2. –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏
        print("2Ô∏è‚É£ –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–∞–º–∏...")
        async for update in wrapper.chat_with_agents("–°–æ–∑–¥–∞–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"):
            if update['type'] == 'completion':
                print("‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
                break
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        async for update in wrapper.generate_full_app():
            if update['type'] == 'completion':
                print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                break
        
        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        print("4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
        files = wrapper.get_project_files()
        print(f"‚úÖ –§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(files)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        print("5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")
        status = wrapper.get_project_status()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω: {status['status']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–æ—Ç–æ–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GPT-Pilot")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ê–¥–∞–ø—Ç–µ—Ä
    adapter_success = await test_gpt_pilot_adapter()
    
    # –¢–µ—Å—Ç 2: Wrapper
    wrapper_success = await test_gpt_pilot_wrapper()
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫
    flow_success = await test_integration_flow()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  - –ê–¥–∞–ø—Ç–µ—Ä: {'‚úÖ' if adapter_success else '‚ùå'}")
    print(f"  - Wrapper: {'‚úÖ' if wrapper_success else '‚ùå'}")
    print(f"  - –ü–æ—Ç–æ–∫: {'‚úÖ' if flow_success else '‚ùå'}")
    
    if adapter_success and wrapper_success and flow_success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ GPT-Pilot –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        return True
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)