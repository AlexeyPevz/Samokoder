#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è comprehensive –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –°–∞–º–æ–∫–æ–¥–µ—Ä
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –±–∞–≥–∏, –ø—Ä–æ–±–ª–µ–º—ã –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
"""

import asyncio
import sys
import os
import json
import requests
import subprocess
import time
import importlib.util
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

class FinalComprehensiveTester:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π comprehensive —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.results = {}
        self.base_url = "http://localhost:8000"
        self.server_process = None
        self.errors = []
        self.warnings = []
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø COMPREHENSIVE –ü–†–û–í–ï–†–ö–ê –ü–†–û–ï–ö–¢–ê –°–ê–ú–û–ö–û–î–ï–†")
        print("=" * 70)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        await self.test_project_structure()
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        await self.test_dependencies()
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await self.test_configuration()
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        await self.test_imports()
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python
        await self.test_python_syntax()
        
        # 6. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
        await self.test_api_endpoints()
        
        # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPT-Pilot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        await self.test_gpt_pilot_integration()
        
        # 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        await self.test_file_system()
        
        # 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await self.test_security()
        
        # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await self.test_performance()
        
        # 11. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        await self.generate_report()
        
        return self.results
    
    async def test_project_structure(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        required_files = [
            "backend/main.py",
            "backend/services/gpt_pilot_wrapper_v2.py",
            "backend/services/gpt_pilot_simple_adapter.py",
            "backend/auth/dependencies.py",
            "config/settings.py",
            "requirements.txt",
            ".env",
            "database/schema.sql",
            "database/init_data.sql"
        ]
        
        required_dirs = [
            "backend",
            "backend/services",
            "backend/auth",
            "config",
            "database",
            "samokoder-core"
        ]
        
        missing_files = []
        missing_dirs = []
        
        for file_path in required_files:
            if not Path(file_path).exists():
                missing_files.append(file_path)
        
        for dir_path in required_dirs:
            if not Path(dir_path).exists():
                missing_dirs.append(dir_path)
        
        if missing_files or missing_dirs:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {missing_dirs}")
            self.results['project_structure'] = False
            self.errors.extend(missing_files + missing_dirs)
        else:
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            self.results['project_structure'] = True
    
    async def test_dependencies(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            with open("requirements.txt", "r") as f:
                lines = f.readlines()
            
            packages = []
            duplicates = []
            
            for line in lines:
                line = line.strip()
                if line and not line.startswith("#"):
                    package = line.split("==")[0].split(">=")[0].split("<=")[0]
                    if package in packages:
                        duplicates.append(package)
                    packages.append(package)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π
            version_conflicts = []
            for line in lines:
                line = line.strip()
                if line and not line.startswith("#"):
                    if ">=" in line and "<=" in line:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π
                        parts = line.split(">=")[1].split("<=")
                        if len(parts) == 2:
                            min_ver = parts[0].strip()
                            max_ver = parts[1].strip()
                            if min_ver >= max_ver:
                                version_conflicts.append(line)
            
            if duplicates or version_conflicts:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {duplicates}")
                print(f"‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π: {version_conflicts}")
                self.results['dependencies'] = False
                self.errors.extend(duplicates + version_conflicts)
            else:
                print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                self.results['dependencies'] = True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            self.results['dependencies'] = False
            self.errors.append(f"Dependencies error: {e}")
    
    async def test_configuration(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
            with open(".env", "r") as f:
                env_content = f.read()
            
            required_vars = [
                "SUPABASE_URL",
                "SUPABASE_ANON_KEY",
                "SUPABASE_SERVICE_ROLE_KEY",
                "API_ENCRYPTION_KEY",
                "CORS_ORIGINS"
            ]
            
            missing_vars = []
            placeholder_vars = []
            
            for var in required_vars:
                if f"{var}=" not in env_content:
                    missing_vars.append(var)
                elif f"{var}=your_" in env_content or f"{var}=your-" in env_content:
                    placeholder_vars.append(var)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç CORS_ORIGINS
            cors_format_ok = 'CORS_ORIGINS=["' in env_content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–ª—é—á–µ–π
            key_length_issues = []
            if "API_ENCRYPTION_KEY=" in env_content:
                key_line = [line for line in env_content.split('\n') if line.startswith('API_ENCRYPTION_KEY=')][0]
                key_value = key_line.split('=')[1]
                if len(key_value) < 32:
                    key_length_issues.append("API_ENCRYPTION_KEY too short")
            
            if missing_vars or placeholder_vars or not cors_format_ok or key_length_issues:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
                print(f"‚ö†Ô∏è Placeholder –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {placeholder_vars}")
                if not cors_format_ok:
                    print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CORS_ORIGINS")
                if key_length_issues:
                    print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–ª—é—á–∞–º–∏: {key_length_issues}")
                self.results['configuration'] = False
                self.errors.extend(missing_vars + placeholder_vars + key_length_issues)
            else:
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                self.results['configuration'] = True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.results['configuration'] = False
            self.errors.append(f"Configuration error: {e}")
    
    async def test_imports(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã"""
        print("\nüì• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        test_files = [
            "backend/main.py",
            "backend/services/gpt_pilot_wrapper_v2.py",
            "backend/services/gpt_pilot_simple_adapter.py",
            "backend/auth/dependencies.py",
            "config/settings.py"
        ]
        
        import_errors = []
        
        for file_path in test_files:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
                spec = importlib.util.spec_from_file_location("test_module", file_path)
                if spec and spec.loader:
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)
            except Exception as e:
                import_errors.append(f"{file_path}: {str(e)}")
        
        if import_errors:
            print(f"‚ùå –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞: {import_errors}")
            self.results['imports'] = False
            self.errors.extend(import_errors)
        else:
            print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            self.results['imports'] = True
    
    async def test_python_syntax(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python"""
        print("\nüêç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python...")
        
        python_files = [
            "backend/main.py",
            "backend/services/gpt_pilot_wrapper_v2.py",
            "backend/services/gpt_pilot_simple_adapter.py",
            "backend/auth/dependencies.py",
            "config/settings.py"
        ]
        
        syntax_errors = []
        
        for file_path in python_files:
            try:
                with open(file_path, 'r') as f:
                    compile(f.read(), file_path, 'exec')
            except SyntaxError as e:
                syntax_errors.append(f"{file_path}: {e}")
            except Exception as e:
                syntax_errors.append(f"{file_path}: {e}")
        
        if syntax_errors:
            print(f"‚ùå –û—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {syntax_errors}")
            self.results['python_syntax'] = False
            self.errors.extend(syntax_errors)
        else:
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            self.results['python_syntax'] = True
    
    async def test_api_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —ç–Ω–¥–ø–æ–π–Ω—Ç—ã"""
        print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–π–Ω—Ç–æ–≤...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            await self.start_server()
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            await asyncio.sleep(3)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–π–Ω—Ç—ã
            endpoints = [
                ("/", "GET"),
                ("/health", "GET"),
                ("/api/info", "GET"),
                ("/docs", "GET")
            ]
            
            endpoint_results = []
            
            for endpoint, method in endpoints:
                try:
                    if method == "GET":
                        response = requests.get(f"{self.base_url}{endpoint}", timeout=5)
                        if response.status_code == 200:
                            endpoint_results.append(True)
                        else:
                            endpoint_results.append(False)
                            self.warnings.append(f"Endpoint {endpoint} returned {response.status_code}")
                except Exception as e:
                    endpoint_results.append(False)
                    self.errors.append(f"Endpoint {endpoint} error: {e}")
            
            if all(endpoint_results):
                print("‚úÖ API —ç–Ω–¥–ø–æ–π–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
                self.results['api_endpoints'] = True
            else:
                print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API —ç–Ω–¥–ø–æ–π–Ω—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
                self.results['api_endpoints'] = False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
            self.results['api_endpoints'] = False
            self.errors.append(f"API test error: {e}")
        finally:
            await self.stop_server()
    
    async def test_gpt_pilot_integration(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å GPT-Pilot"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GPT-Pilot...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            from backend.services.gpt_pilot_simple_adapter import SamokoderGPTPilotSimpleAdapter
            from backend.services.gpt_pilot_wrapper_v2 import SamokoderGPTPilot
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            project_id = "test_final_comprehensive"
            user_id = "test_user"
            user_api_keys = {"openai": "sk-test-key"}
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
            adapter = SamokoderGPTPilotSimpleAdapter(project_id, user_id, user_api_keys)
            result = await adapter.initialize_project("Test App", "Test Description")
            
            if result['status'] == 'initialized':
                print("‚úÖ GPT-Pilot –∞–¥–∞–ø—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                adapter_ok = True
            else:
                print("‚ùå GPT-Pilot –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                adapter_ok = False
                self.errors.append(f"GPT-Pilot adapter error: {result}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º wrapper
            wrapper = SamokoderGPTPilot(project_id, user_id, user_api_keys)
            result = await wrapper.initialize_project("Test App", "Test Description")
            
            if result['status'] == 'initialized':
                print("‚úÖ GPT-Pilot wrapper —Ä–∞–±–æ—Ç–∞–µ—Ç")
                wrapper_ok = True
            else:
                print("‚ùå GPT-Pilot wrapper –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                wrapper_ok = False
                self.errors.append(f"GPT-Pilot wrapper error: {result}")
            
            self.results['gpt_pilot_integration'] = adapter_ok and wrapper_ok
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPT-Pilot: {e}")
            self.results['gpt_pilot_integration'] = False
            self.errors.append(f"GPT-Pilot integration error: {e}")
    
    async def test_file_system(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"""
        print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            test_dirs = ["exports", "workspaces", "workspaces/test_user"]
            
            for dir_path in test_dirs:
                Path(dir_path).mkdir(parents=True, exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            test_file = Path("workspaces/test_user/test_file.txt")
            test_content = "test content for comprehensive testing"
            test_file.write_text(test_content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            read_content = test_file.read_text()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            file_permissions = oct(test_file.stat().st_mode)[-3:]
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            test_file.unlink()
            
            if read_content == test_content and file_permissions:
                print("‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.results['file_system'] = True
            else:
                print("‚ùå –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.results['file_system'] = False
                self.errors.append("File system test failed")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            self.results['file_system'] = False
            self.errors.append(f"File system error: {e}")
    
    async def test_security(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
        print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_files = [
                "backend/services/encryption.py",
                "backend/auth/dependencies.py"
            ]
            
            security_ok = True
            
            for file_path in security_files:
                if not Path(file_path).exists():
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {file_path}")
                    security_ok = False
                    self.errors.append(f"Missing security file: {file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ .env
            with open(".env", "r") as f:
                env_content = f.read()
            
            security_issues = []
            
            if "your-secret-key-here" in env_content:
                security_issues.append("Placeholder SECRET_KEY")
            
            if "your_supabase_url_here" in env_content:
                security_issues.append("Placeholder Supabase URL")
            
            if "your_32_character_encryption_key_here" in env_content:
                security_issues.append("Placeholder encryption key")
            
            if security_issues:
                print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_issues}")
                self.warnings.extend(security_issues)
                security_ok = False
            
            if security_ok:
                print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                self.results['security'] = True
            else:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é")
                self.results['security'] = False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            self.results['security'] = False
            self.errors.append(f"Security error: {e}")
    
    async def test_performance(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            start_time = time.time()
            
            from backend.services.gpt_pilot_simple_adapter import SamokoderGPTPilotSimpleAdapter
            adapter = SamokoderGPTPilotSimpleAdapter("perf_test", "test_user", {"openai": "sk-test"})
            
            init_time = time.time() - start_time
            
            if init_time < 1.0:  # –î–æ–ª–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ —Å–µ–∫—É–Ω–¥—É
                print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö–æ—Ä–æ—à–∞—è")
                self.results['performance'] = True
            else:
                print(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {init_time:.2f}s")
                self.warnings.append(f"Slow initialization: {init_time:.2f}s")
                self.results['performance'] = False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.results['performance'] = False
            self.errors.append(f"Performance error: {e}")
    
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä"""
        try:
            cmd = ["bash", "-c", "source venv/bin/activate && python test_server.py"]
            self.server_process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def stop_server(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        if self.server_process:
            self.server_process.terminate()
            self.server_process.wait()
    
    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê...")
        print("=" * 50)
        
        total_tests = len(self.results)
        passed_tests = sum(1 for result in self.results.values() if result)
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests)*100:.1f}%")
        
        print(f"\n–û—à–∏–±–∫–∏: {len(self.errors)}")
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(self.warnings)}")
        
        print("\n–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for test_name, result in self.results.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"  {status} {test_name}")
        
        if self.errors:
            print("\n‚ùå –û—à–∏–±–∫–∏:")
            for error in self.errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                print(f"  - {error}")
            if len(self.errors) > 10:
                print(f"  ... –∏ –µ—â–µ {len(self.errors) - 10} –æ—à–∏–±–æ–∫")
        
        if self.warnings:
            print("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in self.warnings[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                print(f"  - {warning}")
            if len(self.warnings) > 10:
                print(f"  ... –∏ –µ—â–µ {len(self.warnings) - 10} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if passed_tests == total_tests and len(self.errors) == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        elif passed_tests >= total_tests * 0.8 and len(self.errors) <= 2:
            print("\n‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–®–õ–û")
            print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        else:
            print("\n‚ùå –ú–ù–û–ì–û –¢–ï–°–¢–û–í –ù–ï –ü–†–û–®–õ–û")
            print("üö® –¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FinalComprehensiveTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())