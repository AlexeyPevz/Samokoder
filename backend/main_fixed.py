from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks, Request
from fastapi.responses import StreamingResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
from supabase import create_client, Client
import asyncio
import json
import os
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import logging

from config.settings import settings
from backend.services.gpt_pilot_wrapper_fixed import SamokoderGPTPilot
from backend.auth.dependencies import get_current_user

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Samokoder Backend API",
    description="AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è full-stack –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Supabase –∫–ª–∏–µ–Ω—Ç
supabase: Client = create_client(
    settings.supabase_url, 
    settings.supabase_anon_key
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
active_projects: Dict[str, SamokoderGPTPilot] = {}

# === –ë–ê–ó–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ===

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "üöÄ Samokoder Backend API",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs"
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
        supabase.table("profiles").select("id").limit(1).execute()
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "active_projects": len(active_projects),
            "database": "connected"
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy",
            "timestamp": datetime.now().isoformat(),
            "active_projects": len(active_projects),
            "database": "disconnected",
            "error": str(e)
        }

# === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===

@app.post("/api/auth/login")
async def login(credentials: dict):
    """–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Supabase Auth"""
    try:
        if not credentials.get("email") or not credentials.get("password"):
            raise HTTPException(status_code=400, detail="Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        
        response = supabase.auth.sign_in_with_password({
            "email": credentials["email"],
            "password": credentials["password"]
        })
        
        if response.user:
            logger.info(f"User {response.user.email} logged in successfully")
            return {
                "message": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
                "user": response.user,
                "session": response.session
            }
        else:
            raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
    except Exception as e:
        logger.error(f"Login error: {e}")
        raise HTTPException(status_code=401, detail=f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")

@app.post("/api/auth/logout")
async def logout(current_user: dict = Depends(get_current_user)):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        supabase.auth.sign_out()
        logger.info(f"User {current_user.get('email')} logged out")
        return {"message": "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥"}
    except Exception as e:
        logger.error(f"Logout error: {e}")
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {str(e)}")

@app.get("/api/auth/user")
async def get_current_user_info(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return {
        "user": current_user,
        "timestamp": datetime.now().isoformat()
    }

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê–ú–ò ===

@app.get("/api/projects")
async def get_projects(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = supabase.table("projects").select("*").eq("user_id", current_user["id"]).order("created_at", desc=True).execute()
        
        if not response.data:
            return {
                "projects": [],
                "total_count": 0
            }
        
        return {
            "projects": response.data,
            "total_count": len(response.data)
        }
    except Exception as e:
        logger.error(f"Error getting projects: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}")

@app.post("/api/projects")
async def create_project(
    project_data: dict,
    current_user: dict = Depends(get_current_user),
    background_tasks: BackgroundTasks = None
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not project_data.get("name") or not project_data.get("description"):
        raise HTTPException(status_code=400, detail="–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
    
    project_id = str(uuid.uuid4())
    user_id = current_user["id"]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keys_response = supabase.table("user_api_keys").select("*").eq("user_id", user_id).eq("is_active", True).execute()
        user_api_keys = {
            row['provider']: row['api_key_decrypted'] 
            for row in user_keys_response.data
        } if user_keys_response.data else {}
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É GPT-Pilot
        pilot_wrapper = SamokoderGPTPilot(project_id, user_id, user_api_keys)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
        init_result = await pilot_wrapper.initialize_project(
            app_description=project_data["description"],
            app_name=project_data["name"]
        )
        
        if init_result["status"] == "error":
            raise HTTPException(status_code=400, detail=init_result["message"])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        project_record = {
            "id": project_id,
            "user_id": user_id,
            "name": project_data["name"],
            "description": project_data["description"], 
            "status": "created",
            "created_at": datetime.now().isoformat()
        }
        
        supabase.table("projects").insert(project_record).execute()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        active_projects[project_id] = pilot_wrapper
        
        logger.info(f"Project {project_id} created successfully for user {user_id}")
        
        return {
            "project_id": project_id,
            "status": "created",
            "message": "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "workspace": init_result["workspace"]
        }
        
    except Exception as e:
        logger.error(f"Error creating project: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

@app.get("/api/projects/{project_id}")
async def get_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    try:
        response = supabase.table("projects").select("*").eq("id", project_id).eq("user_id", current_user["id"]).single().execute()
        
        if not response.data:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {
            "project": response.data,
            "is_active": project_id in active_projects
        }
        
    except Exception as e:
        logger.error(f"Error getting project {project_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

@app.delete("/api/projects/{project_id}")
async def delete_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"""
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        project_response = supabase.table("projects").select("*").eq("id", project_id).eq("user_id", current_user["id"]).single().execute()
        
        if not project_response.data:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        if project_id in active_projects:
            del active_projects[project_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
        supabase.table("projects").delete().eq("id", project_id).execute()
        
        logger.info(f"Project {project_id} deleted successfully")
        
        return {"message": "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}
        
    except Exception as e:
        logger.error(f"Error deleting project {project_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

# === –ß–ê–¢ –ò –ì–ï–ù–ï–†–ê–¶–ò–Ø ===

@app.post("/api/projects/{project_id}/chat")
async def chat_with_project(
    project_id: str,
    chat_data: dict,
    current_user: dict = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not chat_data.get("message"):
        raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    
    if project_id not in active_projects:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–∞–∑—ã –µ—Å–ª–∏ –Ω–µ –≤ –ø–∞–º—è—Ç–∏
        await load_project_to_memory(project_id, current_user["id"])
    
    if project_id not in active_projects:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    pilot_wrapper = active_projects[project_id]
    
    async def stream_response():
        try:
            async for update in pilot_wrapper.chat_with_agents(
                message=chat_data["message"],
                context=chat_data.get("context", "chat")
            ):
                yield f"data: {json.dumps(update)}\n\n"
        except Exception as e:
            logger.error(f"Error in chat stream: {e}")
            yield f"data: {json.dumps({'type': 'error', 'message': str(e)})}\n\n"
    
    return StreamingResponse(
        stream_response(),
        media_type="text/plain",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
        }
    )

@app.post("/api/projects/{project_id}/generate")
async def generate_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    if project_id not in active_projects:
        await load_project_to_memory(project_id, current_user["id"])
    
    if project_id not in active_projects:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    pilot_wrapper = active_projects[project_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    try:
        supabase.table("projects").update({
            "status": "generating",
            "updated_at": datetime.now().isoformat()
        }).eq("id", project_id).execute()
    except Exception as e:
        logger.error(f"Error updating project status: {e}")
    
    async def stream_generation():
        try:
            async for update in pilot_wrapper.generate_full_app():
                yield f"data: {json.dumps(update)}\n\n"
                
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            supabase.table("projects").update({
                "status": "completed",
                "updated_at": datetime.now().isoformat()
            }).eq("id", project_id).execute()
            
        except Exception as e:
            logger.error(f"Error in generation stream: {e}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                supabase.table("projects").update({
                    "status": "error",
                    "updated_at": datetime.now().isoformat()
                }).eq("id", project_id).execute()
            except Exception as update_error:
                logger.error(f"Error updating project status on error: {update_error}")
            
            yield f"data: {json.dumps({'type': 'error', 'message': str(e)})}\n\n"
    
    return StreamingResponse(
        stream_generation(),
        media_type="text/plain",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
        }
    )

# === –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê ===

@app.get("/api/projects/{project_id}/files")
async def get_project_files(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    if project_id not in active_projects:
        await load_project_to_memory(project_id, current_user["id"])
    
    if project_id not in active_projects:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    pilot_wrapper = active_projects[project_id]
    
    try:
        file_tree = pilot_wrapper.get_project_files()
        
        return {
            "project_id": project_id,
            "files": file_tree,
            "updated_at": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Error getting project files: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.get("/api/projects/{project_id}/files/{file_path:path}")
async def get_file_content(
    project_id: str,
    file_path: str, 
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    if project_id not in active_projects:
        await load_project_to_memory(project_id, current_user["id"])
    
    if project_id not in active_projects:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    pilot_wrapper = active_projects[project_id]
    
    try:
        content = pilot_wrapper.get_file_content(file_path)
        return {
            "file_path": file_path,
            "content": content,
            "size": len(content)
        }
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"Error getting file content: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

# === –≠–ö–°–ü–û–†–¢ ===

@app.post("/api/projects/{project_id}/export")
async def export_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ ZIP"""
    
    if project_id not in active_projects:
        await load_project_to_memory(project_id, current_user["id"])
    
    if project_id not in active_projects:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    pilot_wrapper = active_projects[project_id]
    
    try:
        zip_path = pilot_wrapper.create_zip_export()
        
        logger.info(f"Project {project_id} exported successfully")
        
        return FileResponse(
            zip_path,
            media_type="application/zip",
            filename=f"samokoder_project_{project_id}.zip"
        )
    except Exception as e:
        logger.error(f"Error exporting project: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def load_project_to_memory(project_id: str, user_id: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ –ø–∞–º—è—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_response = supabase.table("projects").select("*").eq("id", project_id).eq("user_id", user_id).single().execute()
        
        if not project_response.data:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        project_data = project_response.data
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keys_response = supabase.table("user_api_keys").select("*").eq("user_id", user_id).eq("is_active", True).execute()
        user_api_keys = {
            row['provider']: row['api_key_decrypted']
            for row in user_keys_response.data
        } if user_keys_response.data else {}
        
        # –°–æ–∑–¥–∞–µ–º wrapper
        pilot_wrapper = SamokoderGPTPilot(project_id, user_id, user_api_keys)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if project_data['status'] != 'created':
            await pilot_wrapper.restore_from_workspace()
        
        active_projects[project_id] = pilot_wrapper
        
        logger.info(f"Project {project_id} loaded to memory successfully")
        
    except Exception as e:
        logger.error(f"Error loading project to memory: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

# === MIDDLEWARE –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===

@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = datetime.now()
    
    response = await call_next(request)
    
    process_time = (datetime.now() - start_time).total_seconds()
    
    logger.info(
        f"{request.method} {request.url.path} - "
        f"Status: {response.status_code} - "
        f"Time: {process_time:.3f}s"
    )
    
    return response

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "backend.main_fixed:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug
    )