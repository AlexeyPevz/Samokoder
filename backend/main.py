from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks, Request, Query
from fastapi.responses import StreamingResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
import json
import uuid
from datetime import datetime
from typing import Dict, Optional

from config.settings import settings
from backend.services.gpt_pilot_wrapper_v2 import SamokoderGPTPilot
from backend.services.ai_service import get_ai_service
from backend.auth.dependencies import get_current_user
from backend.monitoring import monitoring, monitoring_middleware, get_metrics_response
from backend.models.requests import LoginRequest, ChatRequest
from backend.services.connection_manager import connection_manager
from backend.services.supabase_manager import supabase_manager, execute_supabase_operation
from backend.services.project_state_manager import project_state_manager, get_active_project, add_active_project, remove_active_project, is_project_active
from backend.core.exceptions import (
    SamokoderException, AuthenticationError, AuthorizationError, ValidationError,
    NotFoundError, ConflictError, RateLimitError, AIServiceError, DatabaseError,
    ExternalServiceError, ConfigurationError, ConnectionError, TimeoutError,
    EncryptionError, ProjectError, FileSystemError, NetworkError, CacheError,
    MonitoringError
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –∏–∑ monitoring
from backend.monitoring import logger

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Samokoder Backend API",
    description="AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è full-stack –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)


# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# –°—Ç—Ä–æ–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
allowed_origins = [
    "https://samokoder.com",
    "https://app.samokoder.com",
    "https://staging.samokoder.com"
]

# –í development –¥–æ–±–∞–≤–ª—è–µ–º localhost
if settings.environment == "development":
    allowed_origins.extend([
        "http://localhost:3000",
        "http://localhost:5173",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:5173"
    ])

app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,  # –¢–æ–ª—å–∫–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_methods=["GET", "POST", "PUT", "DELETE"],  # –£–±–∏—Ä–∞–µ–º OPTIONS
    allow_headers=[
        "Authorization",
        "Content-Type", 
        "X-CSRF-Token",
        "X-Requested-With"
    ],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    allow_credentials=True,
    max_age=3600,  # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
)

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ middleware
app.middleware("http")(monitoring_middleware)

# Rate Limiting middleware
from backend.middleware.rate_limit_middleware import rate_limit_middleware
app.middleware("http")(rate_limit_middleware)

# Validation middleware
from backend.middleware.validation_middleware import validation_middleware
app.middleware("http")(validation_middleware)

# Error handlers
from backend.middleware.specific_error_handler import setup_specific_error_handlers
setup_specific_error_handlers(app)

# Security headers middleware
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    response = await call_next(request)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
    response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
    response.headers["Content-Security-Policy"] = "default-src 'self'"
    
    return response

# CSRF protection middleware
@app.middleware("http")
async def csrf_protect(request: Request, call_next):
    """CSRF –∑–∞—â–∏—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω—è—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º GET –∑–∞–ø—Ä–æ—Å—ã –∏ preflight
    if request.method in ["GET", "HEAD", "OPTIONS"]:
        return await call_next(request)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF —Ç–æ–∫–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω—è—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    csrf_token = request.headers.get("X-CSRF-Token")
    if not csrf_token:
        from fastapi.responses import JSONResponse
        return JSONResponse(
            status_code=403,
            content={"error": "CSRF token missing"}
        )
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º CSRF —Ç–æ–∫–µ–Ω (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
    if not validate_csrf_token(csrf_token):
        from fastapi.responses import JSONResponse
        return JSONResponse(
            status_code=403,
            content={"error": "Invalid CSRF token"}
        )
    
    return await call_next(request)

def validate_csrf_token(token: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è CSRF —Ç–æ–∫–µ–Ω–∞"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
    return len(token) > 10

# Supabase –∫–ª–∏–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ connection_manager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Project State Manager –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        await connection_manager.initialize()
        await project_state_manager.initialize()
        logger.info("All managers initialized")
    except ConfigurationError as e:
        logger.error("configuration_error_during_initialization", error=str(e), error_type=type(e).__name__)
        raise
    except ConnectionError as e:
        logger.error("connection_error_during_initialization", error=str(e), error_type=type(e).__name__)
        raise
    except Exception as e:
        logger.error("unexpected_error_during_initialization", error=str(e), error_type=type(e).__name__)
        raise ConfigurationError(f"Failed to initialize managers: {e}")

# === –ë–ê–ó–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ===

@app.options("/{path:path}")
async def options_handler(path: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤.
    
    Args:
        path: –ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        Response: CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è preflight –∑–∞–ø—Ä–æ—Å–∞
    """
    from fastapi.responses import Response
    return Response(
        status_code=200,
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Credentials": "true"
        }
    )


@app.get("/")
async def root():
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç API.
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–µ
    """
    return {
        "message": "üöÄ Samokoder Backend API",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs"
    }

@app.get("/health", responses={500: {"description": "Internal server error"}})
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞.
    
    Returns:
        dict: –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        return monitoring.get_health_status()
    except MonitoringError as e:
        logger.error("monitoring_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=503, detail="Monitoring service unavailable")
    except Exception as e:
        logger.error("health_check_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail="Health check failed")

@app.get("/metrics")
async def metrics():
    """
    Prometheus –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        Response: –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus
    """
    return get_metrics_response()

@app.get("/health/detailed")
async def detailed_health_check():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    from backend.services.health_checker import health_checker
    
    health_status = monitoring.get_health_status()
    external_services = await health_checker.check_all_services()
    
    return {
        **health_status,
        "external_services": external_services,
        "active_projects": await project_state_manager.get_stats()["total_projects"],
        "memory_usage": {"used": 0, "total": 0, "percentage": 0},  # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        "disk_usage": {"used": 0, "total": 0, "percentage": 0}  # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    }

# === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===

@app.post("/api/auth/login")
async def login(credentials: LoginRequest):
    """–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Supabase Auth (–∏–ª–∏ mock –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        # Pydantic –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 422 –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        email = credentials.email
        password = credentials.password
        
        # –ï—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç example, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        supabase_client = supabase_manager.get_client("anon")
        if not supabase_client or settings.supabase_url.endswith("example.supabase.co"):
            logger.warning("supabase_unavailable", fallback="mock_auth")
            return {
                "success": True,
                "message": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (mock —Ä–µ–∂–∏–º)",
                "user": {
                    "id": f"mock_user_{email}",
                    "email": email,
                    "subscription_tier": "free",
                    "subscription_status": "active",
                    "api_credits_balance": 100.50,
                    "created_at": "2025-01-01T00:00:00Z",
                    "updated_at": "2025-01-01T00:00:00Z"
                },
                "access_token": f"mock_token_{email}",
                "token_type": "bearer",
                "expires_in": 3600
            }
        
        response = supabase_client.auth.sign_in_with_password({
            "email": email,
            "password": password
        })
        
        if response.user:
            logger.info("user_login_success", user_email=response.user.email)
            return {
                "success": True,
                "message": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
                "user": {
                    "id": response.user.id,
                    "email": response.user.email,
                    "subscription_tier": "free",
                    "subscription_status": "active",
                    "api_credits_balance": 100.50,
                    "created_at": response.user.created_at,
                    "updated_at": response.user.updated_at
                },
                "access_token": response.session.access_token,
                "token_type": "bearer",
                "expires_in": 3600
            }
        else:
            raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
    except HTTPException:
        raise
    except AuthenticationError as e:
        logger.error("authentication_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=401, detail="Authentication failed")
    except DatabaseError as e:
        logger.error("database_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=503, detail="Database unavailable")
    except Exception as e:
        logger.error("login_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=401, detail="Login failed")

@app.post("/api/auth/register")
async def register(user_data: dict):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not user_data:
            raise HTTPException(status_code=400, detail="–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        
        email = user_data.get("email")
        password = user_data.get("password")
        full_name = user_data.get("full_name")
        
        if not email or not password or not full_name:
            raise HTTPException(status_code=400, detail="Email, –ø–∞—Ä–æ–ª—å –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        
        if not isinstance(email, str) or not isinstance(password, str) or not isinstance(full_name, str):
            raise HTTPException(status_code=400, detail="–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏")
        
        if not email.strip() or not password.strip() or not full_name.strip():
            raise HTTPException(status_code=400, detail="–ü–æ–ª—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        
        # –ï—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç example, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        supabase_client = supabase_manager.get_client("anon")
        if not supabase_client or settings.supabase_url.endswith("example.supabase.co"):
            logger.warning("supabase_unavailable", fallback="mock_register")
            return {
                "success": True,
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (mock —Ä–µ–∂–∏–º)",
                "user_id": f"mock_user_{email}",
                "email": email
            }
        
        # –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase
        response = supabase_client.auth.sign_up({
            "email": email,
            "password": password,
            "options": {
                "data": {
                    "full_name": full_name
                }
            }
        })
        
        if response.user:
            logger.info("user_register_success", user_email=email)
            return {
                "success": True,
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                "user_id": response.user.id,
                "email": email
            }
        else:
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error("register_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")

@app.post("/api/auth/logout")
async def logout(current_user: dict = Depends(get_current_user)):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        supabase_client = supabase_manager.get_client("anon")
        if supabase_client:
            supabase_client.auth.sign_out()
        logger.info("user_logout_success", user_email=current_user.get('email'))
        return {"message": "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥"}
    except Exception as e:
        logger.error("logout_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {str(e)}")

@app.get("/api/auth/user")
async def get_current_user_info(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return {
        "user": current_user,
        "timestamp": datetime.now().isoformat()
    }

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê–ú–ò ===

# GET /api/projects - moved to projects router

# POST /api/projects - moved to projects router

# GET /api/projects/{project_id} - moved to projects router

# DELETE /api/projects/{project_id} - moved to projects router

# === –ß–ê–¢ –ò –ì–ï–ù–ï–†–ê–¶–ò–Ø ===
# All project endpoints moved to projects router

# @app.post("/api/projects/{project_id}/chat")
# async def chat_with_project(
    project_id: str,
    chat_data: dict,
    current_user: dict = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not chat_data.get("message"):
        raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    
    pilot_wrapper = await get_active_project(project_id, current_user["id"])
    if not pilot_wrapper:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–∞–∑—ã –µ—Å–ª–∏ –Ω–µ –≤ –ø–∞–º—è—Ç–∏
        await load_project_to_memory(project_id, current_user["id"])
        pilot_wrapper = await get_active_project(project_id, current_user["id"])
    
    if not pilot_wrapper:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    async def stream_response():
        try:
            async for update in pilot_wrapper.chat_with_agents(
                message=chat_data["message"],
                context=chat_data.get("context", "chat")
            ):
                yield f"data: {json.dumps(update)}\n\n"
        except Exception as e:
            logger.error("chat_stream_error", error=str(e), error_type=type(e).__name__)
            yield f"data: {json.dumps({'type': 'error', 'message': str(e)})}\n\n"
        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            pass
    
    return StreamingResponse(
        stream_response(),
        media_type="text/plain",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
        }
    )

# @app.post("/api/projects/{project_id}/generate")
# async def generate_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    pilot_wrapper = await get_active_project(project_id, current_user["id"])
    if not pilot_wrapper:
        await load_project_to_memory(project_id, current_user["id"])
        pilot_wrapper = await get_active_project(project_id, current_user["id"])
    
    if not pilot_wrapper:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    try:
        await execute_supabase_operation(
            lambda client: client.table("projects").update({
                "status": "generating",
                "updated_at": datetime.now().isoformat()
            }).eq("id", project_id).execute(),
            "anon"
        )
    except Exception as e:
        logger.error("update_project_status_error", error=str(e), error_type=type(e).__name__)
    
    async def stream_generation():
        try:
            async for update in pilot_wrapper.generate_full_app():
                yield f"data: {json.dumps(update)}\n\n"
                
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await execute_supabase_operation(
                lambda client: client.table("projects").update({
                    "status": "completed",
                    "updated_at": datetime.now().isoformat()
                }).eq("id", project_id).execute(),
                "anon"
            )
            
        except Exception as e:
            logger.error("generation_stream_error", error=str(e), error_type=type(e).__name__)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                await execute_supabase_operation(
                    lambda client: client.table("projects").update({
                        "status": "error",
                        "updated_at": datetime.now().isoformat()
                    }).eq("id", project_id).execute(),
                    "anon"
                )
            except Exception as update_error:
                logger.error("update_project_status_on_error", error=str(update_error), error_type=type(update_error).__name__)
            
            yield f"data: {json.dumps({'type': 'error', 'message': str(e)})}\n\n"
        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            pass
    
    return StreamingResponse(
        stream_generation(),
        media_type="text/plain",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
        }
    )

# === –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê ===

# @app.get("/api/projects/{project_id}/files")
# async def get_project_files(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    pilot_wrapper = await get_active_project(project_id, current_user["id"])
    if not pilot_wrapper:
        await load_project_to_memory(project_id, current_user["id"])
        pilot_wrapper = await get_active_project(project_id, current_user["id"])
    
    if not pilot_wrapper:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    try:
        file_tree = await pilot_wrapper.get_project_files()
        
        return {
            "project_id": project_id,
            "files": file_tree,
            "updated_at": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error("get_project_files_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")

# @app.get("/api/projects/{project_id}/files/{file_path:path}")
# async def get_file_content(
    project_id: str,
    file_path: str, 
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    pilot_wrapper = await get_active_project(project_id, current_user["id"])
    if not pilot_wrapper:
        await load_project_to_memory(project_id, current_user["id"])
        pilot_wrapper = await get_active_project(project_id, current_user["id"])
    
    if not pilot_wrapper:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    try:
        content = pilot_wrapper.get_file_content(file_path)
        return {
            "file_path": file_path,
            "content": content,
            "size": len(content)
        }
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="File not found")
    except FileSystemError as e:
        logger.error("filesystem_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail="File system error")
    except ProjectError as e:
        logger.error("project_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail="Project access error")
    except Exception as e:
        logger.error("get_file_content_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail="Failed to get file content")

# === –≠–ö–°–ü–û–†–¢ ===

# @app.post("/api/projects/{project_id}/export")
# async def export_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ ZIP"""
    
    pilot_wrapper = await get_active_project(project_id, current_user["id"])
    if not pilot_wrapper:
        await load_project_to_memory(project_id, current_user["id"])
        pilot_wrapper = await get_active_project(project_id, current_user["id"])
    
    if not pilot_wrapper:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    try:
        zip_path = pilot_wrapper.create_zip_export()
        
        logger.info("project_exported", project_id=project_id)
        
        return FileResponse(
            zip_path,
            media_type="application/zip",
            filename=f"samokoder_project_{project_id}.zip"
        )
    except FileSystemError as e:
        logger.error("filesystem_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail="File system error during export")
    except ProjectError as e:
        logger.error("project_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail="Project export error")
    except Exception as e:
        logger.error("export_project_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail="Export failed")

# === MFA ===

from backend.api.mfa import router as mfa_router
app.include_router(mfa_router, prefix="/api/auth/mfa", tags=["MFA"])

# === RBAC ===

from backend.api.rbac import router as rbac_router
app.include_router(rbac_router, prefix="/api/rbac", tags=["RBAC"])

# === API –ö–õ–Æ–ß–ò ===

from backend.api.api_keys import router as api_keys_router
app.include_router(api_keys_router, prefix="/api/api-keys", tags=["API Keys"])

# === PROJECTS ===

from backend.api.projects import router as projects_router
app.include_router(projects_router, prefix="/api/projects", tags=["Projects"])

# === AI ===

from backend.api.ai import router as ai_router
app.include_router(ai_router, prefix="/api/ai", tags=["AI"])

# === HEALTH CHECKS ===

from backend.api.health import router as health_router
app.include_router(health_router, prefix="/api/health", tags=["Health"])

# === AI –°–ï–†–í–ò–° ===

# @app.post("/api/ai/chat") - moved to ai router
# async def ai_chat(
    chat_request: ChatRequest,
    current_user: dict = Depends(get_current_user)
):
    """–ß–∞—Ç —Å AI —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_api_keys = {}
        supabase_client = supabase_manager.get_client("anon")
        if supabase_client:
            from backend.services.encryption_service import get_encryption_service
            encryption_service = get_encryption_service()
            
            user_keys_response = await execute_supabase_operation(
                lambda client: client.table("user_api_keys").select("*").eq("user_id", current_user["id"]).eq("is_active", True).execute(),
                "anon"
            )
            if user_keys_response.data:
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º API –∫–ª—é—á–∏
                for row in user_keys_response.data:
                    provider_name = row.get('provider_name', 'unknown')
                    try:
                        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º API –∫–ª—é—á
                        decrypted_key = encryption_service.decrypt_api_key(
                            row['api_key_encrypted'], 
                            current_user["id"]
                        )
                        user_api_keys[provider_name] = decrypted_key
                    except Exception as e:
                        logger.warning("failed_to_decrypt_api_key", provider=provider_name, error=str(e))
                        continue
        else:
            # Mock —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
            user_api_keys = {
                "openrouter": "mock_openrouter_key",
                "openai": "mock_openai_key"
            }
        
        # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
        ai_service = get_ai_service(current_user["id"], user_api_keys)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            {"role": "system", "content": "–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
            {"role": "user", "content": chat_request.message}
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await ai_service.route_request(
            messages=messages,
            model=chat_request.model,
            provider=chat_request.provider.value if chat_request.provider else None,
            project_id="",  # ChatRequest –Ω–µ –∏–º–µ–µ—Ç project_id
            max_tokens=chat_request.max_tokens,
            temperature=chat_request.temperature
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º AI –∑–∞–ø—Ä–æ—Å
        monitoring.log_ai_request(
            provider=response.provider.value,
            model=response.model,
            tokens=response.tokens_used,
            cost=response.cost_usd,
            success=response.success
        )
        
        if not response.success:
            raise HTTPException(status_code=500, detail=f"AI –æ—à–∏–±–∫–∞: {response.error}")
        
        return {
            "content": response.content,
            "provider": response.provider.value,
            "model": response.model,
            "usage": {
                "prompt_tokens": getattr(response, 'prompt_tokens', 0),
                "completion_tokens": getattr(response, 'completion_tokens', 0),
                "total_tokens": response.tokens_used,
                "prompt_cost": getattr(response, 'prompt_cost', 0.0),
                "completion_cost": getattr(response, 'completion_cost', 0.0),
                "total_cost": response.cost_usd
            },
            "response_time": response.response_time
        }
        
    except AIServiceError as e:
        logger.error("ai_service_error", error=str(e), error_type=type(e).__name__)
        monitoring.log_error(e, {"user_id": current_user["id"], "action": "ai_chat"})
        raise HTTPException(status_code=502, detail="AI service unavailable")
    except RateLimitError as e:
        logger.error("rate_limit_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=429, detail="Rate limit exceeded")
    except Exception as e:
        logger.error("ai_chat_error", error=str(e), error_type=type(e).__name__)
        monitoring.log_error(e, {"user_id": current_user["id"], "action": "ai_chat"})
        raise HTTPException(status_code=500, detail="AI chat failed")

# @app.get("/api/ai/usage") - moved to ai router
# async def get_ai_usage(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keys_response = await execute_supabase_operation(
            lambda client: client.table("user_api_keys").select("*").eq("user_id", current_user["id"]).eq("is_active", True).execute(),
            "anon"
        )
        user_api_keys = {
            row['provider']: row['api_key_decrypted'] 
            for row in user_keys_response.data
        } if user_keys_response.data else {}
        
        # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
        ai_service = get_ai_service(current_user["id"], user_api_keys)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await ai_service.get_usage_stats()
        
        return stats
        
    except Exception as e:
        logger.error("ai_usage_stats_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

# @app.get("/api/ai/providers") - moved to ai router
# async def get_ai_providers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    return {
        "providers": [
            {
                "id": "openrouter",
                "name": "OpenRouter",
                "description": "–î–æ—Å—Ç—É–ø –∫ –º–Ω–æ–∂–µ—Å—Ç–≤—É AI –º–æ–¥–µ–ª–µ–π",
                "website": "https://openrouter.ai",
                "requires_key": True,
                "free_models": ["deepseek/deepseek-v3", "qwen/qwen-2.5-coder-32b"]
            },
            {
                "id": "openai",
                "name": "OpenAI",
                "description": "GPT-4o –∏ GPT-4o-mini",
                "website": "https://openai.com",
                "requires_key": True,
                "free_models": []
            },
            {
                "id": "anthropic",
                "name": "Anthropic",
                "description": "Claude 3 Haiku –∏ Sonnet",
                "website": "https://anthropic.com",
                "requires_key": True,
                "free_models": []
            },
            {
                "id": "groq",
                "name": "Groq",
                "description": "–ë—ã—Å—Ç—Ä—ã–µ Llama –º–æ–¥–µ–ª–∏",
                "website": "https://groq.com",
                "requires_key": True,
                "free_models": ["llama-3-8b-8192", "llama-3-70b-8192"]
            }
        ]
    }

# @app.post("/api/ai/validate-keys") - moved to ai router
# async def validate_ai_keys(
    keys_data: dict,
    current_user: dict = Depends(get_current_user)
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
        ai_service = get_ai_service(current_user["id"], keys_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏
        validation_results = await ai_service.validate_all_keys()
        
        return {
            "validation_results": validation_results,
            "valid_keys": [k for k, v in validation_results.items() if v],
            "invalid_keys": [k for k, v in validation_results.items() if not v]
        }
        
    except Exception as e:
        logger.error("ai_keys_validation_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π: {str(e)}")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def load_project_to_memory(project_id: str, user_id: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ –ø–∞–º—è—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        supabase_client = supabase_manager.get_client("anon")
        if not supabase_client:
            # Mock —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç
            user_api_keys = {
                "openrouter": "mock_openrouter_key",
                "openai": "mock_openai_key"
            }
            pilot_wrapper = SamokoderGPTPilot(project_id, user_id, user_api_keys)
            await add_active_project(project_id, user_id, pilot_wrapper)
            logger.info("project_loaded_to_memory_mock", project_id=project_id)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_response = await execute_supabase_operation(
            lambda client: client.table("projects").select("*").eq("id", project_id).eq("user_id", user_id).single().execute(),
            "anon"
        )
        
        if not project_response.data:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        project_data = project_response.data
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_api_keys = {}
        user_keys_response = await execute_supabase_operation(
            lambda client: client.table("user_api_keys").select("*").eq("user_id", user_id).eq("is_active", True).execute(),
            "anon"
        )
        if user_keys_response.data:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–ª—é—á–µ–π
            for row in user_keys_response.data:
                provider_name = row.get('provider_name', 'unknown')
                user_api_keys[provider_name] = f"encrypted_key_{row['id']}"
        
        # –°–æ–∑–¥–∞–µ–º wrapper
        pilot_wrapper = SamokoderGPTPilot(project_id, user_id, user_api_keys)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if project_data['status'] != 'draft':
            await pilot_wrapper.restore_from_workspace()
        
        await add_active_project(project_id, user_id, pilot_wrapper)
        
        logger.info("project_loaded_to_memory", project_id=project_id)
        
    except Exception as e:
        logger.error("load_project_to_memory_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

# === MIDDLEWARE –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===

@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = datetime.now()
    
    response = await call_next(request)
    
    process_time = (datetime.now() - start_time).total_seconds()
    
    logger.info(
        "request_completed",
        method=request.method,
        path=request.url.path,
        status_code=response.status_code,
        process_time=process_time
    )
    
    return response

# Graceful shutdown
@app.on_event("shutdown")
async def shutdown_event():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown"""
    try:
        from backend.services.health_checker import health_checker
        await health_checker.close()
        await project_state_manager.close()
        await connection_manager.close()
        logger.info("Application shutdown completed")
    except Exception as e:
        logger.error("error_during_shutdown", error=str(e), error_type=type(e).__name__)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "backend.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug
    )