from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks, Request
from fastapi.responses import StreamingResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
from supabase import create_client, Client
import json
import uuid
import os
from datetime import datetime
from typing import Dict, List, Optional

from config.settings import settings
from backend.services.gpt_pilot_wrapper_v2 import SamokoderGPTPilot
from backend.services.ai_service import get_ai_service
from backend.auth.dependencies import get_current_user
from backend.monitoring import monitoring, monitoring_middleware, get_metrics_response
from backend.models.requests import LoginRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import structlog

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ structlog
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Samokoder Backend API",
    description="AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è full-stack –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    allow_credentials=True,
)

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ middleware
app.middleware("http")(monitoring_middleware)

# Rate Limiting middleware
from backend.middleware.rate_limit_middleware import rate_limit_middleware
app.middleware("http")(rate_limit_middleware)

# Validation middleware
from backend.middleware.validation_middleware import validation_middleware
app.middleware("http")(validation_middleware)

# Supabase –∫–ª–∏–µ–Ω—Ç (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π URL)
supabase = None
try:
    # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock Supabase
    if os.getenv("ENVIRONMENT") == "test" or os.getenv("PYTEST_CURRENT_TEST"):
        logger.info("supabase_mock_mode", reason="test_environment")
        supabase = None  # –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock —Ä–µ–∂–∏–º –≤ endpoints
    elif (settings.supabase_url and 
          settings.supabase_anon_key and 
          not settings.supabase_url.endswith("example.supabase.co") and
          not settings.supabase_anon_key.endswith("example") and
          "auhzhdndqyflfdfszapm" not in settings.supabase_url):  # –ò–∑–±–µ–≥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ URL
        supabase = create_client(
            settings.supabase_url, 
            settings.supabase_anon_key
        )
        logger.info("supabase_client_initialized", status="success")
    else:
        logger.warning("supabase_not_configured", reason="invalid_config")
        supabase = None
except Exception as e:
    logger.warning("supabase_client_failed", error=str(e), error_type=type(e).__name__)
    supabase = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
active_projects: Dict[str, SamokoderGPTPilot] = {}

# === –ë–ê–ó–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ===

@app.options("/{path:path}")
async def options_handler(path: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤.
    
    Args:
        path: –ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        Response: CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è preflight –∑–∞–ø—Ä–æ—Å–∞
    """
    from fastapi.responses import Response
    return Response(
        status_code=200,
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Credentials": "true"
        }
    )


@app.get("/")
async def root():
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç API.
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–µ
    """
    return {
        "message": "üöÄ Samokoder Backend API",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs"
    }

@app.get("/health", responses={500: {"description": "Internal server error"}})
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞.
    
    Returns:
        dict: –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        return monitoring.get_health_status()
    except Exception as e:
        logger.error("health_check_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"Health check failed: {str(e)}")

@app.get("/metrics")
async def metrics():
    """
    Prometheus –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        Response: –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus
    """
    return get_metrics_response()

@app.get("/health/detailed")
async def detailed_health_check():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    from backend.monitoring import check_external_services_health
    
    health_status = monitoring.get_health_status()
    external_services = await check_external_services_health()
    
    return {
        **health_status,
        "external_services": external_services,
        "active_projects": len(active_projects),
        "memory_usage": {"used": 0, "total": 0, "percentage": 0},  # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        "disk_usage": {"used": 0, "total": 0, "percentage": 0}  # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    }

# === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===

@app.post("/api/auth/login")
async def login(credentials: LoginRequest):
    """–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Supabase Auth (–∏–ª–∏ mock –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        # Pydantic –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 422 –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        email = credentials.email
        password = credentials.password
        
        # –ï—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç example, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if not supabase or settings.supabase_url.endswith("example.supabase.co"):
            logger.warning("supabase_unavailable", fallback="mock_auth")
            return {
                "message": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (mock —Ä–µ–∂–∏–º)",
                "user": {
                    "id": f"mock_user_{email}",
                    "email": email,
                    "created_at": "2025-01-01T00:00:00Z"
                },
                "session": {
                    "access_token": f"mock_token_{email}",
                    "token_type": "bearer"
                }
            }
        
        response = supabase.auth.sign_in_with_password({
            "email": email,
            "password": password
        })
        
        if response.user:
            logger.info("user_login_success", user_email=response.user.email)
            return {
                "message": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
                "user": response.user,
                "session": response.session
            }
        else:
            raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
    except Exception as e:
        logger.error("login_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=401, detail=f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")

@app.post("/api/auth/register")
async def register(user_data: dict):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not user_data:
            raise HTTPException(status_code=400, detail="–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        
        email = user_data.get("email")
        password = user_data.get("password")
        full_name = user_data.get("full_name")
        
        if not email or not password or not full_name:
            raise HTTPException(status_code=400, detail="Email, –ø–∞—Ä–æ–ª—å –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        
        if not isinstance(email, str) or not isinstance(password, str) or not isinstance(full_name, str):
            raise HTTPException(status_code=400, detail="–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏")
        
        if not email.strip() or not password.strip() or not full_name.strip():
            raise HTTPException(status_code=400, detail="–ü–æ–ª—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        
        # –ï—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç example, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not supabase or settings.supabase_url.endswith("example.supabase.co"):
            logger.warning("supabase_unavailable", fallback="mock_register")
            return {
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (mock —Ä–µ–∂–∏–º)",
                "user": {
                    "id": f"mock_user_{email}",
                    "email": email,
                    "full_name": full_name,
                    "created_at": "2025-01-01T00:00:00Z"
                },
                "access_token": f"mock_token_{email}",
                "token_type": "bearer"
            }
        
        # –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase
        response = supabase.auth.sign_up({
            "email": email,
            "password": password,
            "options": {
                "data": {
                    "full_name": full_name
                }
            }
        })
        
        if response.user:
            logger.info("user_register_success", user_email=email)
            return {
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                "user": {
                    "id": response.user.id,
                    "email": response.user.email,
                    "full_name": full_name,
                    "created_at": response.user.created_at
                },
                "access_token": response.session.access_token if response.session else None,
                "token_type": "bearer"
            }
        else:
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error("register_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")

@app.post("/api/auth/logout")
async def logout(current_user: dict = Depends(get_current_user)):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        supabase.auth.sign_out()
        logger.info("user_logout_success", user_email=current_user.get('email'))
        return {"message": "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥"}
    except Exception as e:
        logger.error("logout_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {str(e)}")

@app.get("/api/auth/user")
async def get_current_user_info(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return {
        "user": current_user,
        "timestamp": datetime.now().isoformat()
    }

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê–ú–ò ===

@app.get("/api/projects")
async def get_projects(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
        if supabase is None:
            return {
                "projects": [],
                "total_count": 0
            }
        
        response = supabase.table("projects").select("*").eq("user_id", current_user["id"]).order("created_at", desc=True).execute()
        
        if not response.data:
            return {
                "projects": [],
                "total_count": 0
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏
        projects_with_status = []
        for project in response.data:
            project["is_active"] = project["id"] in active_projects
            projects_with_status.append(project)
        
        return {
            "projects": projects_with_status,
            "total_count": len(projects_with_status)
        }
    except Exception as e:
        logger.error("get_projects_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}")

@app.post("/api/projects")
async def create_project(
    project_data: dict,
    current_user: dict = Depends(get_current_user),
    background_tasks: BackgroundTasks = None
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not project_data or not isinstance(project_data, dict):
        raise HTTPException(status_code=400, detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞")
    
    if not project_data.get("name") or not project_data.get("description"):
        raise HTTPException(status_code=400, detail="–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
    
    project_id = str(uuid.uuid4())
    user_id = current_user["id"]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_api_keys = {}
        if supabase:
            from backend.services.encryption_service import get_encryption_service
            encryption_service = get_encryption_service()
            
            user_keys_response = supabase.table("user_api_keys").select("*").eq("user_id", user_id).eq("is_active", True).execute()
            if user_keys_response.data:
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º API –∫–ª—é—á–∏
                for row in user_keys_response.data:
                    provider_name = row.get('provider_name', 'unknown')
                    try:
                        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º API –∫–ª—é—á
                        decrypted_key = encryption_service.decrypt_api_key(
                            row['api_key_encrypted'], 
                            user_id
                        )
                        user_api_keys[provider_name] = decrypted_key
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á –¥–ª—è {provider_name}: {e}")
                        continue
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É GPT-Pilot
        pilot_wrapper = SamokoderGPTPilot(project_id, user_id, user_api_keys)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
        init_result = await pilot_wrapper.initialize_project(
            app_description=project_data["description"],
            app_name=project_data["name"]
        )
        
        if init_result["status"] == "error":
            raise HTTPException(status_code=400, detail=init_result["message"])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if supabase:
            project_record = {
                "id": project_id,
                "user_id": user_id,
                "name": project_data["name"],
                "description": project_data["description"], 
                "status": "draft",
                "ai_config": project_data.get("ai_config", {}),
                "tech_stack": project_data.get("tech_stack", {}),
                "workspace_path": init_result.get("workspace", f"workspaces/{user_id}/{project_id}"),
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat()
            }
            
            response = supabase.table("projects").insert(project_record).execute()
            
            if not response.data:
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        else:
            # Mock —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏
            logger.warning("supabase_unavailable", fallback="memory_only")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        active_projects[project_id] = pilot_wrapper
        
        logger.info("project_created", project_id=project_id, user_id=user_id)
        
        return {
            "project_id": project_id,
            "status": "draft",
            "message": "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "workspace": init_result.get("workspace", f"workspaces/{user_id}/{project_id}")
        }
        
    except Exception as e:
        logger.error("create_project_error", error=str(e), error_type=type(e).__name__)
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if project_id in active_projects:
            del active_projects[project_id]
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

@app.get("/api/projects/{project_id}")
async def get_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    try:
        if supabase:
            response = supabase.table("projects").select("*").eq("id", project_id).eq("user_id", current_user["id"]).single().execute()
            
            if not response.data:
                raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            project_data = response.data
            project_data["is_active"] = project_id in active_projects
            
            return {
                "project": project_data
            }
        else:
            # Mock —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            if project_id not in active_projects:
                raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            pilot_wrapper = active_projects[project_id]
            return {
                "project": {
                    "id": project_id,
                    "user_id": current_user["id"],
                    "name": "Mock Project",
                    "description": "Mock project description",
                    "status": "active",
                    "created_at": "2025-01-01T00:00:00Z",
                    "is_active": True
                }
            }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("get_project_error", project_id=project_id, error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

@app.delete("/api/projects/{project_id}")
async def delete_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"""
    
    try:
        if supabase:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            project_response = supabase.table("projects").select("*").eq("id", project_id).eq("user_id", current_user["id"]).single().execute()
            
            if not project_response.data:
                raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            if project_id in active_projects:
                del active_projects[project_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            supabase.table("projects").delete().eq("id", project_id).execute()
            
            logger.info("project_deleted", project_id=project_id)
            
            return {"message": "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}
        else:
            # Mock —Ä–µ–∂–∏–º - —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –ø–∞–º—è—Ç–∏
            if project_id not in active_projects:
                raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            del active_projects[project_id]
            logger.info("project_deleted_mock", project_id=project_id)
            
            return {"message": "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω (mock —Ä–µ–∂–∏–º)"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("delete_project_error", project_id=project_id, error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

# === –ß–ê–¢ –ò –ì–ï–ù–ï–†–ê–¶–ò–Ø ===

@app.post("/api/projects/{project_id}/chat")
async def chat_with_project(
    project_id: str,
    chat_data: dict,
    current_user: dict = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not chat_data.get("message"):
        raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    
    if project_id not in active_projects:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–∞–∑—ã –µ—Å–ª–∏ –Ω–µ –≤ –ø–∞–º—è—Ç–∏
        await load_project_to_memory(project_id, current_user["id"])
    
    if project_id not in active_projects:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    pilot_wrapper = active_projects[project_id]
    
    async def stream_response():
        try:
            async for update in pilot_wrapper.chat_with_agents(
                message=chat_data["message"],
                context=chat_data.get("context", "chat")
            ):
                yield f"data: {json.dumps(update)}\n\n"
        except Exception as e:
            logger.error("chat_stream_error", error=str(e), error_type=type(e).__name__)
            yield f"data: {json.dumps({'type': 'error', 'message': str(e)})}\n\n"
        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            pass
    
    return StreamingResponse(
        stream_response(),
        media_type="text/plain",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
        }
    )

@app.post("/api/projects/{project_id}/generate")
async def generate_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    if project_id not in active_projects:
        await load_project_to_memory(project_id, current_user["id"])
    
    if project_id not in active_projects:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    pilot_wrapper = active_projects[project_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    try:
        supabase.table("projects").update({
            "status": "generating",
            "updated_at": datetime.now().isoformat()
        }).eq("id", project_id).execute()
    except Exception as e:
        logger.error("update_project_status_error", error=str(e), error_type=type(e).__name__)
    
    async def stream_generation():
        try:
            async for update in pilot_wrapper.generate_full_app():
                yield f"data: {json.dumps(update)}\n\n"
                
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            supabase.table("projects").update({
                "status": "completed",
                "updated_at": datetime.now().isoformat()
            }).eq("id", project_id).execute()
            
        except Exception as e:
            logger.error("generation_stream_error", error=str(e), error_type=type(e).__name__)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                supabase.table("projects").update({
                    "status": "error",
                    "updated_at": datetime.now().isoformat()
                }).eq("id", project_id).execute()
            except Exception as update_error:
                logger.error("update_project_status_on_error", error=str(update_error), error_type=type(update_error).__name__)
            
            yield f"data: {json.dumps({'type': 'error', 'message': str(e)})}\n\n"
        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            pass
    
    return StreamingResponse(
        stream_generation(),
        media_type="text/plain",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
        }
    )

# === –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê ===

@app.get("/api/projects/{project_id}/files")
async def get_project_files(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    if project_id not in active_projects:
        await load_project_to_memory(project_id, current_user["id"])
    
    if project_id not in active_projects:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    pilot_wrapper = active_projects[project_id]
    
    try:
        file_tree = await pilot_wrapper.get_project_files()
        
        return {
            "project_id": project_id,
            "files": file_tree,
            "updated_at": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error("get_project_files_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.get("/api/projects/{project_id}/files/{file_path:path}")
async def get_file_content(
    project_id: str,
    file_path: str, 
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    if project_id not in active_projects:
        await load_project_to_memory(project_id, current_user["id"])
    
    if project_id not in active_projects:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    pilot_wrapper = active_projects[project_id]
    
    try:
        content = pilot_wrapper.get_file_content(file_path)
        return {
            "file_path": file_path,
            "content": content,
            "size": len(content)
        }
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error("get_file_content_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

# === –≠–ö–°–ü–û–†–¢ ===

@app.post("/api/projects/{project_id}/export")
async def export_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ ZIP"""
    
    if project_id not in active_projects:
        await load_project_to_memory(project_id, current_user["id"])
    
    if project_id not in active_projects:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    pilot_wrapper = active_projects[project_id]
    
    try:
        zip_path = pilot_wrapper.create_zip_export()
        
        logger.info("project_exported", project_id=project_id)
        
        return FileResponse(
            zip_path,
            media_type="application/zip",
            filename=f"samokoder_project_{project_id}.zip"
        )
    except Exception as e:
        logger.error("export_project_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

# === MFA ===

from backend.api.mfa import router as mfa_router
app.include_router(mfa_router, prefix="/api/auth/mfa", tags=["MFA"])

# === RBAC ===

from backend.api.rbac import router as rbac_router
app.include_router(rbac_router, prefix="/api/rbac", tags=["RBAC"])

# === API –ö–õ–Æ–ß–ò ===

from backend.api.api_keys import router as api_keys_router
app.include_router(api_keys_router, prefix="/api/api-keys", tags=["API Keys"])

# === HEALTH CHECKS ===

from backend.api.health import router as health_router
app.include_router(health_router, prefix="/api/health", tags=["Health"])

# === AI –°–ï–†–í–ò–° ===

@app.post("/api/ai/chat")
async def ai_chat(
    chat_data: dict,
    current_user: dict = Depends(get_current_user)
):
    """–ß–∞—Ç —Å AI —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
    
    if not chat_data.get("message"):
        raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_api_keys = {}
        if supabase:
            from backend.services.encryption_service import get_encryption_service
            encryption_service = get_encryption_service()
            
            user_keys_response = supabase.table("user_api_keys").select("*").eq("user_id", current_user["id"]).eq("is_active", True).execute()
            if user_keys_response.data:
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º API –∫–ª—é—á–∏
                for row in user_keys_response.data:
                    provider_name = row.get('provider_name', 'unknown')
                    try:
                        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º API –∫–ª—é—á
                        decrypted_key = encryption_service.decrypt_api_key(
                            row['api_key_encrypted'], 
                            current_user["id"]
                        )
                        user_api_keys[provider_name] = decrypted_key
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á –¥–ª—è {provider_name}: {e}")
                        continue
        else:
            # Mock —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
            user_api_keys = {
                "openrouter": "mock_openrouter_key",
                "openai": "mock_openai_key"
            }
        
        # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
        ai_service = get_ai_service(current_user["id"], user_api_keys)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            {"role": "system", "content": "–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
            {"role": "user", "content": chat_data["message"]}
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await ai_service.route_request(
            messages=messages,
            model=chat_data.get("model"),
            provider=chat_data.get("provider"),
            project_id=chat_data.get("project_id", ""),
            max_tokens=chat_data.get("max_tokens", 4096),
            temperature=chat_data.get("temperature", 0.7)
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º AI –∑–∞–ø—Ä–æ—Å
        monitoring.log_ai_request(
            provider=response.provider.value,
            model=response.model,
            tokens=response.tokens_used,
            cost=response.cost_usd,
            success=response.success
        )
        
        if not response.success:
            raise HTTPException(status_code=500, detail=f"AI –æ—à–∏–±–∫–∞: {response.error}")
        
        return {
            "content": response.content,
            "provider": response.provider.value,
            "model": response.model,
            "tokens_used": response.tokens_used,
            "cost_usd": response.cost_usd,
            "response_time": response.response_time
        }
        
    except Exception as e:
        logger.error("ai_chat_error", error=str(e), error_type=type(e).__name__)
        monitoring.log_error(e, {"user_id": current_user["id"], "action": "ai_chat"})
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ AI —á–∞—Ç–∞: {str(e)}")

@app.get("/api/ai/usage")
async def get_ai_usage(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keys_response = supabase.table("user_api_keys").select("*").eq("user_id", current_user["id"]).eq("is_active", True).execute()
        user_api_keys = {
            row['provider']: row['api_key_decrypted'] 
            for row in user_keys_response.data
        } if user_keys_response.data else {}
        
        # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
        ai_service = get_ai_service(current_user["id"], user_api_keys)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await ai_service.get_usage_stats()
        
        return stats
        
    except Exception as e:
        logger.error("ai_usage_stats_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@app.get("/api/ai/providers")
async def get_ai_providers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    return {
        "providers": [
            {
                "id": "openrouter",
                "name": "OpenRouter",
                "description": "–î–æ—Å—Ç—É–ø –∫ –º–Ω–æ–∂–µ—Å—Ç–≤—É AI –º–æ–¥–µ–ª–µ–π",
                "website": "https://openrouter.ai",
                "requires_key": True,
                "free_models": ["deepseek/deepseek-v3", "qwen/qwen-2.5-coder-32b"]
            },
            {
                "id": "openai",
                "name": "OpenAI",
                "description": "GPT-4o –∏ GPT-4o-mini",
                "website": "https://openai.com",
                "requires_key": True,
                "free_models": []
            },
            {
                "id": "anthropic",
                "name": "Anthropic",
                "description": "Claude 3 Haiku –∏ Sonnet",
                "website": "https://anthropic.com",
                "requires_key": True,
                "free_models": []
            },
            {
                "id": "groq",
                "name": "Groq",
                "description": "–ë—ã—Å—Ç—Ä—ã–µ Llama –º–æ–¥–µ–ª–∏",
                "website": "https://groq.com",
                "requires_key": True,
                "free_models": ["llama-3-8b-8192", "llama-3-70b-8192"]
            }
        ]
    }

@app.post("/api/ai/validate-keys")
async def validate_ai_keys(
    keys_data: dict,
    current_user: dict = Depends(get_current_user)
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
        ai_service = get_ai_service(current_user["id"], keys_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏
        validation_results = await ai_service.validate_all_keys()
        
        return {
            "validation_results": validation_results,
            "valid_keys": [k for k, v in validation_results.items() if v],
            "invalid_keys": [k for k, v in validation_results.items() if not v]
        }
        
    except Exception as e:
        logger.error("ai_keys_validation_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π: {str(e)}")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def load_project_to_memory(project_id: str, user_id: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ –ø–∞–º—è—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        if not supabase:
            # Mock —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç
            user_api_keys = {
                "openrouter": "mock_openrouter_key",
                "openai": "mock_openai_key"
            }
            pilot_wrapper = SamokoderGPTPilot(project_id, user_id, user_api_keys)
            active_projects[project_id] = pilot_wrapper
            logger.info("project_loaded_to_memory_mock", project_id=project_id)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_response = supabase.table("projects").select("*").eq("id", project_id).eq("user_id", user_id).single().execute()
        
        if not project_response.data:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        project_data = project_response.data
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_api_keys = {}
        user_keys_response = supabase.table("user_api_keys").select("*").eq("user_id", user_id).eq("is_active", True).execute()
        if user_keys_response.data:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–ª—é—á–µ–π
            for row in user_keys_response.data:
                provider_name = row.get('provider_name', 'unknown')
                user_api_keys[provider_name] = f"encrypted_key_{row['id']}"
        
        # –°–æ–∑–¥–∞–µ–º wrapper
        pilot_wrapper = SamokoderGPTPilot(project_id, user_id, user_api_keys)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if project_data['status'] != 'draft':
            await pilot_wrapper.restore_from_workspace()
        
        active_projects[project_id] = pilot_wrapper
        
        logger.info("project_loaded_to_memory", project_id=project_id)
        
    except Exception as e:
        logger.error("load_project_to_memory_error", error=str(e), error_type=type(e).__name__)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

# === MIDDLEWARE –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===

@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = datetime.now()
    
    response = await call_next(request)
    
    process_time = (datetime.now() - start_time).total_seconds()
    
    logger.info(
        "request_completed",
        method=request.method,
        path=request.url.path,
        status_code=response.status_code,
        process_time=process_time
    )
    
    return response

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "backend.main_fixed:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug
    )