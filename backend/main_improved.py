"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è main.py —Å Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks, Request, status
from fastapi.responses import StreamingResponse, FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.exceptions import RequestValidationError
from supabase import create_client, Client
import asyncio
import json
import os
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import logging
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
from backend.models.requests import (
    LoginRequest, RegisterRequest, ProjectCreateRequest, ProjectUpdateRequest,
    ProjectListRequest, ChatRequest, AIUsageRequest, APIKeyCreateRequest,
    APIKeyUpdateRequest, UserSettingsUpdateRequest, FileUploadRequest,
    FileContentRequest, ExportRequest, SearchRequest, APIKeyValidationRequest
)
from backend.models.responses import (
    BaseResponse, ErrorResponse, LoginResponse, ProjectResponse, ProjectListResponse,
    ProjectCreateResponse, AIResponse, AIUsageStatsResponse, APIKeyResponse,
    APIKeyListResponse, APIKeyValidationResponse, UserSettingsResponse,
    FileInfoResponse, FileTreeResponse, ExportResponse, AIProvidersResponse,
    HealthCheckResponse, DetailedHealthResponse, MetricsResponse
)

from config.settings import settings
from backend.services.gpt_pilot_integration import GPTPilotIntegration
from backend.services.ai_service import get_ai_service
from backend.auth.dependencies import get_current_user
from backend.monitoring import monitoring, monitoring_middleware, get_metrics_response
from backend.middleware.rate_limit_middleware import (
    RateLimitMiddleware, auth_rate_limit, api_rate_limit, ai_rate_limit
)
from backend.services.connection_pool import connection_pool_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.log_level.upper()),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Samokoder Backend API",
    description="AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è full-stack –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
    version="1.0.0",
    docs_url="/docs" if settings.enable_api_docs else None,
    redoc_url="/redoc" if settings.enable_api_docs else None
)

# CORS middleware —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["Authorization", "Content-Type", "X-Requested-With"],
    allow_credentials=True,
    max_age=3600,
)

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ middleware
app.middleware("http")(monitoring_middleware)

# Rate limiting middleware
app.middleware("http")(RateLimitMiddleware(app))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        await connection_pool_manager.initialize_all()
        logger.info("Application startup completed successfully")
    except Exception as e:
        logger.error(f"Application startup failed: {e}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        await connection_pool_manager.close_all()
        logger.info("Application shutdown completed successfully")
    except Exception as e:
        logger.error(f"Application shutdown error: {e}")

# Supabase –∫–ª–∏–µ–Ω—Ç (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π URL)
supabase = None
try:
    if (settings.supabase_url and 
        settings.supabase_anon_key and 
        not settings.supabase_url.endswith("example.supabase.co") and
        not settings.supabase_anon_key.endswith("example")):
        supabase = create_client(
            settings.supabase_url, 
            settings.supabase_anon_key
        )
        logger.info("Supabase client initialized successfully")
    else:
        logger.warning("Supabase not configured - working without database")
        supabase = None
except Exception as e:
    logger.warning(f"Supabase client creation failed: {e}")
    supabase = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
active_projects: Dict[str, GPTPilotIntegration] = {}

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö ===

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic"""
    logger.warning(f"Validation error: {exc.errors()}")
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content=ErrorResponse(
            error="validation_error",
            message="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            details={"errors": exc.errors()}
        ).dict()
    )

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"HTTP error {exc.status_code}: {exc.detail}")
    return JSONResponse(
        status_code=exc.status_code,
        content=ErrorResponse(
            error="http_error",
            message=str(exc.detail),
            details={"status_code": exc.status_code}
        ).dict()
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"Unexpected error: {exc}", exc_info=True)
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content=ErrorResponse(
            error="internal_error",
            message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            details={"error_id": str(uuid.uuid4())}
        ).dict()
    )

# === –ë–ê–ó–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ===

@app.options("/{path:path}")
async def options_handler(path: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return JSONResponse(
        status_code=200,
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers": "Authorization, Content-Type, X-Requested-With",
            "Access-Control-Allow-Credentials": "true"
        }
    )

@app.get("/", response_model=BaseResponse)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return BaseResponse(
        success=True,
        message="üöÄ Samokoder Backend API",
        timestamp=datetime.now()
    )

@app.get("/health", response_model=HealthCheckResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    health_status = monitoring.get_health_status()
    return HealthCheckResponse(
        status=health_status.get("status", "unknown"),
        version="1.0.0",
        uptime=health_status.get("uptime", 0),
        services=health_status.get("services", {})
    )

@app.get("/health/detailed", response_model=DetailedHealthResponse)
async def detailed_health_check():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    from backend.monitoring import check_external_services_health
    
    health_status = monitoring.get_health_status()
    external_services = await check_external_services_health()
    connection_pools_health = await connection_pool_manager.health_check()
    
    return DetailedHealthResponse(
        status=health_status.get("status", "unknown"),
        version="1.0.0",
        uptime=health_status.get("uptime", 0),
        services=health_status.get("services", {}),
        external_services=external_services,
        active_projects=len(active_projects),
        memory_usage=health_status.get("memory_usage", {}),
        disk_usage=health_status.get("disk_usage", {}),
        connection_pools=connection_pools_health
    )

@app.get("/metrics", response_model=MetricsResponse)
async def metrics():
    """Prometheus –º–µ—Ç—Ä–∏–∫–∏"""
    metrics_data = get_metrics_response()
    return MetricsResponse(**metrics_data)

# === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===

@app.post("/api/auth/login", response_model=LoginResponse)
async def login(
    credentials: LoginRequest,
    rate_limit: dict = Depends(auth_rate_limit)
):
    """–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Supabase Auth (–∏–ª–∏ mock –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        # –ï—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if not supabase or settings.supabase_url.endswith("example.supabase.co"):
            logger.warning("Supabase not available, using mock authentication")
            return LoginResponse(
                message="–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (mock —Ä–µ–∂–∏–º)",
                user={
                    "id": f"mock_user_{credentials.email}",
                    "email": credentials.email,
                    "full_name": None,
                    "avatar_url": None,
                    "subscription_tier": "free",
                    "subscription_status": "active",
                    "api_credits_balance": 0.0,
                    "created_at": datetime.now(),
                    "updated_at": datetime.now()
                },
                access_token=f"mock_token_{credentials.email}",
                expires_in=3600
            )
        
        response = supabase.auth.sign_in_with_password({
            "email": credentials.email,
            "password": credentials.password
        })
        
        if response.user:
            logger.info(f"User {response.user.email} logged in successfully")
            return LoginResponse(
                message="–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
                user={
                    "id": response.user.id,
                    "email": response.user.email,
                    "full_name": response.user.user_metadata.get("full_name"),
                    "avatar_url": response.user.user_metadata.get("avatar_url"),
                    "subscription_tier": "free",
                    "subscription_status": "active",
                    "api_credits_balance": 0.0,
                    "created_at": datetime.fromisoformat(response.user.created_at.replace('Z', '+00:00')),
                    "updated_at": datetime.now()
                },
                access_token=response.session.access_token,
                expires_in=response.session.expires_in
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Login error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
        )

@app.post("/api/auth/logout", response_model=BaseResponse)
async def logout(current_user: dict = Depends(get_current_user)):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if supabase:
            supabase.auth.sign_out()
        logger.info(f"User {current_user.get('email')} logged out")
        return BaseResponse(
            success=True,
            message="–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥"
        )
    except Exception as e:
        logger.error(f"Logout error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
        )

@app.get("/api/auth/user", response_model=dict)
async def get_current_user_info(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return {
        "user": current_user,
        "timestamp": datetime.now().isoformat()
    }

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê–ú–ò ===

@app.get("/api/projects", response_model=ProjectListResponse)
async def get_projects(
    request: ProjectListRequest = Depends(),
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        if not supabase:
            # Mock —Ä–µ–∂–∏–º
            return ProjectListResponse(
                projects=[],
                total_count=0,
                page=request.page,
                limit=request.limit
            )
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        count_query = supabase.table("projects").select("id", count="exact").eq("user_id", current_user["id"])
        if request.status:
            count_query = count_query.eq("status", request.status.value)
        if request.search:
            count_query = count_query.or_(f"name.ilike.%{request.search}%,description.ilike.%{request.search}%")
        
        count_response = count_query.execute()
        total_count = count_response.count or 0
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        query = supabase.table("projects").select("*").eq("user_id", current_user["id"])
        
        if request.status:
            query = query.eq("status", request.status.value)
        if request.search:
            query = query.or_(f"name.ilike.%{request.search}%,description.ilike.%{request.search}%")
        
        query = query.order("created_at", desc=True)
        query = query.range(
            (request.page - 1) * request.limit,
            request.page * request.limit - 1
        )
        
        response = query.execute()
        
        projects = []
        for project_data in response.data or []:
            projects.append(ProjectResponse(**project_data))
        
        return ProjectListResponse(
            projects=projects,
            total_count=total_count,
            page=request.page,
            limit=request.limit
        )
        
    except Exception as e:
        logger.error(f"Error getting projects: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤"
        )

@app.post("/api/projects", response_model=ProjectCreateResponse)
async def create_project(
    project_data: ProjectCreateRequest,
    current_user: dict = Depends(get_current_user),
    background_tasks: BackgroundTasks = None,
    rate_limit: dict = Depends(api_rate_limit)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    
    project_id = str(uuid.uuid4())
    user_id = current_user["id"]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if supabase:
            user_keys_response = supabase.table("user_api_keys").select("*").eq("user_id", user_id).eq("is_active", True).execute()
            user_api_keys = {
                row['provider']: row['api_key_decrypted'] 
                for row in user_keys_response.data or []
            }
        else:
            user_api_keys = {}
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é GPT-Pilot
        pilot_integration = GPTPilotIntegration(project_id, user_id, user_api_keys)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
        init_result = await pilot_integration.initialize_project(
            app_name=project_data.name,
            app_description=project_data.description
        )
        
        if init_result["status"] == "error":
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=init_result["message"]
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É (–µ—Å–ª–∏ Supabase –¥–æ—Å—Ç—É–ø–µ–Ω)
        if supabase:
            project_record = {
                "id": project_id,
                "user_id": user_id,
                "name": project_data.name,
                "description": project_data.description,
                "status": "created",
                "tech_stack": project_data.tech_stack or {},
                "ai_config": project_data.ai_config or {},
                "created_at": datetime.now().isoformat()
            }
            supabase.table("projects").insert(project_record).execute()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        active_projects[project_id] = pilot_integration
        
        logger.info(f"Project {project_id} created successfully for user {user_id}")
        
        return ProjectCreateResponse(
            message="–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            project_id=project_id,
            status="created",
            workspace=init_result["workspace"]
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error creating project: {e}")
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if project_id in active_projects:
            del active_projects[project_id]
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
        )

@app.get("/api/projects/{project_id}", response_model=ProjectResponse)
async def get_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    try:
        if supabase:
            response = supabase.table("projects").select("*").eq("id", project_id).eq("user_id", current_user["id"]).single().execute()
            
            if not response.data:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
            
            return ProjectResponse(**response.data)
        else:
            # Mock —Ä–µ–∂–∏–º
            if project_id not in active_projects:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
            
            return ProjectResponse(
                id=project_id,
                user_id=current_user["id"],
                name="Mock Project",
                description="Mock project description",
                status="active",
                created_at=datetime.now(),
                updated_at=datetime.now()
            )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting project {project_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
        )

@app.delete("/api/projects/{project_id}", response_model=BaseResponse)
async def delete_project(
    project_id: str,
    current_user: dict = Depends(get_current_user)
):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"""
    
    try:
        if not supabase:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        project_response = supabase.table("projects").select("*").eq("id", project_id).eq("user_id", current_user["id"]).single().execute()
        
        if not project_response.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        if project_id in active_projects:
            del active_projects[project_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
        supabase.table("projects").delete().eq("id", project_id).execute()
        
        logger.info(f"Project {project_id} deleted successfully")
        
        return BaseResponse(
            success=True,
            message="–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error deleting project {project_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
        )

# === –ß–ê–¢ –ò –ì–ï–ù–ï–†–ê–¶–ò–Ø ===

@app.post("/api/projects/{project_id}/chat")
async def chat_with_project(
    project_id: str,
    chat_data: ChatRequest,
    current_user: dict = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞"""
    
    if project_id not in active_projects:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–∞–∑—ã –µ—Å–ª–∏ –Ω–µ –≤ –ø–∞–º—è—Ç–∏
        await load_project_to_memory(project_id, current_user["id"])
    
    if project_id not in active_projects:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        )
    
    pilot_integration = active_projects[project_id]
    
    async def stream_response():
        try:
            async for update in pilot_integration.chat_with_agents(
                message=chat_data.message,
                context=chat_data.context
            ):
                yield f"data: {json.dumps(update)}\n\n"
        except Exception as e:
            logger.error(f"Error in chat stream: {e}")
            yield f"data: {json.dumps({'type': 'error', 'message': '–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤'})}\n\n"
    
    return StreamingResponse(
        stream_response(),
        media_type="text/plain",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
        }
    )

# === AI –°–ï–†–í–ò–° ===

@app.post("/api/ai/chat", response_model=AIResponse)
async def ai_chat(
    chat_data: ChatRequest,
    current_user: dict = Depends(get_current_user),
    rate_limit: dict = Depends(ai_rate_limit)
):
    """–ß–∞—Ç —Å AI —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if supabase:
            user_keys_response = supabase.table("user_api_keys").select("*").eq("user_id", current_user["id"]).eq("is_active", True).execute()
            user_api_keys = {
                row['provider']: row['api_key_decrypted'] 
                for row in user_keys_response.data or []
            }
        else:
            user_api_keys = {}
        
        # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
        ai_service = get_ai_service(current_user["id"], user_api_keys)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            {"role": "system", "content": "–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
            {"role": "user", "content": chat_data.message}
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await ai_service.route_request(
            messages=messages,
            model=chat_data.model,
            provider=chat_data.provider.value if chat_data.provider else None,
            project_id="",
            max_tokens=chat_data.max_tokens,
            temperature=chat_data.temperature
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º AI –∑–∞–ø—Ä–æ—Å
        monitoring.log_ai_request(
            provider=response.provider.value,
            model=response.model,
            tokens=response.tokens_used,
            cost=response.cost_usd,
            success=response.success
        )
        
        if not response.success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="–û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞"
            )
        
        return AIResponse(
            content=response.content,
            provider=response.provider,
            model=response.model,
            tokens_used=response.tokens_used,
            cost_usd=response.cost_usd,
            response_time=response.response_time
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"AI chat error: {e}")
        monitoring.log_error(e, {"user_id": current_user["id"], "action": "ai_chat"})
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ AI —á–∞—Ç–∞"
        )

@app.get("/api/ai/usage", response_model=AIUsageStatsResponse)
async def get_ai_usage(current_user: dict = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if supabase:
            user_keys_response = supabase.table("user_api_keys").select("*").eq("user_id", current_user["id"]).eq("is_active", True).execute()
            user_api_keys = {
                row['provider']: row['api_key_decrypted'] 
                for row in user_keys_response.data or []
            }
        else:
            user_api_keys = {}
        
        # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
        ai_service = get_ai_service(current_user["id"], user_api_keys)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await ai_service.get_usage_stats()
        
        return AIUsageStatsResponse(**stats)
        
    except Exception as e:
        logger.error(f"AI usage stats error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )

@app.get("/api/ai/providers", response_model=AIProvidersResponse)
async def get_ai_providers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    providers = [
        {
            "id": "openrouter",
            "name": "OpenRouter",
            "display_name": "OpenRouter",
            "description": "–î–æ—Å—Ç—É–ø –∫ –º–Ω–æ–∂–µ—Å—Ç–≤—É AI –º–æ–¥–µ–ª–µ–π",
            "website": "https://openrouter.ai",
            "requires_key": True,
            "free_models": ["deepseek/deepseek-v3", "qwen/qwen-2.5-coder-32b"]
        },
        {
            "id": "openai",
            "name": "OpenAI",
            "display_name": "OpenAI",
            "description": "GPT-4o –∏ GPT-4o-mini",
            "website": "https://openai.com",
            "requires_key": True,
            "free_models": []
        },
        {
            "id": "anthropic",
            "name": "Anthropic",
            "display_name": "Anthropic",
            "description": "Claude 3 Haiku –∏ Sonnet",
            "website": "https://anthropic.com",
            "requires_key": True,
            "free_models": []
        },
        {
            "id": "groq",
            "name": "Groq",
            "display_name": "Groq",
            "description": "–ë—ã—Å—Ç—Ä—ã–µ Llama –º–æ–¥–µ–ª–∏",
            "website": "https://groq.com",
            "requires_key": True,
            "free_models": ["llama-3-8b-8192", "llama-3-70b-8192"]
        }
    ]
    
    return AIProvidersResponse(providers=providers)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def load_project_to_memory(project_id: str, user_id: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ –ø–∞–º—è—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        if not supabase:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_response = supabase.table("projects").select("*").eq("id", project_id).eq("user_id", user_id).single().execute()
        
        if not project_response.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        project_data = project_response.data
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keys_response = supabase.table("user_api_keys").select("*").eq("user_id", user_id).eq("is_active", True).execute()
        user_api_keys = {
            row['provider']: row['api_key_decrypted']
            for row in user_keys_response.data or []
        }
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        pilot_integration = GPTPilotIntegration(project_id, user_id, user_api_keys)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if project_data['status'] != 'created':
            await pilot_integration.restore_from_workspace()
        
        active_projects[project_id] = pilot_integration
        
        logger.info(f"Project {project_id} loaded to memory successfully")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error loading project to memory: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"
        )

# === MIDDLEWARE –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===

@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = datetime.now()
    
    response = await call_next(request)
    
    process_time = (datetime.now() - start_time).total_seconds()
    
    logger.info(
        f"{request.method} {request.url.path} - "
        f"Status: {response.status_code} - "
        f"Time: {process_time:.3f}s"
    )
    
    return response

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "backend.main_improved:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug
    )